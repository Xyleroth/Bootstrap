%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 0_1169.eps
%%Creator: Adobe Illustrator(R) 17.0
%%For: Надя
%%CreationDate: 5/5/2015
%%BoundingBox: 0 0 490 500
%%HiResBoundingBox: 0 0 490 500
%%CropBox: 0 0 490 500
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.0.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.0.1 x260 R agm 4.7700 ct 5.3328%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 12692 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFD24FFA87D7D7DA8A8FD15FFA8A87D
%7D7DA8FD16FFA8A87D7D7DFD17FFFD047DA8FD26FF7D52277D7D7D525252
%FD12FFA85252527D7D5227527DFD12FFA82752527D5252277DA8FD11FFA8
%7D2752527D525227A8FD23FF5252A8FF7DA87DA8A85252A8FD0FFFA8277D
%A8FFA8FFA8A87D527DFD10FF7D27A8FFFFFD04A85252A8FD0FFFA85252FF
%A8A8A8FFFFA8277DFD21FF5252A8FF5227275227A8FF7D27FD0EFFA8277D
%FFFF2752272752FFA85252FD0EFF5227FFFFA827522727A8FF5252A8FD0D
%FFA8277DFF7D522752277DFFA8277DFD1FFF7D52FFFF52522752525227FF
%FF7D52FD0DFF527DFFFF527D52527D52A8FFA852A8FD0CFFA827FFFFFF52
%52277D527DFFFF5252FD0DFF527DFFA85227522752277DFFFF27A8FD1DFF
%A8527DFF7D27527D525227277DFFA8277DFD0BFF7D52FFFFFF7DA8FFA8FF
%52A8FFFF5252FD0CFF27A8FFFF7D7DFFA8FFA87DFFFFFF27A8FD0BFF7D27
%FFFF7D277D5252275227FFFF7D52FD1DFFA852FFFFA827FFFFFFA8A8527D
%FFFF527DFD0BFF527DFFFFFF52FD04FF7DA8FFFFFF52FD0BFFA852A8FFFF
%A87DFFFFFFA87DFFFFFF7D52FD0BFF527DFFFF527DFFFFA8A85252A8FFA8
%52A8FD1CFF527DFFFF7D52FD05FF7D52FFFF7D52FD0BFF27A8FFFFA852A8
%FFFFFF7DA8FFFFA8527DFD0AFF7D52FFFFFF7D7DFFFFFFA852FFFFFF7D52
%FD0AFFA8527DFFA8527DFD05FF27A8FFFF52A8FD1CFF7D7DFFFFFF277DFF
%FFA8A827A8FFFF7D52FD0AFFA852A8FFFFFF7DA8FFFFFF7DA8FFFFFF52A8
%FD0AFF7D7DFFFFFFA87DFFFFFFA8A8FFFFFFA852FD0BFF52A8FFFF7D52A8
%FFFFFF5252FFFFFF7D7DFD1CFF7D7DFFFFFFA852A8A87D27A8FFFFFF7D52
%FD0BFF27A8FD04FF52FFFF7D7DFFFFFFA8527DFD0AFF7D52FD04FFA87DFF
%A87DFD04FF7D52FD0AFFA852A8FFFFFF527DFFFF7D527DFFFFFF52A8FD1C
%FFA852FD05FF7DA87DFD05FF527DFD0BFF527DFD05FF7D7DA8FD05FF27FD
%0BFF7D52FFFFFFA87D7D7DA87DA8A8FFFF7D52FD0BFF527DFFFFA8A87DA8
%A87D7DA8FFFFA852A8FD1CFFA8527DFF5252A8FFA8FFA85252A8A8527DFD
%0BFF7D52FFA8277DFF7D52FFA85252FF7D52FD0CFF27A87D52527DA87D7D
%A8525252A827A8FD0BFF7D27FF525252A87D7DA87D52527D7D27FD1EFF7D
%5252522752A8FFFF7D27FD0452FD0DFF527D275227A87D52FF7D27525252
%A8FD0CFFA8277DA8FFFFFF27A8FFFFFFA82752FD0DFF5227A8FFFFFF7D52
%FFFFFFA87D27A8FD1FFF522727522752A87D2752275227A8FD0DFFA82752
%2752527D527D2752272752FD0EFF5252FFFFFFA8527DFFFFFF7D52A8FD0D
%FF7D277DFFFFFF7D52FD04FF277DFD21FF5252275252522752525227A8FD
%0FFFA82752275252522752275252FD0FFFA85227A8FFFF27A8FFFF5252A8
%FD0FFF7D5252FFFF7D52FFFFA8277DFD23FF7D5227522727275252FD12FF
%A852522752272727527DFD11FFA87D2752522727522752A8FD11FFA85227
%5227525252277DFD25FFA8A87D7D7DA8A8FD15FFA8A87D7D7DA8FD16FFFD
%057DFD16FFA8FD047DA8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDB5
%FFA8FFA8FFA8FD79FF7D527D527D527D527DFD77FF52A8FD05FFA852FD0D
%FFA8A8A8FD13FFA8FD19FFFD06A8FD34FF52A8FD05FFA852FD0BFFA82752
%27527DFD0FFFA87DFD04527DFFFFFF7D7D525252FD0CFFA8277D527D527D
%527DFD0AFFA8A8A8FD0FFF5252527DA8FD12FF52A8FD05FFA852FFFFFFA8
%A87DFD04FFA82752275252527DFD0DFFA8527DFFFFFFA8527DFFA8522727
%2752A8FD0BFF7D7DFD06FF52FD08FFA8525227527DFD0EFF522752277DFD
%12FF52A8FD05FF7D52FF7D275227277DFFFFFF5227525227522752A8FD0C
%FF7D7DFD05FFA852A8527DA87DA852A8FD04FFA87D5252277DFF7D7DFD05
%FFA852A8FD06FFA82752275252527DFFFFFFA8A87D7DA8FD04FFA8275227
%2752FD12FFFD057DFF7D7D7DFF527D527D527DFFFFFF5252FFFFFF7D7D52
%FD0DFF7D7DFD05FFA852FF7DFD04FFA8A8FD04FF7D275227527DFF7DA8FD
%06FF52FD07FF5252275252FF527DFFFFA8522752277DFD04FF7DA8A8A87D
%52A8FD12FFA8A8A87D52527DFF7D7DFFFFFFA852FFFFFF27A8FD04FFA852
%A8FD0DFF7D527DA8FFA827A8FF7DA8FFFFFF7D7DFFFFFFA852FF7DA87D7D
%FF7D7DFD05FFA852A8FD05FFA8FD0452A8FF7D52FFFF7D27522752277DFF
%FFA87DFD04FFA87DFD16FFA852FFFFA87DFFFFFFA87DFFFFFF7D52FD04FF
%7D52FD0FFFA8A8527D52A8FFFF7DFD04FF7D7DFFFFFFA87DFD04FF7DFFA8
%527DFFFD047D52FD07FF52FD05FFA852FFFF7D7DA87D525252FFFFFF7DA8
%FFFFFFA8A8FD17FFA8A8FF7D7DFD04FF52FFFFFFA85252FFFFA827A8FD12
%FF7D52A8FFFFA87DFFFFFF7DFD04FF7D52FFFFFFA87DA8FFA852277D7DA8
%7DFD08FF5252FD04FF5252FFFF7DA8A8FD047DA8FFFFFF527D7D7D52FD1C
%FF7DFFFFFFA8A8FD04FFA87DA8A87DA8FD14FFA8FD04FFA87DFF7DA8FD04
%FFA8A8FD04FF7DFFFFFF527DFD0CFF27527DFFFFA82752A8FF7DA87DA87D
%FF7DFD04FFA8525252A8FD1CFFA87DFFA87DFFFFA87D527DA87D52A87D52
%52A8FD13FFA852527DA87DA8525252FFFFFF7DA8FFFF7DA8FFFFFFA8FD0C
%FFA8FD067DA852A8FFA87DFFFFFF7DA8FD05FF7D52A8FD1CFFA87DA87D7D
%7DA8A87D7DFFFFFF5252FFFFFFA852FD12FFA852A8A8FF7D52A8FFA87D52
%FFFFFF7DFF7DA8FD11FF7D527DFFA8A8FF52527DFFFFA87DFFA87DFFFF7D
%5252FF7D52A8FF277DA8FD16FF7D52527DA87D7DA8525227FD04FF7D52FD
%04FF7D52FD10FFA827FD04FF7D52FD04FFA87DA8FFA8527DFFA87DFD0EFF
%7D2752277DFFFF522727527DA8A8A87D7DA8A87D5227527DA827FF522727
%52A8FD14FF7D52A8FFFFFF27A8FFFFFF7D52FFFFFF5252FD04FFA87DFD10
%FF7D7DFD04FF7D52FD04FFA85227A8FF527DFF525252FD0DFF2752525227
%A87D52277D7D52277DFFFFFFA827527D7D27527D7D7D52525227A8FD14FF
%52A8FFFFFFA8527DFD04FF52A8FFFF5227FD05FF52FD10FF7D7DFD04FF7D
%27FFFFFFA852275227A852A87D2727527DFD0BFFA8522752275227522752
%7D522752277DFFA827522752525227522752275227527DFD14FF52FD05FF
%27A8FD04FF7D52527D5252527D527D527DFD10FFA8527DA87DA852527DA8
%A8A8275227FD0752277DFD0CFF2752275227522752527D27525252277D52
%522752277D525227522752275227A8FD13FFA852A8FFA8FFA8277DFD04FF
%7D52A87DA8A8A87DA87DA8A8FD11FFFD097DA87D27275227522752275227
%5252FD0CFFA87DA87DA87DA87DA87D272752275227522752275252A87DA8
%7DA87DA87DA8A8FD14FF7D52527D527D527D527D527D52FD27FFFD0B527D
%FD15FFA827FD0A527DFD1FFFA8FFA8FFA8FFA8FFA8FFA8FD2BFFA8FFFFFF
%A8FD1BFFA8FFFFFFA8FFFFFFA8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFC
%FFFDB5FFA8A87D7DA8FD10FFA87D7D7DFD39FFA8FD047DFD10FFA8525252
%7DA8FD12FFA8522752277DFD0FFFA82752275252FD10FFA87DA8A8FD0EFF
%A87D7D7DFD12FFFD067DFD0EFFA827522752277DFD11FFA8FD04527D52FD
%05FFA8A87D7D7DFD05FF27272752275227FD0DFFA8FD057DA8FD05FFA87D
%7DA8FFFFFF7D2727275252A8FD0FFF7D5252272752527DFD04FFA8527D52
%52A8FFFFFF525227522752277DFD11FF52FD04FF7DFD05FF7D27522727A8
%FFFFFF7D27527D525227527DFD0CFF7D527D2752527DA8FFFFA827522727
%52FFFFA827522752275252FD0FFF5252277DA8A8277DFFFFFFA827272752
%27FFFFFFA85252A87D7D525252FD10FFA852A8FFFFFF52A8FFFFFFA8527D
%277D527DFFFFFF7D27FFFFFFA8A8277DFD0BFFA8275227527D7D277DFFFF
%527DFD0452A8FF5227527D52522752A8FD0DFF7D52A8FD04FFA827FFFFFF
%527DA87DA87D7DFFFFA827FD05FF7D52FD11FF52FD04FF7DA8FFFFFF7DA8
%FFFFFFA87DFFFFFF527DFD05FF527DFD0BFF7D52A8FD04FF7D52FFFF7DFD
%04FF52FFFF7D52FFFFFFA8A852A8FD0DFFA827A8FD04FF7D52A8FFFF7DA8
%FFFFFF7DA8FFFFA852A8FD04FF7D52FD11FF7DA8FFFFFF7DFD04FF7D7DFF
%FFFF7D7DFFFFFFA827A8FFFFFF7D27A8FD0BFF7D27FD05FF7D52A8FF52FD
%04FF7DA8FF527DFD05FF527DFD0DFF522727FFA8A87D5227A8FFFF52A8FF
%FFFF7D7DFFFFFF5252FFFFFF7D27A8FD12FF7DFFFF7DFD05FF7DA8FD04FF
%7DFD04FFA852FFFFA852A8FD0CFF525252FFA8A87D5227FFA87DFD04FF52
%A8FFA827A8FFA8A85227FD0EFF7D52527DFF7D5252527DFFFF7DA8FFFFFF
%7DA8FD04FF7D7DFFA852A8FD11FF7D7D7DA87D7D7DA8A8FFFFA87DFFFFFF
%7DA8FFFFFFA87D7D7DA87D7D7DA8FD0AFFA85227527DA852522752A8FF52
%FFA8A87D7DFFFFFF7D52A87D5252A8FD0EFF7D5252A87D7D7D5252A8FFFF
%A87DFFFFA87DA8FFFF7D52FD047DA8527DA8FD0DFFA8527D7DFF7DA8A8A8
%5252A8FFFFA8A8FFA8A8FFFFFF7D527DA8A852FFA87D527DFD0AFF7D7DFF
%A87D7DA8A87DFFFFFF7DFF7D7DFFFFFFA8A8FF7DA8A8FFA8FD0DFF7D7D7D
%FFFF7D7DFFA8A852A8FFFF7DA8A87DA8FFFF7D52A8A8FF52A8FFA87D52A8
%FD0CFF52A8FFFFFF5252FFFFFFA852A8FFFF7D7D7DFFFFFF7D52FFFFFF7D
%52A8FFFFFF527DFD08FF7D5227A8FD04FF52527DFFFFA87D7DA8FFFF7D27
%52A8FFA8FF522727A8FD0AFF7D52FD04FF527DFD04FF277D527D7D7DA87D
%525252FD04FF527DFFFFFFA852A8FD0AFF7D7DFD04FF527DFD04FFA87D52
%FFA852A8FF527D7DFD04FFA827FD05FF52FD07FFA852275252FFFFFF7D52
%7D7D52A8FF7D7DFF7D527D7D2752A8FF7D52525227FD0AFF7DA8FD04FF52
%7DFFFFFFA8527DFFFFA852FFFFA87D7DFD04FF527DFD04FF52A8FD0AFF7D
%7DFD04FF5252FFFFFFA85227527DFF27FF7D272752A8FFFFFF7D27A8FD04
%FF52A8FD06FF7D2752275252FFA827527D275227FF527DA85227527D7D27
%525252275227277DFD09FF52A8FD04FF277DFFFFA852A8FFFFFF7D52A8FF
%FFFF7D7DFFFFA85252FD04FF7D7DFD0AFF52A8FD04FF5252A8FFFF7D2752
%52527D527D522752277DFFFFFF7D27A8FD04FF52FD07FF7D52275252527D
%5227A8FD0452FD047D275252527D52275227525252277DFD09FF7D7DA8A8
%A87D5252A8A87D7DFD04FFA827FD05FF52A8A8A8277DFD04A852A8FD0AFF
%A8FD0852277D525227522752275227522752527D27FD0752277DFD07FFA8
%27522752275227527D5227522752275227522752527D2752275227522752
%A8FD09FFA87D52FD077D527DFD04FF7D27A8FD04FF7D52FD097DA8FD0CFF
%A8FD08FF7D27522752275227522752277DFD14FFA8FFA8FFA8FFA8FF2752
%27522752275227522752A8FFA8FFA8FFA8FD16FFA852A87DA87D52277D7D
%A87D7D52FD20FFA8FD0B7DA8FD1CFFA8FD0B7DFD1EFFA8FD057DA8FD057D
%A8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDB4FFA8FD7EFF52527DFD
%7CFF7D272752A8FD11FFA8FD13FFA8FD13FFA8FD15FFA8FD13FFA8A8A8FD
%15FFA8275227A8FD0FFFA82752277DFD10FF52522752A8FD0DFFA8A87DA8
%7DA8FD12FF5252277DA8FD06FF7D277DFD06FF525227527DFD13FFA82752
%275227A8FD06FFA8FD06FFA8527D527D527DFD0EFF527D52527D52A8FD05
%FFA8A87DFD04FF5252FFFFA827A8FD10FF277D527D527DFD05FFA8275227
%A8FD04FF5252272727527DFD12FF7D5252A827527DFD04FFA8FD047DFD04
%FF7D7DFFFFFFA87DFD0EFF7DFD04FF52FD04FF7D275227277DFFFFFF52A8
%FFFFA852A8FD0FFFA87DFD04FF52FD05FF7D522752A8FD04FF5252A87DA8
%277DFD12FF7D27A8FF7D277DFFFFFFA8527D527D527DFFFFFF7D52FFFFFF
%A87DFD0EFF52FD04FF7DA8FFFFA8527D277D527DFFFFA8527DFFFFA827A8
%FD0FFFA852A87DA87D7DA8FFFFFF7D5227522752A8FFFFFF527DFFFFFF52
%7DFD12FF7DFD05FF7DFFFFFF52522752527D52FFFFFF7DA8FD04FF7DFD0D
%FFA87DFD04FF7DA8FFFF7D7DFFFFFFA87DFFFFFF7DFD04FFA8A8FD0FFFA8
%A8A87D7DA87DFD04FF7D27527D5227A8FFFFFF7DA8FFFFFF7DA8FD12FF7D
%A8FFFFFF7D7DFFFFA852527D7DFF7D277DFFFFA852FFA87D527DFD0EFF7D
%A8FFFFA87DFFFFFFA87DFFFFFFA87DFFFFFF7DA8FFFFFF52FD11FF7DA87D
%A87D7DFD04FF52527DFF7D527DFFFFFF7DA8FFFFFF7D7DFD12FFA87DFFA8
%527DFFFFFF7D52FD05FF7D7DFFFF7D527DFF7D527DFD0FFF7DFFFF7DA8FF
%FFFF7DA8FD04FF7DFD04FF7DA8FF7DA8FD12FF7DFFA87DFD04FFA87DFD05
%FF7DFD04FF52FFA8A852FD14FFA87D7D7DA8FFFFFF7D52A8FFFFFFA85252
%FD04FF7D7DA8A8FD10FFA87D7DA8FD04FFA87DFFFFFF7DA8FD04FFA87D7D
%A8FD13FFA87D7DA8FD05FF7DA8FFFFFFA87DFD04FF522752277DFD11FFA8
%7D52FFA8A8FFFF527DFFA82752FFA85252527DFF7D52FFA87DA8FF7D7DA8
%FD0AFFA852A8FF7D52FFA87D7DFFFFA8A8FFA87DFFFFA87D7DFF7D7DFFFF
%52A8FD0DFFA852A8FF7D7DFFA852A8FFFFFF7DFF7D7D52FFFFFF7DA8FF7D
%52A8FFA8A8FD0EFFA852275252FFFFFF52522752A8FFA87DA87D7DFFFF52
%275252FF27A8A8272752A8FD08FFA8275227FF7D7DFF5227277DFFFF7D7D
%7DA8FFA8522752A87D52FF5227277DFD0BFF7D272752FF527DA85227277D
%FFFFA87DA87DFFFFFF522727FFA852A8A827277DFD0DFF7D2752275252FF
%FD05527D52FFA87D7DFF7D7D7D5227527D527D7D2752277DFD08FF525227
%527D7D52A82752527D52FFA8527DFF527D7D5227FD047D52525227A8FD0A
%FF27525252FD047D2752527D5252FFFF7DFFA852527D525252A852A8FD04
%52A8FD0CFF52522752275227522752525227277DA827A87D272752525227
%5227522752275252FD07FFA85227522752275227525252272752FF27A8A8
%2727527D5227522752275227277DFD09FFA8522752275227522752277D52
%272752FFFFA8522727527D27FD05522752277DFD0CFF7D27522752275227
%52527D27525252A87DA8522752277D5252275227522752277DFD08FF2752
%275227522752527D275252527D7D7D522752277D525227522752275227A8
%FD0AFF275227522752275227527D525252277DA87D275252527D52275252
%52275252527DFD0CFFA8FD087DA852522752275227522752275252A8FD08
%7DA8FD08FFA8FD077DA852522752275227522752275252FD097DA8FD0AFF
%A852FD097D27522752275227522752277D525227525252275252A8FD16FF
%7D27522752275227522752277DFD1BFF7D275227522752275227522752FD
%1EFF5252275227522752275227277DFD20FFA8FD0B7DA8FD1BFFA8FD0C7D
%FD1EFFA852FD0A7DA8FDFCFFFDFCFFFDFCFFFDFCFFFD1FFFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="п»ї" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">0_1169</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-05-05T17:08:52+03:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-05-05T17:08:52+03:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-05-05T17:08:51+03:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqtll&#xA;jiieWVwkUalpHY0VVUVJJPYDFXlGp+fvNHmhr1vK08WieV9PqL3zLdj7VOohVgevYU5dN1JAxVgM&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:989e6251-0793-8f47-8914-b1a4ab0ac540</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:989e6251-0793-8f47-8914-b1a4ab0ac540</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:84f6a50e-c31f-1a4d-b80d-2385471a9bc3</stRef:instanceID>
            <stRef:documentID>xmp.did:84f6a50e-c31f-1a4d-b80d-2385471a9bc3</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:84f6a50e-c31f-1a4d-b80d-2385471a9bc3</stEvt:instanceID>
                  <stEvt:when>2015-05-05T16:16:56+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:989e6251-0793-8f47-8914-b1a4ab0ac540</stEvt:instanceID>
                  <stEvt:when>2015-05-05T17:08:52+03:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>490.000000</stDim:w>
            <stDim:h>500.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Р“СЂСѓРїРїР° РѕР±СЂР°Р·С†РѕРІ РїРѕ СѓРјРѕР»С‡Р°РЅРёСЋ</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=66</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>168</xmpG:gray>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>K=0</xmpG:swatchName>
                           <xmpG:mode>GRAY</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:gray>0</xmpG:gray>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -500 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 500 li
490 500 li
490 0 li
cp
clp
490 500 mo
0 500 li
0 0 li
490 0 li
490 500 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
f
354.451 421.17 mo
354.478 421.135 354.519 421.082 354.67 421.082 cv
354.983 421.082 355.25 421.088 355.515 421.095 cv
356.016 421.108 li
356.514 422.134 356.898 423.586 357.083 422.537 cv
357.322 421.19 356.754 419.811 356.635 416.532 cv
356.871 414.86 357.267 413.541 357.82 412.521 cv
360.157 409.671 362.309 413.686 365.198 413.686 cv
367.942 413.686 370.021 410.064 372.226 412.14 cv
372.975 413.335 373.486 414.969 373.73 417.205 cv
373.565 420.007 373.091 421.286 373.313 422.537 cv
373.498 423.588 373.883 422.128 374.383 421.102 cv
374.869 421.091 li
375.061 421.086 375.254 421.082 375.477 421.082 cv
375.629 421.082 375.669 421.135 375.696 421.169 cv
375.856 421.376 375.928 421.921 375.731 422.673 cv
374.9 425.836 374.482 425.835 373.977 425.833 cv
373.246 425.822 li
372.992 426.648 li
372.97 426.725 372.949 426.803 372.924 426.876 cv
372.881 427.073 li
372.731 428.671 372.602 429.024 372.578 429.076 cv
372.1 430.08 368.807 434.178 367.559 434.662 cv
367.549 434.665 367.297 434.746 366.284 434.746 cv
365.674 434.746 365.127 434.717 365.119 434.717 cv
365.074 434.714 li
365.029 434.717 li
365.022 434.717 364.474 434.746 363.863 434.746 cv
362.849 434.746 362.597 434.665 362.592 434.664 cv
361.42 434.208 358.078 430.144 357.57 429.078 cv
357.542 429.014 357.392 428.596 357.226 426.596 cv
357.16 425.811 li
356.103 425.835 li
355.663 425.835 355.248 425.835 354.416 422.674 cv
354.219 421.921 354.292 421.376 354.451 421.17 cv
cp
355.622 427.487 mo
355.777 429.032 355.927 429.528 356.056 429.798 cv
356.596 430.932 360.171 435.523 361.986 436.228 cv
362.221 436.319 362.647 436.424 363.863 436.424 cv
364.418 436.424 364.924 436.401 365.074 436.394 cv
365.224 436.401 365.73 436.424 366.284 436.424 cv
367.5 436.424 367.926 436.319 368.161 436.227 cv
369.976 435.523 373.552 430.932 374.093 429.798 cv
374.22 429.53 374.37 429.042 374.526 427.486 cv
375.739 427.336 376.465 426.476 377.353 423.099 cv
377.667 421.9 377.548 420.823 377.024 420.145 cv
376.73 419.763 376.316 419.529 375.842 419.446 cv
376.056 418.901 376.163 418.136 376.193 417.278 cv
376.195 417.28 li
376.195 417.28 376.898 412.516 376.31 411.633 cv
376.014 411.187 375.313 410.807 374.602 410.523 cv
371.988 405.39 365.198 406.103 365.198 406.103 cv
365.198 406.103 358.67 405.414 355.95 410.224 cv
355.027 410.505 353.8 411 353.38 411.633 cv
352.872 412.395 353.642 416.519 353.862 417.633 cv
353.988 418.338 354.174 418.966 354.421 419.433 cv
353.905 419.498 353.441 419.734 353.123 420.145 cv
352.599 420.823 352.479 421.9 352.794 423.1 cv
353.681 426.476 354.408 427.337 355.622 427.487 cv
cp
.34 .34 .34 rgb
f
359.773 428.804 mo
359.773 428.804 363.77 429.064 365.038 427.797 cv
365.038 425.334 li
365.038 425.334 361.706 425.112 359.773 428.804 cv
cp
f
365.038 425.334 mo
365.038 427.797 li
366.305 429.064 370.303 428.804 370.303 428.804 cv
368.37 425.112 365.038 425.334 365.038 425.334 cv
cp
f
361.366 419.425 mo
362.688 419.425 363.763 420.5 363.763 421.821 cv
363.763 423.143 362.688 424.218 361.366 424.218 cv
360.044 424.218 358.969 423.143 358.969 421.821 cv
358.969 420.5 360.044 419.425 361.366 419.425 cv
cp
369.086 419.425 mo
370.408 419.425 371.483 420.5 371.483 421.821 cv
371.483 423.143 370.408 424.218 369.086 424.218 cv
367.765 424.218 366.689 423.143 366.689 421.821 cv
366.689 420.5 367.765 419.425 369.086 419.425 cv
cp
361.366 425.057 mo
363.006 425.057 364.351 423.826 364.559 422.241 cv
365.893 422.241 li
366.101 423.826 367.445 425.057 369.086 425.057 cv
370.87 425.057 372.322 423.606 372.322 421.821 cv
372.322 420.038 370.87 418.586 369.086 418.586 cv
367.446 418.586 366.101 419.818 365.893 421.402 cv
364.559 421.402 li
364.351 419.818 363.006 418.586 361.366 418.586 cv
359.582 418.586 358.131 420.038 358.131 421.821 cv
358.131 423.606 359.582 425.057 361.366 425.057 cv
cp
f
434.941 424.504 mo
434.923 424.576 434.911 424.651 434.911 424.732 cv
434.911 425.176 434.778 426.091 434.619 427.184 cv
434.241 427.128 433.835 426.737 433.124 424.034 cv
432.927 423.282 432.999 422.737 433.159 422.53 cv
433.186 422.495 433.226 422.442 433.378 422.442 cv
433.69 422.442 433.958 422.449 434.222 422.455 cv
434.549 422.464 li
434.724 423.035 434.852 423.804 434.941 424.504 cv
cp
437.115 419.263 mo
437.115 418.713 436.842 418.245 436.442 417.93 cv
436.842 417.614 437.115 417.146 437.115 416.597 cv
437.115 416.16 436.939 415.773 436.672 415.469 cv
436.961 415.431 437.219 415.326 437.445 415.163 cv
437.858 415.047 438.194 414.791 438.42 414.438 cv
438.519 414.455 438.61 414.497 438.715 414.497 cv
439.025 414.497 439.3 414.393 439.552 414.25 cv
439.757 414.972 440.394 415.513 441.183 415.513 cv
441.472 415.513 441.731 415.424 441.971 415.299 cv
442.261 415.84 442.814 416.221 443.471 416.221 cv
443.581 416.221 443.677 416.179 443.782 416.159 cv
443.886 416.179 443.982 416.221 444.092 416.221 cv
444.75 416.221 445.302 415.84 445.593 415.299 cv
445.832 415.424 446.092 415.513 446.38 415.513 cv
447.169 415.513 447.806 414.972 448.012 414.25 cv
448.263 414.393 448.539 414.497 448.849 414.497 cv
448.953 414.497 449.044 414.455 449.144 414.438 cv
449.369 414.791 449.705 415.047 450.119 415.163 cv
450.345 415.326 450.603 415.431 450.892 415.469 cv
450.624 415.773 450.448 416.16 450.448 416.597 cv
450.448 417.146 450.722 417.614 451.122 417.93 cv
450.722 418.245 450.448 418.713 450.448 419.263 cv
450.448 420.215 451.22 420.987 452.173 420.987 cv
452.182 420.987 452.189 420.982 452.198 420.982 cv
452.029 422.238 451.876 423.08 452.02 423.898 cv
452.039 424.005 452.06 424.1 452.08 424.201 cv
452.098 425.138 452.18 426.155 452.149 427.186 cv
452.105 428.638 451.837 430.116 450.844 431.429 cv
450.562 431.801 450.261 432.092 449.952 432.34 cv
447.287 434.476 443.842 432.374 443.842 432.374 cv
443.842 432.374 440.073 434.688 437.37 432.033 cv
437.188 431.855 437.012 431.655 436.841 431.429 cv
435.847 430.115 435.579 428.635 435.537 427.181 cv
435.513 426.383 435.557 425.594 435.587 424.844 cv
435.658 424.565 435.729 424.251 435.791 423.898 cv
435.937 423.072 435.78 422.22 435.609 420.943 cv
436.453 420.832 437.115 420.138 437.115 419.263 cv
cp
453.261 422.457 mo
453.601 422.45 li
453.786 422.446 453.971 422.442 454.184 422.442 cv
454.336 422.442 454.377 422.495 454.404 422.53 cv
454.563 422.736 454.636 423.281 454.438 424.033 cv
453.815 426.404 453.435 426.998 453.061 427.145 cv
452.943 426.327 452.841 425.619 452.798 425.131 cv
452.884 424.308 453.031 423.21 453.261 422.457 cv
cp
430.827 415.513 mo
430.827 416.3 431.365 416.936 432.086 417.143 cv
431.614 417.451 431.283 417.958 431.283 418.564 cv
431.283 419.458 431.973 420.17 432.845 420.255 cv
432.676 420.44 432.571 420.68 432.56 420.947 cv
432.277 421.07 432.025 421.253 431.831 421.505 cv
431.307 422.183 431.187 423.26 431.501 424.46 cv
432.389 427.837 433.116 428.697 434.33 428.847 cv
434.338 428.933 434.347 429.005 434.355 429.085 cv
434.15 430.682 434.001 432.332 434.152 433.393 cv
434.281 434.299 434.691 434.899 435.199 435.303 cv
437.913 439.019 443.842 439.03 443.842 439.03 cv
443.842 439.03 449.773 439.019 452.488 435.303 cv
452.996 434.899 453.403 434.299 453.535 433.393 cv
453.694 432.277 453.52 430.508 453.299 428.836 cv
454.473 428.662 455.189 427.774 456.061 424.459 cv
456.375 423.26 456.255 422.183 455.732 421.505 cv
455.438 421.124 455.025 420.89 454.552 420.806 cv
454.616 420.641 454.673 420.459 454.718 420.255 cv
455.591 420.17 456.281 419.459 456.281 418.564 cv
456.281 417.958 455.95 417.451 455.477 417.143 cv
456.198 416.936 456.736 416.3 456.736 415.513 cv
456.736 414.915 456.414 414.415 455.952 414.105 cv
456.143 413.828 456.281 413.511 456.281 413.148 cv
456.281 412.196 455.509 411.424 454.556 411.424 cv
454.528 411.424 454.505 411.439 454.477 411.44 cv
454.508 411.31 454.556 411.187 454.556 411.048 cv
454.556 410.239 453.988 409.592 453.236 409.406 cv
453.249 409.32 453.287 409.243 453.287 409.153 cv
453.287 408.201 452.515 407.429 451.563 407.429 cv
451.459 407.429 451.369 407.47 451.27 407.488 cv
450.979 406.581 450.138 405.92 449.134 405.92 cv
448.544 405.92 448.011 406.152 447.609 406.523 cv
447.26 405.731 446.47 405.176 445.549 405.176 cv
444.747 405.176 444.047 405.598 443.648 406.23 cv
443.249 405.598 442.549 405.176 441.747 405.176 cv
440.887 405.176 440.149 405.663 439.769 406.371 cv
439.394 406.091 438.933 405.92 438.429 405.92 cv
437.425 405.92 436.585 406.581 436.294 407.488 cv
436.195 407.47 436.105 407.429 436.001 407.429 cv
435.048 407.429 434.276 408.201 434.276 409.153 cv
434.276 409.243 434.314 409.32 434.327 409.406 cv
433.576 409.592 433.007 410.239 433.007 411.048 cv
433.007 411.187 433.055 411.31 433.086 411.44 cv
433.058 411.439 433.035 411.424 433.007 411.424 cv
432.055 411.424 431.283 412.196 431.283 413.148 cv
431.283 413.511 431.42 413.828 431.611 414.105 cv
431.15 414.415 430.827 414.915 430.827 415.513 cv
cp
f
387.522 445.752 mo
385.513 441.487 381.348 438.44 376.424 438.032 cv
367.83 451.539 li
367.741 445.308 366.825 443.691 366.825 443.691 cv
366.825 443.691 li
366.825 443.691 li
369.247 438.96 li
365.136 438.96 li
361.024 438.96 li
363.446 443.691 li
363.446 443.691 li
363.446 443.691 li
363.446 443.691 362.53 445.308 362.441 451.539 cv
353.843 438.026 li
346.849 438.543 341.332 444.367 341.332 451.493 cv
341.332 456.055 li
341.332 456.055 341.332 456.055 341.332 456.055 cv
341.332 457.805 342.751 459.224 344.5 459.224 cv
365.073 459.224 li
379.67 459.224 li
379.67 459.19 li
379.67 453.407 382.814 448.385 387.522 445.752 cv
cp
f
455.132 439.392 mo
446.538 452.899 li
446.449 446.669 445.533 445.051 445.533 445.051 cv
447.955 440.32 li
443.843 440.32 li
439.732 440.32 li
442.154 445.051 li
442.154 445.051 441.238 446.669 441.149 452.899 cv
432.551 439.386 li
428.282 439.701 424.572 442 422.322 445.359 cv
427.451 447.866 430.945 453.119 430.945 459.19 cv
430.945 460.584 li
443.781 460.584 li
464.354 460.584 li
466.104 460.584 467.522 459.165 467.522 457.415 cv
467.522 452.853 li
467.522 445.768 462.069 439.966 455.132 439.392 cv
cp
f
416.128 445.702 mo
406.194 457.22 li
405.37 457.22 li
404.546 457.22 li
394.606 445.696 li
387.364 445.95 381.566 451.885 381.566 459.19 cv
381.566 463.752 li
381.566 463.752 li
381.566 464.846 382.121 465.81 382.963 466.379 cv
383.469 466.721 384.079 466.921 384.735 466.921 cv
405.308 466.921 li
425.881 466.921 li
426.537 466.921 427.146 466.721 427.652 466.379 cv
428.495 465.81 429.049 464.846 429.049 463.752 cv
429.049 463.752 li
429.049 459.19 li
429.049 451.926 423.315 446.017 416.128 445.702 cv
cp
f
395.875 428.96 mo
395.875 428.96 397.956 429.374 400.122 428.322 cv
400.433 428.17 400.745 427.992 401.054 427.775 cv
401.835 427.224 402.591 426.448 403.223 425.345 cv
404.207 423.635 404.903 421.871 405.27 420.265 cv
405.283 420.265 405.295 420.266 405.308 420.266 cv
405.32 420.266 405.333 420.265 405.345 420.265 cv
405.713 421.871 406.409 423.635 407.392 425.345 cv
410.016 429.921 414.741 428.96 414.741 428.96 cv
414.955 428.893 415.176 428.847 415.405 428.847 cv
415.556 428.847 415.699 428.865 415.832 428.9 cv
416.765 429.143 417.238 430.206 416.864 431.631 cv
416.726 432.155 416.6 432.617 416.48 433.025 cv
416.421 433.228 416.363 433.418 416.307 433.596 cv
415.968 434.659 415.68 435.262 415.343 435.604 cv
414.95 436.002 414.489 436.044 413.803 436.044 cv
413.79 436.044 413.782 436.038 413.769 436.037 cv
413.699 436.25 413.62 436.451 413.544 436.657 cv
413.415 436.871 413.267 437.06 413.099 437.224 cv
412.241 438.065 410.93 438.303 409.612 438.347 cv
409.411 438.354 409.211 438.359 409.012 438.359 cv
408.751 438.359 li
408.452 437.921 407.95 437.633 407.38 437.633 cv
406.17 437.633 li
405.253 437.633 404.511 438.375 404.511 439.292 cv
404.511 440.208 405.253 440.95 406.17 440.95 cv
407.38 440.95 li
408.027 440.95 408.581 440.576 408.855 440.036 cv
409.012 440.036 li
409.677 440.036 410.898 440.035 412.122 439.661 cv
409.866 443.474 406.768 445.501 405.371 445.501 cv
404.882 445.501 404.18 445.245 403.381 444.758 cv
403.191 444.643 402.997 444.513 402.797 444.371 cv
402.302 444.018 401.784 443.591 401.261 443.076 cv
400.855 442.677 400.448 442.23 400.049 441.735 cv
399.784 441.407 399.526 441.05 399.272 440.681 cv
398.377 439.38 397.566 437.833 396.975 436.037 cv
396.961 436.037 396.953 436.044 396.938 436.044 cv
396.252 436.044 395.792 436.002 395.398 435.604 cv
395.061 435.262 394.773 434.659 394.435 433.596 cv
394.378 433.418 394.321 433.228 394.261 433.025 cv
394.142 432.617 394.015 432.155 393.877 431.631 cv
393.451 430.002 394.128 428.847 395.336 428.847 cv
395.493 428.847 395.644 428.873 395.793 428.908 cv
395.875 428.96 li
cp
395.758 437.606 mo
398.09 443.564 402.803 447.179 405.371 447.179 cv
407.939 447.179 412.655 443.565 414.987 437.605 cv
417.049 437.147 417.627 435.328 418.487 432.057 cv
418.86 430.634 418.664 429.331 417.936 428.388 cv
417.693 428.073 417.398 427.822 417.071 427.626 cv
417.071 426.965 417.071 425.77 417.071 425.596 cv
417.071 421.528 414.98 417.952 411.818 415.872 cv
412.147 415.059 412.332 414.173 412.332 413.242 cv
412.332 409.363 409.187 406.218 405.308 406.218 cv
401.428 406.218 398.283 409.363 398.283 413.242 cv
398.283 414.214 398.481 415.14 398.838 415.982 cv
398.701 416.093 398.564 416.2 398.428 416.319 cv
395.706 418.378 393.922 421.599 393.814 425.25 cv
393.678 426.214 393.603 427.066 393.623 427.518 cv
393.734 427.589 li
393.381 427.789 393.065 428.052 392.806 428.388 cv
392.078 429.331 391.882 430.634 392.254 432.056 cv
393.115 435.33 393.693 437.149 395.758 437.606 cv
cp
f
38.4563 421.121 mo
38.4563 421.121 40.5374 421.535 42.704 420.482 cv
43.0152 420.331 43.3267 420.153 43.6355 419.935 cv
44.4167 419.384 45.1724 418.609 45.8051 417.506 cv
46.7884 415.795 47.4843 414.032 47.8519 412.425 cv
47.8646 412.425 47.8768 412.427 47.8894 412.427 cv
47.9021 412.427 47.9143 412.425 47.9269 412.425 cv
48.2945 414.032 48.9904 415.795 49.9737 417.506 cv
52.5981 422.081 57.3225 421.121 57.3225 421.121 cv
57.5369 421.053 57.7575 421.008 57.9869 421.008 cv
58.1379 421.008 58.2806 421.026 58.4139 421.06 cv
59.347 421.304 59.8194 422.366 59.446 423.791 cv
59.3081 424.315 59.1814 424.778 59.0621 425.185 cv
59.0024 425.389 58.9446 425.579 58.8882 425.756 cv
58.5499 426.82 58.2619 427.423 57.9247 427.764 cv
57.5312 428.163 57.0708 428.204 56.3851 428.204 cv
56.3718 428.204 56.3639 428.198 56.3509 428.198 cv
56.281 428.411 56.2012 428.611 56.1254 428.817 cv
55.9968 429.031 55.8485 429.22 55.681 429.384 cv
54.8225 430.225 53.5114 430.463 52.1933 430.508 cv
51.993 430.515 51.7925 430.519 51.594 430.519 cv
51.3327 430.519 li
51.0341 430.081 50.5317 429.793 49.9616 429.793 cv
48.7513 429.793 li
47.8351 429.793 47.0924 430.536 47.0924 431.452 cv
47.0924 432.368 47.8351 433.111 48.7513 433.111 cv
49.9616 433.111 li
50.6086 433.111 51.1629 432.737 51.4365 432.197 cv
51.594 432.197 li
52.2583 432.197 53.4792 432.195 54.7032 431.822 cv
52.4477 435.635 49.3494 437.662 47.9525 437.662 cv
47.4635 437.662 46.7612 437.405 45.9629 436.919 cv
45.773 436.803 45.5784 436.674 45.3787 436.531 cv
44.8839 436.178 44.3661 435.752 43.8426 435.237 cv
43.4369 434.837 43.0293 434.39 42.6304 433.896 cv
42.3657 433.567 42.1075 433.211 41.8534 432.841 cv
40.9591 431.541 40.1473 429.994 39.557 428.197 cv
39.5428 428.198 39.5342 428.204 39.5197 428.204 cv
38.834 428.204 38.3735 428.163 37.9801 427.764 cv
37.6429 427.423 37.3549 426.82 37.0165 425.756 cv
36.9601 425.579 36.9024 425.389 36.8427 425.185 cv
36.7234 424.778 36.5967 424.315 36.4588 423.791 cv
36.0322 422.163 36.7101 421.008 37.918 421.008 cv
38.0745 421.008 38.2256 421.034 38.3747 421.069 cv
38.4563 421.121 li
cp
38.3393 429.767 mo
40.6713 435.725 45.3851 439.339 47.9525 439.339 cv
50.5212 439.339 55.237 435.725 57.569 429.766 cv
59.6308 429.308 60.2082 427.489 61.0683 424.218 cv
61.4413 422.794 61.2456 421.492 60.5175 420.548 cv
60.2743 420.233 59.9796 419.983 59.653 419.786 cv
59.653 419.126 59.653 417.931 59.653 417.757 cv
59.653 413.689 57.5621 410.113 54.4 408.033 cv
54.7286 407.22 54.9138 406.333 54.9138 405.403 cv
54.9138 401.523 51.7689 398.378 47.8894 398.378 cv
44.0099 398.378 40.865 401.523 40.865 405.403 cv
40.865 406.375 41.0627 407.301 41.4199 408.143 cv
41.283 408.253 41.146 408.361 41.0098 408.48 cv
38.2877 410.539 36.5033 413.76 36.3955 417.41 cv
36.2592 418.374 36.1843 419.227 36.2047 419.678 cv
36.3154 419.749 li
35.9629 419.95 35.6462 420.213 35.3875 420.548 cv
34.6593 421.492 34.4635 422.794 34.8362 424.216 cv
35.697 427.491 36.2746 429.31 38.3393 429.767 cv
cp
f
115.008 422.531 mo
114.811 421.779 114.883 421.234 115.043 421.028 cv
115.07 420.992 115.111 420.939 115.263 420.939 cv
115.574 420.939 115.841 420.946 116.106 420.953 cv
116.437 420.962 li
116.854 422.337 117 424.875 117 424.742 cv
117 424.742 117.41 423.897 117.676 422.395 cv
117.914 421.047 117.346 419.668 117.227 416.389 cv
117.463 414.717 117.86 413.397 118.413 412.377 cv
120.749 409.53 122.901 413.544 125.79 413.544 cv
128.534 413.544 130.613 409.922 132.817 411.997 cv
133.566 413.192 134.079 414.826 134.322 417.062 cv
134.157 419.864 133.683 421.143 133.905 422.395 cv
134.17 423.897 134.58 424.742 134.58 424.742 cv
134.58 424.875 134.726 422.328 135.145 420.954 cv
135.486 420.947 li
135.67 420.943 135.856 420.939 136.069 420.939 cv
136.221 420.939 136.261 420.992 136.288 421.027 cv
136.448 421.233 136.52 421.778 136.322 422.531 cv
135.491 425.693 135.061 425.693 134.566 425.691 cv
133.839 425.68 li
133.585 426.504 li
133.581 426.516 133.577 426.527 133.574 426.539 cv
132.681 428.002 130.806 428.223 129.054 428.223 cv
128.793 428.223 li
128.495 427.785 127.992 427.497 127.422 427.497 cv
126.212 427.497 li
125.296 427.497 124.553 428.239 124.553 429.156 cv
124.553 430.072 125.296 430.815 126.212 430.815 cv
127.422 430.815 li
128.069 430.815 128.623 430.44 128.897 429.9 cv
129.054 429.9 li
129.876 429.9 131.549 429.9 133.026 429.194 cv
132.214 430.54 129.24 434.097 128.152 434.519 cv
128.141 434.522 127.889 434.603 126.873 434.603 cv
126.264 434.603 125.719 434.574 125.711 434.574 cv
125.666 434.572 li
125.622 434.574 li
125.614 434.574 125.068 434.603 124.459 434.603 cv
123.442 434.603 123.189 434.522 123.184 434.52 cv
122.012 434.066 118.671 430.001 118.163 428.935 cv
118.134 428.871 117.983 428.453 117.818 426.454 cv
117.753 425.672 li
116.695 425.692 li
116.255 425.692 115.839 425.692 115.008 422.531 cv
cp
111.913 431.377 mo
111.913 431.377 113.517 432.668 116.252 431.826 cv
116.252 431.826 116.909 432.492 119.081 432.967 cv
120.282 434.367 121.657 435.727 122.578 436.085 cv
122.813 436.176 123.24 436.281 124.459 436.281 cv
125.012 436.281 125.517 436.258 125.666 436.251 cv
125.816 436.258 126.32 436.281 126.873 436.281 cv
128.091 436.281 128.518 436.176 128.754 436.085 cv
129.7 435.717 131.125 434.291 132.35 432.85 cv
134.128 432.389 134.687 431.826 134.687 431.826 cv
137.422 432.668 139.026 431.377 139.026 431.377 cv
136.986 430.325 135.807 428.81 135.115 427.374 cv
135.116 427.363 135.117 427.355 135.118 427.344 cv
136.332 427.194 137.058 426.334 137.945 422.957 cv
138.26 421.758 138.14 420.68 137.617 420.002 cv
137.322 419.621 136.908 419.386 136.434 419.303 cv
136.648 418.758 136.755 417.994 136.786 417.135 cv
136.787 417.138 li
136.787 417.138 137.49 412.373 136.902 411.49 cv
136.606 411.044 135.905 410.665 135.194 410.381 cv
132.58 405.247 125.79 405.96 125.79 405.96 cv
125.79 405.96 119.262 405.272 116.542 410.081 cv
115.619 410.362 114.392 410.858 113.972 411.49 cv
113.464 412.253 114.234 416.376 114.454 417.49 cv
114.581 418.197 114.767 418.825 115.014 419.292 cv
114.504 419.359 114.032 419.592 113.715 420.003 cv
113.191 420.681 113.071 421.758 113.386 422.957 cv
114.186 426.002 114.857 426.998 115.871 427.275 cv
115.186 428.74 113.999 430.301 111.913 431.377 cv
cp
f
70.1458 445.204 mo
67.9915 441.005 63.7042 438.081 58.7101 437.862 cv
48.7755 449.381 li
47.9517 449.381 li
47.1279 449.381 li
37.1882 437.856 li
29.9456 438.11 24.1481 444.046 24.1481 451.35 cv
24.1481 455.913 li
24.1481 457.663 25.5666 459.081 27.3164 459.081 cv
47.8894 459.081 li
47.8894 459.081 li
61.2141 459.081 li
61.2296 456.818 61.7336 454.676 62.6162 452.744 cv
64.1352 449.42 66.7967 446.74 70.1458 445.204 cv
cp
f
137.017 437.889 mo
128.423 451.396 li
128.333 445.166 127.418 443.549 127.418 443.549 cv
129.84 438.817 li
125.728 438.817 li
121.616 438.817 li
124.038 443.549 li
124.038 443.549 123.122 445.166 123.033 451.396 cv
114.435 437.883 li
109.636 438.238 105.533 441.093 103.43 445.151 cv
108.785 447.562 112.437 452.896 112.479 459.081 cv
125.666 459.081 li
146.238 459.081 li
147.988 459.081 149.407 457.663 149.407 455.913 cv
149.407 451.35 li
149.407 444.265 143.953 438.464 137.017 437.889 cv
cp
f
110.588 463.752 mo
110.588 459.19 li
110.588 452.183 105.257 446.422 98.4296 445.74 cv
89.5668 459.669 li
89.3687 454.656 88.5995 453.305 88.5995 453.305 cv
88.5995 453.305 li
91.0215 448.574 li
91.0215 448.574 li
86.9097 448.574 li
82.798 448.574 li
82.798 448.574 li
85.2199 453.305 li
85.2199 453.305 li
85.2199 453.305 84.4507 454.656 84.2526 459.669 cv
75.3859 445.734 li
68.501 446.36 63.1054 452.142 63.1054 459.19 cv
63.1054 463.752 li
63.1054 463.752 li
63.1054 465.502 64.5239 466.921 66.2738 466.921 cv
86.8467 466.921 li
107.42 466.921 li
108.951 466.921 110.228 465.835 110.524 464.391 cv
110.566 464.185 110.588 463.971 110.588 463.752 cv
110.588 463.752 110.588 463.752 110.588 463.752 cv
110.588 463.752 li
cp
f
76.5493 425.591 mo
76.5683 425.393 76.6036 425.2 76.6336 425.005 cv
76.6535 424.876 76.6649 424.744 76.6895 424.617 cv
76.7348 424.382 76.7962 424.153 76.857 423.924 cv
76.879 423.841 76.8936 423.756 76.9175 423.674 cv
77.3675 422.134 78.1638 420.741 79.2125 419.582 cv
79.2157 419.578 79.2186 419.574 79.2219 419.57 cv
79.2219 419.57 79.2219 419.57 79.2219 419.57 cv
79.2221 419.57 79.2222 419.57 79.2223 419.57 cv
79.5033 419.26 79.8001 418.966 80.1161 418.691 cv
80.1289 418.68 80.1411 418.668 80.154 418.657 cv
80.4759 418.38 80.8108 418.118 81.1649 417.882 cv
81.165 417.882 81.165 417.882 81.1651 417.882 cv
81.1651 417.882 81.1651 417.882 81.1652 417.882 cv
81.1735 417.876 81.1824 417.871 81.1908 417.866 cv
81.3912 417.733 81.5959 417.606 81.8057 417.486 cv
81.823 417.476 81.8414 417.468 81.8587 417.459 cv
82.0599 417.346 82.2641 417.237 82.4732 417.138 cv
82.5145 417.118 82.558 417.102 82.5996 417.083 cv
82.7868 416.996 82.9749 416.912 83.1678 416.836 cv
83.2128 416.819 83.2596 416.806 83.3048 416.789 cv
83.7345 416.627 84.1757 416.49 84.6301 416.386 cv
84.6589 416.379 84.6888 416.375 84.7177 416.369 cv
84.9405 416.32 85.1648 416.275 85.3927 416.241 cv
85.5173 416.222 85.6449 416.212 85.771 416.198 cv
86.166 416.152 86.5656 416.122 86.9727 416.122 cv
87.207 416.122 87.4394 416.13 87.6697 416.145 cv
89.2812 416.252 90.7903 416.729 92.1215 417.483 cv
92.122 417.483 92.1224 417.483 92.1229 417.483 cv
92.1266 417.485 92.1305 417.487 92.1343 417.489 cv
92.1344 417.489 92.1343 417.489 92.1344 417.489 cv
92.4628 417.676 92.7781 417.882 93.0832 418.102 cv
93.0921 418.108 93.1009 418.115 93.1098 418.121 cv
93.4118 418.341 93.7003 418.576 93.9768 418.825 cv
93.9769 418.825 li
93.9774 418.826 93.9779 418.826 93.9785 418.827 cv
93.9785 418.827 li
94.7746 419.545 95.461 420.383 96.0079 421.313 cv
96.0198 421.333 96.0287 421.355 96.0405 421.375 cv
96.3893 421.977 96.6828 422.615 96.9072 423.285 cv
96.9486 423.409 96.9753 423.539 97.0121 423.664 cv
97.0785 423.891 97.1499 424.115 97.201 424.347 cv
97.2242 424.453 97.2339 424.563 97.2539 424.67 cv
97.3708 425.294 97.444 425.934 97.444 426.593 cv
97.444 427.08 97.3991 427.556 97.3346 428.026 cv
97.1252 426.499 96.582 425.081 95.7898 423.838 cv
95.3392 423.13 94.8034 422.484 94.2018 421.905 cv
94.1698 421.875 94.1383 421.843 94.1058 421.813 cv
93.5158 421.26 92.861 420.776 92.1552 420.371 cv
92.0911 420.334 92.0257 420.299 91.9608 420.264 cv
91.6578 420.099 91.3457 419.948 91.0255 419.813 cv
90.9669 419.788 90.9101 419.76 90.851 419.736 cv
90.4832 419.589 90.1049 419.462 89.7177 419.357 cv
89.6431 419.336 89.5661 419.322 89.4908 419.303 cv
89.1749 419.225 88.8531 419.162 88.5264 419.113 cv
88.4176 419.097 88.3089 419.08 88.1989 419.067 cv
87.7961 419.02 87.3885 418.988 86.9727 418.988 cv
86.6746 418.988 86.3805 419.004 86.0887 419.029 cv
86.0025 419.036 85.9172 419.046 85.8316 419.055 cv
85.6171 419.079 85.4047 419.108 85.1943 419.145 cv
85.1106 419.159 85.0266 419.172 84.9436 419.188 cv
84.6638 419.243 84.3868 419.306 84.1156 419.383 cv
84.1018 419.387 84.0886 419.392 84.0749 419.396 cv
83.8169 419.47 83.5642 419.557 83.3149 419.65 cv
83.2319 419.681 83.1502 419.715 83.0682 419.748 cv
82.8821 419.823 82.6988 419.903 82.5182 419.988 cv
82.4385 420.026 82.3581 420.063 82.2794 420.102 cv
82.0366 420.225 81.7975 420.354 81.566 420.494 cv
81.5329 420.514 81.5017 420.537 81.4688 420.557 cv
81.2681 420.682 81.0722 420.814 80.8808 420.951 cv
80.8017 421.008 80.7246 421.068 80.6472 421.127 cv
80.4998 421.239 80.3558 421.355 80.2148 421.475 cv
80.1411 421.538 80.0666 421.599 79.9946 421.664 cv
79.8026 421.837 79.6155 422.015 79.4367 422.201 cv
79.3914 422.248 79.3493 422.298 79.3049 422.346 cv
79.1603 422.502 79.0199 422.662 78.8849 422.827 cv
78.8183 422.908 78.7544 422.992 78.6903 423.075 cv
78.5824 423.215 78.4783 423.358 78.3774 423.504 cv
78.319 423.589 78.2595 423.672 78.2035 423.759 cv
78.0618 423.977 77.926 424.199 77.8006 424.428 cv
77.8006 424.428 li
77.8004 424.428 77.8001 424.429 77.7999 424.429 cv
77.7993 424.43 77.7987 424.431 77.7982 424.432 cv
77.1988 425.526 76.7876 426.738 76.6109 428.026 cv
76.5465 427.556 76.5015 427.08 76.5015 426.593 cv
76.5015 426.255 76.5177 425.921 76.5493 425.591 cv
cp
86.9098 445.501 mo
85.1228 445.501 80.5356 442.189 78.5143 436.037 cv
78.5002 436.037 78.4916 436.044 78.477 436.044 cv
76.9097 436.044 76.5191 435.826 75.4161 431.631 cv
74.9895 430.002 75.6674 428.847 76.8753 428.847 cv
77.104 428.847 77.3239 428.892 77.5377 428.96 cv
77.5377 428.959 77.5377 428.958 77.5377 428.957 cv
77.5382 428.958 77.5393 428.959 77.5397 428.961 cv
83.8659 428.961 92.5678 423.834 92.5678 423.834 cv
93.5427 427.942 96.2219 428.919 96.2797 428.959 cv
96.2797 428.959 96.2798 428.96 96.2798 428.96 cv
96.4942 428.893 96.7148 428.847 96.9442 428.847 cv
98.1522 428.847 98.83 430.002 98.4033 431.631 cv
97.3003 435.826 96.9097 436.044 95.3424 436.044 cv
95.3291 436.044 95.3212 436.038 95.3082 436.038 cv
95.1697 436.459 95.0171 436.864 94.8563 437.259 cv
93.9529 438.684 92.0973 438.901 90.3621 438.901 cv
90.1009 438.901 li
89.8023 438.463 89.2999 438.175 88.7297 438.175 cv
87.5195 438.175 li
86.6033 438.175 85.8606 438.918 85.8606 439.834 cv
85.8606 440.75 86.6033 441.493 87.5195 441.493 cv
88.7297 441.493 li
89.3767 441.493 89.9311 441.119 90.2046 440.579 cv
90.3621 440.579 li
90.9954 440.579 92.1348 440.576 93.3001 440.252 cv
91.0855 443.685 88.2332 445.501 86.9098 445.501 cv
cp
79.3421 441.493 mo
81.7831 445.097 84.9627 447.179 86.9098 447.179 cv
88.8872 447.179 92.1336 445.03 94.5888 441.326 cv
102.609 441.326 li
102.609 441.326 104.606 415.668 88.2876 414.038 cv
87.8555 413.989 87.4179 413.959 86.9728 413.959 cv
86.9506 413.959 86.9293 413.962 86.9071 413.962 cv
86.8864 413.962 86.8675 413.959 86.8467 413.959 cv
69.0831 413.959 70.9233 441.493 70.9233 441.493 cv
79.3421 441.493 li
cp
f
193.608 421.17 mo
193.635 421.135 193.675 421.082 193.827 421.082 cv
194.139 421.082 194.407 421.088 194.672 421.095 cv
195.173 421.108 li
195.671 422.134 196.055 423.586 196.24 422.537 cv
196.479 421.19 195.911 419.811 195.792 416.532 cv
196.028 414.86 196.424 413.541 196.977 412.521 cv
199.313 409.671 201.466 413.686 204.355 413.686 cv
207.099 413.686 209.178 410.064 211.382 412.14 cv
212.131 413.335 212.643 414.969 212.887 417.205 cv
212.722 420.007 212.248 421.286 212.469 422.537 cv
212.655 423.588 213.04 422.128 213.54 421.102 cv
214.025 421.091 li
214.218 421.086 214.41 421.082 214.634 421.082 cv
214.786 421.082 214.826 421.135 214.853 421.169 cv
215.012 421.376 215.085 421.921 214.888 422.673 cv
214.057 425.836 213.639 425.835 213.134 425.833 cv
212.403 425.822 li
212.149 426.648 li
212.127 426.725 212.106 426.803 212.081 426.876 cv
212.038 427.073 li
211.888 428.671 211.759 429.024 211.735 429.076 cv
211.257 430.08 207.964 434.178 206.716 434.662 cv
206.706 434.665 206.454 434.746 205.441 434.746 cv
204.831 434.746 204.284 434.717 204.276 434.717 cv
204.231 434.714 li
204.186 434.717 li
204.178 434.717 203.631 434.746 203.02 434.746 cv
202.006 434.746 201.754 434.665 201.749 434.664 cv
200.577 434.208 197.235 430.144 196.727 429.078 cv
196.699 429.014 196.549 428.597 196.382 426.596 cv
196.317 425.811 li
195.26 425.835 li
194.82 425.835 194.404 425.835 193.573 422.674 cv
193.376 421.921 193.449 421.376 193.608 421.17 cv
cp
194.779 427.487 mo
194.934 429.032 195.083 429.528 195.212 429.798 cv
195.753 430.932 199.328 435.523 201.143 436.228 cv
201.378 436.319 201.804 436.424 203.02 436.424 cv
203.575 436.424 204.081 436.401 204.231 436.394 cv
204.381 436.401 204.887 436.424 205.441 436.424 cv
206.657 436.424 207.083 436.319 207.318 436.227 cv
209.133 435.523 212.709 430.932 213.25 429.798 cv
213.377 429.53 213.527 429.043 213.683 427.486 cv
214.896 427.336 215.622 426.476 216.51 423.099 cv
216.824 421.9 216.705 420.823 216.181 420.145 cv
215.887 419.763 215.473 419.529 214.999 419.446 cv
215.212 418.901 215.319 418.136 215.35 417.278 cv
215.352 417.28 li
215.352 417.28 216.055 412.516 215.467 411.633 cv
215.171 411.187 214.47 410.807 213.759 410.523 cv
211.145 405.39 204.355 406.103 204.355 406.103 cv
204.355 406.103 197.827 405.414 195.107 410.224 cv
194.184 410.505 192.957 411 192.537 411.633 cv
192.029 412.395 192.799 416.519 193.019 417.633 cv
193.145 418.338 193.331 418.966 193.578 419.433 cv
193.062 419.498 192.597 419.734 192.28 420.145 cv
191.756 420.823 191.636 421.9 191.95 423.1 cv
192.838 426.476 193.565 427.337 194.779 427.487 cv
cp
f
266.99 421.17 mo
267.017 421.135 267.058 421.082 267.21 421.082 cv
267.523 421.082 267.79 421.089 268.056 421.095 cv
268.459 421.105 li
269.024 422.095 269.452 423.869 269.433 423.416 cv
269.433 423.416 271.949 422.71 270.167 416.21 cv
269.904 415.249 272.133 413.011 272.212 411.412 cv
272.231 411.017 272.218 410.696 272.183 410.427 cv
273.599 409.45 275.448 409.151 277.675 409.151 cv
279.902 409.151 281.751 409.45 283.167 410.427 cv
283.132 410.695 283.119 411.017 283.138 411.412 cv
283.217 413.011 285.446 415.249 285.183 416.21 cv
283.401 422.71 285.917 423.416 285.917 423.416 cv
285.898 423.87 286.327 422.091 286.893 421.102 cv
287.434 421.09 li
287.618 421.086 287.803 421.082 288.016 421.082 cv
288.168 421.082 288.209 421.135 288.235 421.17 cv
288.395 421.376 288.467 421.921 288.27 422.674 cv
287.44 425.835 287.039 425.827 286.513 425.834 cv
285.787 425.823 li
285.532 426.648 li
285.51 426.725 285.489 426.803 285.463 426.876 cv
285.42 427.074 li
285.271 428.671 285.141 429.025 285.118 429.076 cv
284.639 430.081 281.346 434.178 280.099 434.662 cv
280.089 434.665 279.837 434.746 278.82 434.746 cv
278.211 434.746 277.666 434.717 277.658 434.717 cv
277.614 434.715 li
277.569 434.717 li
277.561 434.717 277.015 434.746 276.406 434.746 cv
275.389 434.746 275.137 434.665 275.132 434.663 cv
273.88 434.178 270.588 430.081 270.11 429.078 cv
270.081 429.015 269.931 428.597 269.765 426.596 cv
269.7 425.814 li
268.642 425.835 li
268.202 425.835 267.787 425.835 266.955 422.674 cv
266.758 421.922 266.831 421.376 266.99 421.17 cv
cp
268.161 427.487 mo
268.316 429.031 268.466 429.528 268.595 429.799 cv
269.136 430.932 272.712 435.523 274.525 436.228 cv
274.76 436.319 275.187 436.424 276.406 436.424 cv
276.96 436.424 277.464 436.401 277.614 436.394 cv
277.763 436.401 278.267 436.424 278.82 436.424 cv
280.038 436.424 280.465 436.319 280.701 436.228 cv
282.514 435.524 286.091 430.932 286.632 429.797 cv
286.76 429.529 286.91 429.04 287.066 427.487 cv
288.279 427.337 289.005 426.476 289.892 423.099 cv
290.206 421.9 290.087 420.823 289.564 420.145 cv
289.29 419.791 288.917 419.559 288.486 419.461 cv
288.685 419.021 288.84 418.475 288.95 417.866 cv
289.17 416.752 289.681 414.457 289.01 412.277 cv
288.182 409.587 286.003 408.376 284.306 409.001 cv
284.239 409.025 284.172 409.05 284.105 409.077 cv
282.503 407.983 280.385 407.473 277.675 407.473 cv
274.965 407.473 272.848 407.983 271.246 409.077 cv
271.178 409.05 271.111 409.025 271.044 409.001 cv
269.347 408.376 267.168 409.587 266.34 412.277 cv
265.669 414.457 266.18 416.752 266.4 417.866 cv
266.508 418.468 266.662 419.009 266.857 419.446 cv
266.377 419.531 265.959 419.76 265.662 420.145 cv
265.139 420.823 265.019 421.9 265.333 423.1 cv
266.221 426.477 266.947 427.337 268.161 427.487 cv
cp
f
226.021 444.518 mo
223.836 440.908 220.016 438.399 215.581 438.032 cv
206.987 451.539 li
206.898 445.309 205.982 443.691 205.982 443.691 cv
208.404 438.96 li
204.293 438.96 li
200.181 438.96 li
202.603 443.691 li
202.603 443.691 201.687 445.309 201.598 451.539 cv
193 438.026 li
186.006 438.543 180.489 444.367 180.489 451.493 cv
180.489 456.055 li
180.489 456.055 180.489 456.055 180.489 456.055 cv
180.489 457.805 181.907 459.224 183.657 459.224 cv
204.23 459.224 li
215.284 459.224 li
215.284 459.19 li
215.284 452.395 219.782 446.516 226.021 444.518 cv
cp
f
288.964 438.032 mo
280.37 451.539 li
280.28 445.309 279.365 443.691 279.365 443.691 cv
281.787 438.96 li
277.675 438.96 li
273.563 438.96 li
275.985 443.691 li
275.985 443.691 275.07 445.308 274.98 451.539 cv
266.382 438.026 li
261.897 438.357 258.028 440.878 255.824 444.519 cv
262.055 446.524 266.559 452.417 266.559 459.19 cv
266.559 459.224 li
277.613 459.224 li
298.186 459.224 li
299.936 459.224 301.354 457.805 301.354 456.055 cv
301.354 451.493 li
301.354 444.408 295.901 438.606 288.964 438.032 cv
cp
f
264.663 459.19 mo
264.663 459.19 li
264.663 458.747 264.641 458.309 264.6 457.877 cv
264.308 454.855 263.021 452.125 261.069 450.018 cv
260.511 449.416 259.9 448.865 259.241 448.372 cv
257.267 446.895 254.874 445.944 252.273 445.729 cv
243.679 459.235 li
243.589 453.005 242.674 451.388 242.674 451.388 cv
245.096 446.657 li
240.984 446.657 li
236.872 446.657 li
239.294 451.388 li
239.294 451.388 239.119 451.698 238.914 452.568 cv
238.856 452.816 238.795 453.11 238.735 453.456 cv
238.645 453.975 238.558 454.61 238.484 455.381 cv
238.385 456.409 238.311 457.678 238.289 459.235 cv
229.691 445.723 li
224.883 446.078 220.773 448.942 218.673 453.013 cv
218.292 453.753 217.976 454.533 217.735 455.345 cv
217.615 455.751 217.513 456.165 217.431 456.587 cv
217.349 457.008 217.286 457.436 217.244 457.87 cv
217.202 458.304 217.18 458.745 217.18 459.19 cv
217.18 459.19 li
217.18 463.752 li
217.18 463.752 li
217.18 464.627 217.535 465.419 218.108 465.993 cv
218.682 466.566 219.474 466.921 220.349 466.921 cv
240.922 466.921 li
261.494 466.921 li
262.369 466.921 263.161 466.566 263.735 465.993 cv
264.308 465.419 264.663 464.627 264.663 463.752 cv
264.663 463.752 264.663 463.752 264.663 463.752 cv
264.663 459.19 li
cp
f
230.299 429.512 mo
230.326 429.477 230.367 429.424 230.518 429.424 cv
230.83 429.424 231.098 429.431 231.362 429.438 cv
231.701 429.447 li
232.112 430.786 232.256 433.227 232.256 433.227 cv
232.256 433.227 232.666 432.382 232.931 430.88 cv
233.171 429.524 232.595 428.136 232.481 424.813 cv
232.719 423.15 233.123 421.85 233.677 420.835 cv
236.011 418.007 238.161 422.029 241.046 422.029 cv
243.793 422.029 245.873 418.385 248.08 420.474 cv
248.827 421.668 249.335 423.307 249.578 425.539 cv
249.414 428.347 248.939 429.627 249.161 430.88 cv
249.426 432.382 249.836 432.797 249.836 433.227 cv
249.836 433.36 249.982 430.815 250.401 429.441 cv
250.689 429.434 li
250.891 429.429 251.091 429.424 251.325 429.424 cv
251.477 429.424 251.517 429.476 251.544 429.512 cv
251.703 429.718 251.776 430.264 251.579 431.016 cv
250.748 434.176 250.347 434.171 249.822 434.175 cv
249.096 434.165 li
248.839 434.994 li
248.817 435.07 248.797 435.147 248.772 435.22 cv
248.729 435.416 li
248.58 437.012 248.45 437.366 248.426 437.419 cv
247.918 438.486 244.576 442.551 243.407 443.004 cv
243.397 443.008 243.146 443.089 242.135 443.089 cv
241.524 443.089 240.975 443.059 240.967 443.058 cv
240.922 443.057 li
240.877 443.058 li
240.869 443.059 240.32 443.089 239.708 443.089 cv
238.697 443.089 238.445 443.008 238.441 443.006 cv
237.268 442.551 233.926 438.486 233.418 437.419 cv
233.39 437.356 233.24 436.938 233.074 434.939 cv
233.008 434.157 li
231.951 434.177 li
231.511 434.177 231.095 434.177 230.264 431.017 cv
230.067 430.264 230.14 429.718 230.299 429.512 cv
cp
231.47 435.828 mo
231.625 437.375 231.775 437.87 231.904 438.14 cv
232.443 439.274 236.019 443.865 237.834 444.57 cv
238.069 444.661 238.494 444.766 239.708 444.766 cv
240.264 444.766 240.772 444.743 240.922 444.736 cv
241.072 444.743 241.58 444.766 242.135 444.766 cv
243.348 444.766 243.774 444.661 244.009 444.57 cv
245.824 443.866 249.4 439.274 249.941 438.14 cv
250.068 437.871 250.219 437.383 250.375 435.828 cv
251.588 435.678 252.314 434.818 253.201 431.441 cv
253.516 430.242 253.396 429.165 252.872 428.487 cv
252.578 428.105 252.164 427.871 251.69 427.788 cv
251.904 427.243 252.011 426.478 252.041 425.62 cv
252.043 425.623 li
252.043 425.623 252.746 420.858 252.158 419.975 cv
251.891 419.574 251.297 419.227 250.662 418.954 cv
250.662 418.954 li
254.017 415.202 248.8 411.356 248.8 411.356 cv
248.8 414.056 244.475 414.134 244.475 414.134 cv
246.572 413.348 246.1 411.618 246.1 411.618 cv
246.1 411.618 244.711 413.007 237.844 413.505 cv
230.416 414.044 231.798 418.566 231.798 418.566 cv
230.875 418.847 229.648 419.343 229.228 419.975 cv
228.72 420.738 229.49 424.861 229.71 425.975 cv
229.836 426.681 230.022 427.309 230.269 427.776 cv
229.754 427.843 229.289 428.076 228.971 428.487 cv
228.447 429.165 228.327 430.242 228.641 431.442 cv
229.529 434.818 230.256 435.678 231.47 435.828 cv
cp
f
214.713 80.6116 mo
212.504 77.1503 208.766 74.7593 204.445 74.4015 cv
195.851 87.9083 li
195.762 81.6781 194.846 80.0611 194.846 80.0611 cv
197.268 75.3297 li
193.156 75.3297 li
189.045 75.3297 li
191.467 80.0611 li
191.467 80.0611 190.551 81.6781 190.462 87.9082 cv
181.864 74.3954 li
177.369 74.7277 173.499 77.2598 171.299 80.9136 cv
167.856 76.3708 165.809 70.7153 165.809 64.5891 cv
165.809 49.6546 177.959 37.5044 192.894 37.5044 cv
207.828 37.5044 219.978 49.6546 219.978 64.5891 cv
219.978 70.5806 218.019 76.1211 214.713 80.6116 cv
cp
192.894 33.0795 mo
175.519 33.0795 161.384 47.2146 161.384 64.5891 cv
161.384 81.9633 175.519 96.0985 192.894 96.0985 cv
210.268 96.0985 224.403 81.9633 224.403 64.5891 cv
224.403 47.2146 210.268 33.0795 192.894 33.0795 cv
cp
f
203.747 59.6893 mo
202.916 62.8493 202.515 62.8434 201.99 62.8483 cv
201.265 62.8377 li
201.008 63.6666 li
200.986 63.7428 200.965 63.8198 200.94 63.8927 cv
200.898 64.0893 li
200.749 65.6849 200.618 66.0387 200.595 66.092 cv
200.086 67.1592 196.744 71.2243 195.576 71.6771 cv
195.566 71.6805 195.314 71.7617 194.304 71.7617 cv
193.693 71.7617 193.143 71.732 193.135 71.7313 cv
193.091 71.7296 li
193.046 71.7313 li
193.038 71.732 192.489 71.7617 191.877 71.7617 cv
190.866 71.7617 190.614 71.6805 190.609 71.6788 cv
189.436 71.2234 186.095 67.1592 185.587 66.092 cv
185.558 66.0289 185.408 65.6111 185.242 63.6116 cv
185.177 62.8295 li
184.12 62.85 li
183.679 62.85 183.264 62.85 182.433 59.69 cv
182.236 58.9364 182.308 58.3909 182.468 58.1846 cv
182.495 58.1501 182.536 58.0969 182.687 58.0969 cv
182.998 58.0969 183.266 58.1034 183.53 58.1108 cv
183.869 58.1199 li
184.28 59.459 184.424 61.8995 184.424 61.8995 cv
184.424 61.8995 184.835 61.0546 185.1 59.5527 cv
185.34 58.1971 184.764 56.8089 184.649 53.4859 cv
184.888 51.8226 185.292 50.5224 185.846 49.5076 cv
188.179 46.6802 190.329 50.7017 193.215 50.7017 cv
195.961 50.7017 198.042 47.0575 200.248 49.1465 cv
200.996 50.3407 201.503 51.98 201.747 54.2122 cv
201.582 57.0197 201.108 58.3001 201.329 59.5527 cv
201.595 61.0546 202.005 61.4702 202.005 61.8995 cv
202.005 62.0327 202.151 59.4879 202.569 58.1139 cv
202.858 58.1068 li
203.06 58.1018 203.26 58.0969 203.493 58.0969 cv
203.645 58.0969 203.686 58.1494 203.713 58.1846 cv
203.872 58.3909 203.945 58.9364 203.747 59.6893 cv
cp
203.859 56.4607 mo
204.072 55.9159 204.179 55.1512 204.21 54.2927 cv
204.212 54.2955 li
204.212 54.2955 204.915 49.5311 204.327 48.648 cv
204.06 48.2465 203.465 47.8996 202.831 47.627 cv
202.831 47.627 li
204.258 43.2997 199.481 41.5698 199.481 41.5698 cv
199.481 43.264 198.403 43.5784 197.599 43.5776 cv
197.366 43.5091 197.135 43.4486 196.908 43.3972 cv
198.801 42.6178 198.289 41.5956 198.289 41.5956 cv
198.289 41.5956 196.761 42.2306 189.894 42.7287 cv
182.466 43.2674 183.967 47.239 183.967 47.239 cv
183.044 47.5201 181.816 48.0155 181.396 48.648 cv
180.888 49.4106 181.658 53.5344 181.878 54.6483 cv
182.005 55.354 182.191 55.9823 182.438 56.449 cv
181.922 56.5157 181.457 56.749 181.139 57.1598 cv
180.616 57.8381 180.496 58.9151 180.81 60.1152 cv
181.698 63.4913 182.424 64.3513 183.639 64.5012 cv
183.793 66.0477 183.943 66.5432 184.072 66.8127 cv
184.612 67.9472 188.188 72.5381 190.002 73.2432 cv
190.237 73.3343 190.663 73.4391 191.877 73.4391 cv
192.432 73.4391 192.94 73.4161 193.091 73.4087 cv
193.241 73.4161 193.748 73.4391 194.304 73.4391 cv
195.517 73.4391 195.943 73.3343 196.178 73.2432 cv
197.993 72.5389 201.569 67.9472 202.109 66.8127 cv
202.237 66.544 202.387 66.0559 202.543 64.5012 cv
203.756 64.3513 204.482 63.4905 205.37 60.1143 cv
205.684 58.9151 205.564 57.8381 205.041 57.1598 cv
204.746 56.7783 204.333 56.5434 203.859 56.4607 cv
cp
f
98.567 58.7207 mo
98.4291 59.2451 98.3023 59.7072 98.1831 60.1146 cv
98.1234 60.3184 98.0657 60.5084 98.0092 60.6856 cv
97.6709 61.7492 97.3829 62.3523 97.0457 62.6939 cv
96.6523 63.0922 96.1918 63.1338 95.5061 63.1338 cv
95.4928 63.1338 95.4849 63.1277 95.4719 63.1275 cv
95.3333 63.5493 95.1805 63.9546 95.0196 64.3493 cv
94.8996 64.5385 94.7645 64.708 94.6131 64.8563 cv
93.7547 65.6975 92.4437 65.935 91.1257 65.9799 cv
90.9251 65.9867 90.7244 65.9911 90.5257 65.9911 cv
90.2644 65.9911 li
89.9658 65.5534 89.4634 65.2654 88.8934 65.2654 cv
87.6831 65.2654 li
86.767 65.2654 86.0243 66.008 86.0243 66.9243 cv
86.0243 67.8405 86.767 68.5831 87.6831 68.5831 cv
88.8934 68.5831 li
89.5405 68.5831 90.0949 68.2091 90.3684 67.6686 cv
90.5257 67.6686 li
91.1589 67.6686 92.2985 67.6654 93.4639 67.342 cv
93.1206 67.8742 92.7638 68.372 92.398 68.8254 cv
90.4032 71.2976 88.1918 72.5913 87.0735 72.5913 cv
86.0683 72.5913 84.1771 71.5435 82.355 69.5313 cv
82.1525 69.3079 81.9509 69.0724 81.7515 68.8251 cv
80.5548 67.3417 79.436 65.4339 78.6779 63.1269 cv
78.6639 63.1274 78.6552 63.1338 78.6407 63.1338 cv
77.955 63.1338 77.4946 63.0922 77.1011 62.6939 cv
76.7639 62.3523 76.4759 61.7492 76.1376 60.6856 cv
76.0812 60.5084 76.0234 60.3184 75.9637 60.1146 cv
75.8445 59.7072 75.7177 59.2451 75.5799 58.7207 cv
75.1531 57.0925 75.8311 55.9369 77.039 55.9369 cv
77.2677 55.9369 77.4875 55.9826 77.7013 56.0497 cv
77.7398 56.0166 81.1774 53.1405 81.1774 50.5457 cv
81.1774 50.5457 82.8803 53.2865 88.0543 54.8999 cv
87.4206 53.8177 86.1102 51.4614 85.7428 49.8899 cv
85.7428 49.8899 89.1165 54.1565 93.6918 55.9406 cv
94.5555 56.0095 95.4682 56.0502 96.4435 56.0505 cv
96.658 55.9829 96.8786 55.9369 97.1079 55.9369 cv
98.3158 55.9369 98.9938 57.0925 98.567 58.7207 cv
cp
87.1365 41.0488 mo
87.1365 41.0551 li
87.094 41.0547 87.053 41.0488 87.0104 41.0488 cv
87.0104 41.0488 li
87.0104 41.0488 87.0103 41.0488 87.0102 41.0488 cv
69.2467 41.049 69.3079 62.2477 74.6985 67.6433 cv
76.2549 69.2009 78.7974 69.8678 80.6952 70.1545 cv
82.9097 72.7824 85.4303 74.2689 87.0735 74.2689 cv
88.7175 74.2689 91.2394 72.7824 93.4546 70.1542 cv
95.352 69.8671 97.8928 69.2001 99.4483 67.6433 cv
104.839 62.2477 104.9 41.0488 87.1365 41.0488 cv
cp
f
108.798 80.6559 mo
106.604 77.1026 102.815 74.6386 98.4236 74.2749 cv
87.0734 86.3266 li
75.842 74.2689 li
71.3598 74.6002 67.498 77.1195 65.2947 80.7573 cv
61.924 76.2417 59.9258 70.6443 59.9258 64.5888 cv
59.9258 49.6543 72.076 37.5044 87.0103 37.5044 cv
101.945 37.5044 114.095 49.6543 114.095 64.5888 cv
114.095 70.5999 112.124 76.1577 108.798 80.6559 cv
cp
87.0103 33.0795 mo
69.6361 33.0795 55.5009 47.2146 55.5009 64.5888 cv
55.5009 81.9633 69.6361 96.0985 87.0103 96.0985 cv
104.385 96.0985 118.52 81.9633 118.52 64.5888 cv
118.52 47.2146 104.385 33.0795 87.0103 33.0795 cv
cp
f
310.237 73.5827 mo
308.214 73.4994 306.852 72.4759 306.838 72.4657 cv
304.888 74.9532 li
305.103 75.1229 307.074 76.6156 310.107 76.7409 cv
313.811 76.8938 317.243 79.0324 319.228 82.3169 cv
314.913 87.2873 308.825 90.6739 301.955 91.4809 cv
301.652 87.0819 300.953 83.0589 300.572 81.0951 cv
302.736 76.8674 li
298.625 76.8674 li
294.513 76.8674 li
296.671 81.0834 li
296.283 83.029 295.573 87.0205 295.283 91.4406 cv
288.543 90.568 282.574 87.2109 278.326 82.3166 cv
280.311 79.0324 283.743 76.8938 287.447 76.7409 cv
290.479 76.6156 292.45 75.1229 292.665 74.9532 cv
290.716 72.4657 li
290.702 72.4759 289.34 73.4994 287.316 73.5827 cv
282.947 73.7635 278.887 76.0705 276.293 79.6734 cv
273.39 75.3595 271.692 70.169 271.692 64.5891 cv
271.692 49.6546 283.843 37.5044 298.777 37.5044 cv
313.712 37.5044 325.862 49.6546 325.862 64.5891 cv
325.862 70.169 324.164 75.3595 321.261 79.6736 cv
318.667 76.0705 314.606 73.7633 310.237 73.5827 cv
cp
298.777 33.0795 mo
281.403 33.0795 267.267 47.2146 267.267 64.5891 cv
267.267 81.9633 281.403 96.0985 298.777 96.0985 cv
316.151 96.0985 330.286 81.9633 330.286 64.5891 cv
330.286 47.2146 316.151 33.0795 298.777 33.0795 cv
cp
f
309.478 60.4496 mo
308.647 63.6095 308.246 63.6038 307.721 63.6087 cv
306.996 63.5981 li
306.739 64.4271 li
306.717 64.5032 306.696 64.5802 306.671 64.653 cv
306.629 64.8497 li
306.48 66.4453 306.349 66.7991 306.326 66.8522 cv
305.817 67.9195 302.475 71.9847 301.307 72.4376 cv
301.297 72.4409 301.045 72.5219 300.035 72.5219 cv
299.424 72.5219 298.874 72.4924 298.866 72.4916 cv
298.822 72.49 li
298.777 72.4916 li
298.769 72.4924 298.22 72.5219 297.608 72.5219 cv
296.596 72.5219 296.345 72.4409 296.34 72.4392 cv
295.167 71.9839 291.826 67.9195 291.318 66.8522 cv
291.289 66.7892 291.139 66.3715 290.973 64.3722 cv
290.908 63.5899 li
289.851 63.6104 li
289.41 63.6104 288.995 63.6104 288.164 60.4504 cv
287.967 59.6968 288.039 59.1513 288.198 58.9449 cv
288.225 58.9105 288.266 58.8573 288.418 58.8573 cv
288.729 58.8573 288.997 58.8639 289.261 58.8712 cv
289.6 58.8803 li
290.011 60.2194 290.155 62.6601 290.155 62.6601 cv
290.155 62.6601 290.565 61.815 290.831 60.313 cv
291.071 58.9574 290.495 57.5694 290.38 54.2464 cv
290.619 52.5829 291.022 51.2827 291.577 50.268 cv
293.91 47.4406 296.06 51.4621 298.946 51.4621 cv
301.692 51.4621 303.773 47.8181 305.979 49.9069 cv
306.727 51.1012 307.234 52.7403 307.478 54.9727 cv
307.313 57.7802 306.839 59.0605 307.06 60.313 cv
307.326 61.815 307.736 62.2307 307.736 62.6601 cv
307.736 62.7931 307.882 60.2482 308.3 58.8741 cv
308.589 58.8671 li
308.791 58.8622 308.991 58.8573 309.224 58.8573 cv
309.376 58.8573 309.417 58.9097 309.444 58.9449 cv
309.603 59.1513 309.676 59.6968 309.478 60.4496 cv
cp
309.59 57.2211 mo
309.803 56.6765 309.91 55.9116 309.941 55.0533 cv
309.942 55.0559 li
309.942 55.0559 310.646 50.2915 310.058 49.4086 cv
309.791 49.0067 309.196 48.6598 308.562 48.3874 cv
311.916 44.6352 305.829 41.1324 305.829 41.1324 cv
305.829 43.8321 302.375 43.5674 302.375 43.5674 cv
304.472 42.7811 304 41.0513 304 41.0513 cv
304 41.0513 302.611 42.4404 295.743 42.9384 cv
288.315 43.4771 289.698 47.9996 289.698 47.9996 cv
288.774 48.2804 287.547 48.7758 287.127 49.4086 cv
286.619 50.1709 287.389 54.2947 287.609 55.4087 cv
287.736 56.1144 287.922 56.7427 288.169 57.2094 cv
287.653 57.276 287.188 57.5094 286.87 57.9202 cv
286.347 58.5985 286.227 59.6755 286.541 60.8754 cv
287.429 64.2518 288.155 65.1117 289.37 65.2617 cv
289.524 66.8081 289.674 67.3036 289.803 67.5731 cv
290.343 68.7075 293.919 73.2985 295.733 74.0037 cv
295.968 74.0945 296.394 74.1994 297.608 74.1994 cv
298.163 74.1994 298.671 74.1764 298.822 74.1692 cv
298.972 74.1764 299.479 74.1994 300.035 74.1994 cv
301.248 74.1994 301.674 74.0945 301.909 74.0037 cv
303.724 73.2992 307.3 68.7075 307.84 67.5731 cv
307.968 67.3044 308.118 66.8163 308.274 65.2617 cv
309.487 65.1117 310.213 64.2509 311.101 60.8746 cv
311.415 59.6755 311.295 58.5985 310.772 57.9202 cv
310.477 57.5387 310.064 57.3038 309.59 57.2211 cv
cp
f
416.121 73.5827 mo
414.098 73.4994 412.735 72.4756 412.731 72.4734 cv
410.772 74.9532 li
410.986 75.1229 412.958 76.6156 415.99 76.7409 cv
419.694 76.8938 423.127 79.0322 425.111 82.3164 cv
420.798 87.2858 414.712 90.6719 407.844 91.4803 cv
407.548 87.0646 406.843 83.048 406.458 81.0897 cv
408.62 76.8674 li
404.508 76.8674 li
400.396 76.8674 li
402.547 81.0687 li
402.148 83.0001 401.419 86.9779 401.141 91.4375 cv
394.411 90.5599 388.452 87.2048 384.209 82.3166 cv
386.194 79.0322 389.626 76.8938 393.33 76.7409 cv
396.362 76.6156 398.334 75.1229 398.549 74.9532 cv
396.599 72.4654 li
396.586 72.4756 395.223 73.4994 393.199 73.5827 cv
388.831 73.7633 384.771 76.0705 382.177 79.6736 cv
379.273 75.3595 377.576 70.169 377.576 64.5891 cv
377.576 49.6546 389.726 37.5044 404.66 37.5044 cv
419.595 37.5044 431.745 49.6546 431.745 64.5891 cv
431.745 70.1689 430.048 75.3594 427.144 79.6733 cv
424.55 76.0704 420.49 73.7635 416.121 73.5827 cv
cp
404.66 33.0795 mo
387.286 33.0795 373.151 47.2146 373.151 64.5891 cv
373.151 81.9633 387.286 96.0985 404.66 96.0985 cv
422.034 96.0985 436.17 81.9633 436.17 64.5891 cv
436.17 47.2146 422.034 33.0795 404.66 33.0795 cv
cp
f
416.002 59.4865 mo
415.864 60.0109 415.737 60.4729 415.618 60.8804 cv
415.558 61.0842 415.5 61.2742 415.444 61.4514 cv
415.106 62.515 414.818 63.1181 414.48 63.4596 cv
414.087 63.8579 413.626 63.8996 412.941 63.8996 cv
412.927 63.8996 412.92 63.8934 412.906 63.8933 cv
412.768 64.3151 412.615 64.7203 412.454 65.1151 cv
412.334 65.3043 410.899 68.1078 410.899 68.1078 cv
410.555 68.6399 410.198 69.1378 409.833 69.5912 cv
407.838 72.0634 405.626 73.3571 404.508 73.3571 cv
403.503 73.3571 401.612 72.3092 399.79 70.2971 cv
399.587 70.0736 399.386 69.8381 399.186 69.5909 cv
397.989 68.1075 396.871 66.1997 396.113 63.8927 cv
396.099 63.8931 396.09 63.8996 396.075 63.8996 cv
395.39 63.8996 394.929 63.8579 394.536 63.4596 cv
394.199 63.1181 393.911 62.515 393.572 61.4514 cv
393.516 61.2742 393.458 61.0842 393.398 60.8804 cv
393.279 60.4729 393.152 60.0109 393.014 59.4865 cv
392.588 57.8583 393.266 56.7027 394.474 56.7027 cv
394.702 56.7027 394.922 56.7484 395.136 56.8155 cv
395.174 56.7823 398.612 53.9063 398.612 51.3114 cv
398.612 51.3114 400.315 54.0523 405.489 55.6656 cv
404.855 54.5835 403.545 52.2272 403.178 50.6557 cv
403.178 50.6557 406.551 54.9222 411.126 56.7064 cv
411.99 56.7752 412.903 56.816 413.878 56.8163 cv
414.093 56.7487 414.313 56.7027 414.543 56.7027 cv
415.75 56.7027 416.428 57.8583 416.002 59.4865 cv
cp
404.571 41.8146 mo
404.571 41.8209 li
404.529 41.8204 404.488 41.8146 404.445 41.8146 cv
404.445 41.8146 li
404.445 41.8146 404.445 41.8146 404.445 41.8146 cv
386.681 41.8147 386.743 63.0135 392.133 68.4091 cv
393.69 69.9667 396.232 70.6335 398.13 70.9203 cv
400.344 73.5482 402.865 75.0347 404.508 75.0347 cv
406.152 75.0347 408.674 73.5482 410.889 70.92 cv
412.787 70.6329 415.327 69.9659 416.883 68.4091 cv
422.274 63.0135 422.335 41.8146 404.571 41.8146 cv
cp
f
268.076 298.012 mo
268.304 298.012 268.524 298.058 268.738 298.125 cv
268.776 298.092 272.214 295.216 272.214 292.621 cv
272.214 292.621 273.917 295.362 279.091 296.975 cv
278.457 295.893 277.147 293.536 276.779 291.965 cv
276.779 291.965 280.153 296.232 284.728 298.016 cv
285.592 298.084 286.505 298.125 287.48 298.126 cv
287.695 298.058 287.915 298.012 288.145 298.012 cv
289.352 298.012 290.03 299.168 289.604 300.796 cv
289.466 301.32 289.339 301.782 289.22 302.19 cv
289.16 302.394 289.102 302.584 289.046 302.761 cv
288.708 303.824 288.42 304.427 288.082 304.769 cv
287.689 305.167 287.228 305.209 286.543 305.209 cv
286.529 305.209 286.522 305.203 286.509 305.203 cv
286.37 305.624 286.217 306.03 286.056 306.424 cv
285.936 306.614 285.801 306.783 285.65 306.931 cv
284.791 307.773 283.48 308.01 282.162 308.055 cv
281.962 308.062 281.761 308.066 281.562 308.066 cv
281.301 308.066 li
281.002 307.628 280.5 307.34 279.93 307.34 cv
278.72 307.34 li
277.804 307.34 277.061 308.083 277.061 308.999 cv
277.061 309.916 277.804 310.658 278.72 310.658 cv
279.93 310.658 li
280.577 310.658 281.132 310.284 281.405 309.744 cv
281.562 309.744 li
282.196 309.744 283.335 309.74 284.501 309.417 cv
284.157 309.949 283.8 310.447 283.435 310.9 cv
281.44 313.373 279.228 314.667 278.11 314.667 cv
277.105 314.667 275.214 313.618 273.392 311.607 cv
273.189 311.383 272.988 311.147 272.788 310.9 cv
271.591 309.417 270.473 307.509 269.715 305.202 cv
269.701 305.202 269.692 305.209 269.677 305.209 cv
268.992 305.209 268.531 305.167 268.138 304.769 cv
267.801 304.427 267.513 303.824 267.174 302.761 cv
267.118 302.584 267.06 302.394 267 302.19 cv
266.881 301.782 266.754 301.32 266.616 300.796 cv
266.19 299.168 266.868 298.012 268.076 298.012 cv
cp
271.732 312.23 mo
273.946 314.857 276.467 316.344 278.11 316.344 cv
279.754 316.344 282.276 314.858 284.491 312.229 cv
286.389 311.942 288.929 311.275 290.485 309.718 cv
295.876 304.323 295.937 283.124 278.173 283.124 cv
278.173 283.13 li
278.131 283.13 278.09 283.124 278.047 283.124 cv
278.047 283.124 li
278.047 283.124 278.047 283.124 278.047 283.124 cv
260.283 283.124 260.345 304.323 265.735 309.718 cv
267.292 311.276 269.834 311.943 271.732 312.23 cv
cp
f
196.083 294.757 mo
196.102 294.558 196.138 294.365 196.168 294.17 cv
196.188 294.041 196.199 293.909 196.224 293.782 cv
196.269 293.547 196.33 293.318 196.391 293.089 cv
196.413 293.007 196.428 292.921 196.452 292.839 cv
196.902 291.299 197.698 289.907 198.747 288.747 cv
198.75 288.743 198.753 288.739 198.756 288.735 cv
198.756 288.735 198.756 288.735 198.756 288.735 cv
198.756 288.735 198.756 288.735 198.756 288.735 cv
199.037 288.425 199.334 288.131 199.65 287.856 cv
199.663 287.845 199.675 287.833 199.688 287.822 cv
200.01 287.545 200.345 287.284 200.699 287.047 cv
200.699 287.047 200.699 287.047 200.699 287.047 cv
200.699 287.047 200.699 287.047 200.699 287.047 cv
200.73 287.026 200.763 287.009 200.794 286.989 cv
200.973 286.872 201.154 286.757 201.34 286.651 cv
201.357 286.642 201.376 286.634 201.393 286.624 cv
201.594 286.511 201.798 286.403 202.007 286.303 cv
202.049 286.283 202.092 286.267 202.134 286.248 cv
202.321 286.162 202.509 286.077 202.702 286.002 cv
202.752 285.982 202.804 285.967 202.854 285.949 cv
203.041 285.879 203.229 285.81 203.422 285.75 cv
203.438 285.745 203.454 285.742 203.47 285.737 cv
203.698 285.668 203.929 285.605 204.164 285.551 cv
204.193 285.544 204.223 285.541 204.252 285.534 cv
204.475 285.485 204.699 285.44 204.927 285.406 cv
205.051 285.387 205.179 285.377 205.305 285.363 cv
205.7 285.318 206.1 285.287 206.507 285.287 cv
206.741 285.287 206.974 285.295 207.204 285.31 cv
208.815 285.418 210.324 285.894 211.656 286.648 cv
211.656 286.648 211.657 286.648 211.657 286.648 cv
211.661 286.651 211.665 286.652 211.668 286.654 cv
211.668 286.654 211.668 286.654 211.668 286.654 cv
211.997 286.841 212.312 287.047 212.617 287.267 cv
212.626 287.273 212.635 287.28 212.644 287.287 cv
212.946 287.506 213.234 287.741 213.511 287.99 cv
213.511 287.99 li
213.512 287.991 213.512 287.991 213.513 287.992 cv
213.513 287.992 li
214.309 288.711 214.995 289.549 215.542 290.478 cv
215.554 290.498 215.563 290.52 215.575 290.54 cv
215.923 291.142 216.217 291.78 216.441 292.45 cv
216.483 292.574 216.509 292.704 216.546 292.83 cv
216.613 293.056 216.684 293.28 216.735 293.513 cv
216.758 293.618 216.768 293.728 216.788 293.835 cv
216.905 294.459 216.978 295.1 216.978 295.758 cv
216.978 296.246 216.933 296.722 216.869 297.191 cv
216.659 295.665 216.116 294.246 215.324 293.003 cv
214.873 292.296 214.338 291.649 213.736 291.071 cv
213.704 291.04 213.672 291.009 213.64 290.978 cv
213.05 290.425 212.395 289.941 211.689 289.536 cv
211.625 289.499 211.56 289.465 211.495 289.429 cv
211.192 289.264 210.88 289.113 210.56 288.978 cv
210.501 288.953 210.444 288.925 210.385 288.901 cv
210.017 288.754 209.639 288.627 209.252 288.522 cv
209.177 288.502 209.1 288.487 209.025 288.469 cv
208.709 288.39 208.387 288.327 208.061 288.278 cv
207.952 288.262 207.843 288.245 207.733 288.232 cv
207.33 288.185 206.923 288.153 206.507 288.153 cv
206.209 288.153 205.915 288.169 205.623 288.194 cv
205.537 288.201 205.451 288.211 205.366 288.221 cv
205.151 288.244 204.939 288.274 204.728 288.31 cv
204.645 288.324 204.561 288.337 204.478 288.354 cv
204.198 288.409 203.921 288.471 203.65 288.548 cv
203.636 288.552 203.623 288.557 203.609 288.561 cv
203.351 288.636 203.098 288.722 202.849 288.815 cv
202.766 288.846 202.684 288.88 202.602 288.913 cv
202.416 288.988 202.233 289.068 202.052 289.154 cv
201.973 289.191 201.892 289.228 201.814 289.268 cv
201.571 289.39 201.332 289.519 201.1 289.659 cv
201.067 289.679 201.036 289.702 201.003 289.722 cv
200.802 289.847 200.606 289.979 200.415 290.116 cv
200.336 290.173 200.259 290.233 200.181 290.292 cv
200.034 290.404 199.89 290.521 199.749 290.64 cv
199.675 290.703 199.601 290.765 199.529 290.829 cv
199.337 291.002 199.15 291.18 198.971 291.366 cv
198.926 291.413 198.883 291.463 198.839 291.511 cv
198.694 291.667 198.554 291.828 198.419 291.992 cv
198.352 292.074 198.289 292.157 198.224 292.24 cv
198.117 292.381 198.012 292.524 197.912 292.669 cv
197.853 292.754 197.794 292.837 197.738 292.924 cv
197.596 293.142 197.46 293.365 197.334 293.594 cv
197.333 293.595 197.333 293.596 197.332 293.597 cv
196.733 294.691 196.322 295.904 196.145 297.191 cv
196.081 296.722 196.036 296.246 196.036 295.758 cv
196.036 295.42 196.052 295.086 196.083 294.757 cv
cp
206.444 314.667 mo
205.496 314.667 203.761 313.726 202.038 311.932 cv
201.853 311.74 201.669 311.538 201.486 311.326 cv
201.472 311.31 201.458 311.294 201.444 311.277 cv
201.274 311.08 201.105 310.873 200.938 310.658 cv
200.907 310.619 200.876 310.577 200.846 310.537 cv
200.695 310.339 200.545 310.136 200.398 309.925 cv
200.349 309.855 200.302 309.782 200.254 309.71 cv
200.124 309.519 199.996 309.324 199.871 309.122 cv
199.806 309.018 199.744 308.908 199.681 308.801 cv
199.574 308.62 199.467 308.438 199.364 308.249 cv
199.285 308.104 199.211 307.952 199.135 307.803 cv
199.051 307.638 198.965 307.475 198.885 307.304 cv
198.792 307.105 198.705 306.896 198.617 306.69 cv
198.559 306.555 198.499 306.426 198.444 306.288 cv
198.304 305.936 198.171 305.575 198.048 305.202 cv
198.034 305.202 198.026 305.209 198.011 305.209 cv
196.444 305.209 196.053 304.991 194.95 300.796 cv
194.524 299.168 195.202 298.012 196.409 298.012 cv
196.638 298.012 196.858 298.058 197.072 298.125 cv
197.072 298.124 197.072 298.123 197.072 298.122 cv
197.072 298.124 197.073 298.124 197.074 298.126 cv
203.4 298.126 212.102 292.999 212.102 292.999 cv
213.077 297.108 215.756 298.084 215.814 298.124 cv
215.814 298.125 215.814 298.125 215.814 298.126 cv
216.028 298.058 216.249 298.012 216.478 298.012 cv
217.686 298.012 218.364 299.168 217.937 300.796 cv
216.834 304.991 216.444 305.209 214.877 305.209 cv
214.863 305.209 214.855 305.203 214.842 305.203 cv
214.72 305.576 214.587 305.938 214.447 306.29 cv
214.427 306.338 214.405 306.384 214.385 306.432 cv
213.48 307.85 211.628 308.066 209.896 308.066 cv
209.635 308.066 li
209.336 307.628 208.834 307.341 208.264 307.341 cv
207.054 307.341 li
206.137 307.341 205.395 308.083 205.395 308.999 cv
205.395 309.916 206.137 310.658 207.054 310.658 cv
208.264 310.658 li
208.911 310.658 209.465 310.284 209.739 309.744 cv
209.896 309.744 li
210.528 309.744 211.664 309.741 212.827 309.419 cv
212.759 309.523 212.693 309.628 212.624 309.729 cv
212.578 309.797 212.533 309.867 212.487 309.933 cv
212.337 310.148 212.184 310.355 212.03 310.556 cv
212.001 310.594 211.973 310.632 211.944 310.669 cv
211.774 310.887 211.602 311.097 211.429 311.297 cv
211.417 311.311 211.405 311.326 211.393 311.34 cv
211.208 311.553 211.022 311.757 210.835 311.95 cv
209.118 313.732 207.39 314.667 206.444 314.667 cv
cp
206.444 316.344 mo
208.082 316.344 210.592 314.869 212.801 312.258 cv
224.144 314.033 li
224.144 314.033 224.14 284.833 207.822 283.203 cv
207.39 283.154 206.952 283.124 206.507 283.124 cv
206.485 283.124 206.463 283.127 206.441 283.127 cv
206.421 283.127 206.402 283.124 206.381 283.124 cv
188.617 283.124 188.617 314.033 188.617 314.033 cv
200.075 312.241 li
202.287 314.862 204.803 316.344 206.444 316.344 cv
cp
f
265.955 336.086 mo
265.955 333.896 li
265.955 327.841 261.966 322.735 256.478 321.017 cv
255.545 320.724 254.573 320.519 253.565 320.435 cv
253.565 320.435 li
250.439 325.348 li
244.971 333.942 li
244.952 332.643 244.897 331.554 244.822 330.629 cv
244.717 329.336 244.575 328.372 244.435 327.682 cv
244.422 327.62 244.41 327.568 244.397 327.51 cv
244.38 327.43 244.363 327.346 244.346 327.274 cv
244.301 327.084 244.259 326.928 244.218 326.788 cv
244.074 326.291 243.966 326.095 243.966 326.095 cv
246.388 321.363 li
242.276 321.363 li
238.164 321.363 li
240.586 326.095 li
240.586 326.095 240.492 326.268 240.363 326.694 cv
240.334 326.787 240.304 326.894 240.273 327.013 cv
240.236 327.155 240.197 327.316 240.158 327.499 cv
240.114 327.697 240.071 327.912 240.027 328.163 cv
239.878 329.028 239.734 330.215 239.65 331.816 cv
239.617 332.456 239.593 333.163 239.581 333.942 cv
230.984 320.429 li
229.933 320.507 228.922 320.717 227.952 321.021 cv
226.65 321.428 225.433 322.024 224.332 322.779 cv
223.966 323.03 223.612 323.299 223.273 323.584 cv
221.915 324.725 220.786 326.129 219.966 327.719 cv
219.584 328.46 219.269 329.24 219.028 330.052 cv
218.667 331.27 218.473 332.56 218.473 333.896 cv
218.473 338.459 li
218.473 338.459 li
218.473 339.99 219.559 341.267 221.002 341.563 cv
221.209 341.605 221.422 341.627 221.641 341.627 cv
242.214 341.627 li
262.787 341.627 li
262.787 341.627 li
263.065 341.627 263.333 341.588 263.588 341.518 cv
263.843 341.447 264.085 341.345 264.312 341.22 cv
264.425 341.157 264.536 341.094 264.64 341.018 cv
265.037 340.73 265.366 340.354 265.595 339.918 cv
265.825 339.482 265.955 338.986 265.955 338.459 cv
265.955 338.459 265.955 338.458 265.955 338.458 cv
265.955 336.086 li
cp
f
288.868 314.867 mo
278.933 326.385 li
278.109 326.385 li
277.286 326.385 li
267.346 314.861 li
263.747 314.987 260.507 316.518 258.156 318.92 cv
264.2 321.251 268.484 327.156 268.484 333.896 cv
268.484 336.086 li
278.047 336.086 li
298.62 336.086 li
300.37 336.086 301.788 334.667 301.788 332.917 cv
301.788 328.355 li
301.788 321.091 296.054 315.182 288.868 314.867 cv
cp
f
226.269 318.922 mo
224.111 316.712 221.211 315.23 217.964 314.905 cv
208.519 329.749 li
206.381 329.749 li
204.369 329.749 li
194.92 314.899 li
188.035 315.525 182.64 321.307 182.64 328.355 cv
182.64 332.917 li
182.64 334.667 184.058 336.086 185.808 336.086 cv
206.381 336.086 li
215.944 336.086 li
215.944 333.896 li
215.944 327.136 220.221 321.247 226.269 318.922 cv
cp
f
231.591 304.218 mo
231.618 304.184 231.659 304.13 231.811 304.13 cv
232.122 304.13 232.39 304.137 232.654 304.144 cv
232.993 304.153 li
233.404 305.493 233.548 307.933 233.548 307.933 cv
233.548 307.933 233.958 307.088 234.224 305.586 cv
234.463 304.231 233.888 302.842 233.773 299.519 cv
234.012 297.856 234.415 296.556 234.97 295.541 cv
237.303 292.714 239.453 296.735 242.339 296.735 cv
245.085 296.735 247.165 293.091 249.372 295.18 cv
250.12 296.374 250.627 298.013 250.871 300.246 cv
250.706 303.053 250.232 304.334 250.453 305.586 cv
250.719 307.088 251.128 307.504 251.128 307.933 cv
251.128 308.066 251.274 305.521 251.693 304.147 cv
251.981 304.14 li
252.184 304.135 252.384 304.13 252.617 304.13 cv
252.769 304.13 252.81 304.183 252.837 304.218 cv
252.996 304.424 253.068 304.97 252.871 305.723 cv
252.04 308.883 251.639 308.877 251.114 308.882 cv
250.389 308.871 li
250.132 309.7 li
250.11 309.776 250.089 309.853 250.064 309.926 cv
250.021 310.123 li
250.005 310.294 249.99 310.445 249.974 310.589 cv
249.092 312.094 247.196 312.318 245.426 312.318 cv
245.165 312.318 li
244.866 311.88 244.364 311.592 243.793 311.592 cv
242.583 311.592 li
241.667 311.592 240.924 312.335 240.924 313.251 cv
240.924 314.167 241.667 314.91 242.583 314.91 cv
243.793 314.91 li
244.44 314.91 244.995 314.536 245.268 313.995 cv
245.426 313.995 li
246.131 313.995 247.464 313.991 248.762 313.544 cv
247.539 315.151 245.548 317.382 244.7 317.711 cv
244.69 317.714 244.438 317.795 243.427 317.795 cv
242.816 317.795 242.267 317.766 242.259 317.765 cv
242.214 317.763 li
242.17 317.765 li
242.162 317.766 241.612 317.795 241.001 317.795 cv
239.989 317.795 239.738 317.714 239.733 317.712 cv
238.56 317.257 235.219 313.193 234.711 312.126 cv
234.682 312.062 234.532 311.645 234.366 309.645 cv
234.301 308.863 li
233.243 308.884 li
232.803 308.884 232.387 308.884 231.557 305.724 cv
231.36 304.97 231.432 304.424 231.591 304.218 cv
cp
232.763 310.535 mo
232.917 312.081 233.067 312.577 233.196 312.846 cv
233.736 313.981 237.311 318.572 239.126 319.277 cv
239.361 319.368 239.787 319.473 241.001 319.473 cv
241.556 319.473 242.064 319.45 242.214 319.442 cv
242.365 319.45 242.872 319.473 243.427 319.473 cv
244.641 319.473 245.066 319.368 245.302 319.277 cv
247.117 318.572 250.693 313.981 251.233 312.846 cv
251.342 312.616 251.468 312.22 251.6 311.137 cv
251.604 311.129 251.61 311.122 251.614 311.113 cv
251.604 311.108 li
251.625 310.934 251.646 310.746 251.667 310.535 cv
252.88 310.385 253.606 309.524 254.494 306.148 cv
254.808 304.949 254.688 303.872 254.165 303.193 cv
253.87 302.812 253.456 302.577 252.983 302.494 cv
253.196 301.95 253.303 301.185 253.334 300.326 cv
253.335 300.329 li
253.335 300.329 254.039 295.565 253.45 294.682 cv
253.184 294.28 252.589 293.933 251.954 293.661 cv
255.309 289.908 250.092 286.062 250.092 286.062 cv
250.092 288.762 245.768 288.841 245.768 288.841 cv
247.864 288.054 247.393 286.324 247.393 286.324 cv
247.393 286.324 246.003 287.714 239.136 288.212 cv
231.708 288.75 233.091 293.273 233.091 293.273 cv
232.167 293.554 230.94 294.049 230.52 294.682 cv
230.012 295.444 230.782 299.568 231.002 300.682 cv
231.129 301.388 231.315 302.016 231.562 302.483 cv
231.046 302.549 230.581 302.783 230.263 303.193 cv
229.74 303.872 229.62 304.949 229.934 306.149 cv
230.822 309.525 231.548 310.385 232.763 310.535 cv
cp
f
35.7304 296.625 mo
35.7574 296.591 35.7984 296.537 35.9499 296.537 cv
36.2612 296.537 36.529 296.544 36.7932 296.551 cv
37.1321 296.56 li
37.5433 297.9 37.6873 300.34 37.6873 300.34 cv
37.6873 300.34 38.0974 299.495 38.3628 297.993 cv
38.6025 296.638 38.027 295.249 37.9122 291.927 cv
38.151 290.263 38.5544 288.963 39.109 287.948 cv
41.4422 285.121 43.5921 289.142 46.4776 289.142 cv
49.2242 289.142 51.3044 285.498 53.511 287.587 cv
54.2589 288.781 54.7661 290.42 55.0096 292.653 cv
54.8454 295.46 54.3706 296.741 54.592 297.993 cv
54.8576 299.495 55.2675 299.911 55.2675 300.34 cv
55.2675 300.473 55.4135 297.928 55.8321 296.554 cv
56.1205 296.547 li
56.3228 296.542 56.5227 296.537 56.7561 296.537 cv
56.9081 296.537 56.9486 296.59 56.9757 296.625 cv
57.135 296.831 57.2075 297.377 57.01 298.13 cv
56.1791 301.29 55.7781 301.284 55.2531 301.289 cv
54.5278 301.278 li
54.2707 302.107 li
54.2489 302.183 54.228 302.26 54.2031 302.333 cv
54.1605 302.53 li
54.0114 304.125 53.8812 304.479 53.8574 304.532 cv
53.3492 305.6 50.0073 309.665 48.8389 310.118 cv
48.8287 310.121 48.5772 310.202 47.5665 310.202 cv
46.9554 310.202 46.4063 310.173 46.3981 310.172 cv
46.3534 310.17 li
46.3088 310.172 li
46.3006 310.173 45.7514 310.202 45.1395 310.202 cv
44.1284 310.202 43.8769 310.121 43.8721 310.119 cv
42.6991 309.664 39.3577 305.6 38.8498 304.532 cv
38.8212 304.469 38.6713 304.052 38.505 302.052 cv
38.4399 301.27 li
37.3825 301.29 li
36.9422 301.29 36.5265 301.29 35.6956 298.13 cv
35.4986 297.377 35.5711 296.831 35.7304 296.625 cv
cp
36.9017 302.942 mo
37.0561 304.488 37.206 304.984 37.335 305.253 cv
37.8748 306.388 41.4505 310.979 43.2651 311.684 cv
43.5002 311.775 43.9257 311.88 45.1395 311.88 cv
45.6953 311.88 46.2032 311.857 46.3534 311.849 cv
46.5037 311.857 47.0112 311.88 47.5665 311.88 cv
48.78 311.88 49.2055 311.775 49.441 311.684 cv
51.2556 310.979 54.8317 306.388 55.3723 305.253 cv
55.4997 304.984 55.6504 304.496 55.806 302.942 cv
57.0191 302.792 57.7452 301.931 58.6326 298.555 cv
58.9472 297.356 58.8272 296.279 58.3038 295.6 cv
58.0094 295.219 57.5956 294.984 57.1216 294.901 cv
57.335 294.356 57.442 293.592 57.4729 292.733 cv
57.4744 292.736 li
57.4744 292.736 58.1777 287.972 57.5895 287.089 cv
57.3228 286.687 56.7282 286.34 56.0934 286.068 cv
59.4484 282.315 53.3605 278.812 53.3605 278.812 cv
53.3605 281.512 49.9066 281.248 49.9066 281.248 cv
52.0035 280.461 51.5317 278.731 51.5317 278.731 cv
51.5317 278.731 50.1425 280.12 43.2754 280.618 cv
35.8474 281.157 37.2296 285.68 37.2296 285.68 cv
36.3064 285.961 35.0791 286.456 34.6592 287.089 cv
34.1512 287.851 34.9211 291.975 35.1411 293.089 cv
35.2678 293.794 35.454 294.423 35.7006 294.889 cv
35.1851 294.956 34.72 295.19 34.4022 295.6 cv
33.8789 296.279 33.7589 297.356 34.073 298.556 cv
34.9609 301.932 35.6874 302.792 36.9017 302.942 cv
cp
f
118.501 294.383 mo
118.73 294.383 118.95 294.428 119.163 294.496 cv
119.202 294.462 122.639 291.586 122.639 288.992 cv
122.639 288.992 124.342 291.732 129.516 293.346 cv
128.883 292.263 127.572 289.907 127.205 288.336 cv
127.205 288.336 130.578 292.602 135.154 294.387 cv
136.018 294.455 136.93 294.496 137.905 294.496 cv
138.12 294.429 138.34 294.383 138.57 294.383 cv
139.778 294.383 140.456 295.538 140.029 297.166 cv
139.891 297.691 139.764 298.153 139.645 298.561 cv
139.585 298.764 139.528 298.954 139.471 299.132 cv
139.133 300.195 138.845 300.798 138.508 301.14 cv
138.114 301.538 137.654 301.58 136.968 301.58 cv
136.955 301.58 136.947 301.574 136.934 301.573 cv
136.795 301.995 136.642 302.4 136.482 302.795 cv
136.362 302.984 134.926 305.788 134.926 305.788 cv
134.583 306.32 134.226 306.818 133.86 307.271 cv
131.865 309.744 129.654 311.037 128.535 311.037 cv
127.53 311.037 125.639 309.989 123.817 307.977 cv
123.615 307.754 123.413 307.518 123.213 307.271 cv
122.017 305.788 120.898 303.88 120.14 301.573 cv
120.126 301.573 120.117 301.58 120.103 301.58 cv
119.417 301.58 118.956 301.538 118.563 301.14 cv
118.226 300.798 117.938 300.195 117.6 299.132 cv
117.543 298.954 117.485 298.764 117.426 298.561 cv
117.306 298.153 117.18 297.691 117.042 297.166 cv
116.615 295.538 117.293 294.383 118.501 294.383 cv
cp
122.157 308.6 mo
124.372 311.228 126.892 312.715 128.535 312.715 cv
130.179 312.715 132.701 311.228 134.917 308.6 cv
136.814 308.313 139.355 307.646 140.91 306.089 cv
146.301 300.693 146.362 279.495 128.598 279.495 cv
128.598 279.501 li
128.556 279.501 128.515 279.495 128.472 279.495 cv
128.472 279.495 li
128.472 279.495 128.472 279.495 128.472 279.495 cv
110.709 279.495 110.77 300.693 116.16 306.089 cv
117.717 307.647 120.259 308.314 122.157 308.6 cv
cp
f
54.3697 310.146 mo
53.3999 311.393 li
52.4199 312.633 li
52.6348 312.803 54.6065 314.296 57.639 314.421 cv
61.7669 314.591 65.3645 317.171 67.2061 320.819 cv
68.0608 320.212 68.9764 319.685 69.9438 319.252 cv
67.5722 314.695 63.0048 311.479 57.7692 311.263 cv
55.7463 311.18 54.3833 310.156 54.3697 310.146 cv
cp
f
49.6183 332.454 mo
49.4868 326.966 48.5494 321.275 48.0938 318.795 cv
50.2683 314.547 li
46.1566 314.547 li
42.0448 314.547 li
44.2194 318.795 li
43.7638 321.275 42.8264 326.966 42.6949 332.454 cv
39.4009 332.454 li
25.6917 332.454 li
24.816 332.454 24.1036 331.741 24.1036 330.865 cv
24.1036 326.303 li
24.1036 319.999 28.9822 314.669 34.9785 314.421 cv
38.011 314.296 39.9827 312.803 40.1975 312.633 cv
38.2376 310.153 li
38.2246 310.163 36.8863 311.179 34.8482 311.263 cv
27.1809 311.58 20.943 318.327 20.943 326.303 cv
20.943 330.866 li
20.943 333.484 23.0733 335.614 25.6917 335.614 cv
39.4009 335.614 li
53.2166 335.614 li
60.4081 335.614 li
60.4081 333.896 li
60.4081 333.41 60.4324 332.93 60.4757 332.454 cv
53.2166 332.454 li
49.6183 332.454 li
cp
f
140.148 311.263 mo
138.125 311.18 136.762 310.156 136.759 310.153 cv
134.799 312.633 li
135.014 312.803 136.985 314.296 140.018 314.421 cv
146.014 314.669 150.893 319.999 150.893 326.303 cv
150.893 330.866 li
150.893 331.741 150.18 332.454 149.305 332.454 cv
135.595 332.454 li
131.997 332.454 li
131.866 326.966 130.928 321.275 130.473 318.795 cv
132.647 314.547 li
128.535 314.547 li
124.424 314.547 li
126.598 318.795 li
126.143 321.275 125.205 326.966 125.074 332.454 cv
121.78 332.454 li
112.88 332.454 li
112.924 332.93 112.948 333.411 112.948 333.896 cv
112.948 335.614 li
121.78 335.614 li
135.595 335.614 li
149.305 335.614 li
151.923 335.614 154.053 333.484 154.053 330.865 cv
154.053 326.303 li
154.053 318.327 147.815 311.58 140.148 311.263 cv
cp
f
117.357 314.421 mo
120.39 314.296 122.361 312.803 122.576 312.633 cv
120.616 310.153 li
120.603 310.163 119.265 311.179 117.227 311.263 cv
111.74 311.49 106.987 315.01 104.726 319.916 cv
105.667 320.448 106.548 321.073 107.359 321.776 cv
109.023 317.63 112.877 314.606 117.357 314.421 cv
cp
f
110.419 333.896 mo
110.419 331.682 109.887 329.594 108.943 327.75 cv
106.866 323.696 102.798 320.83 98.0291 320.435 cv
89.435 333.942 li
89.3457 327.712 88.43 326.095 88.43 326.095 cv
90.852 321.363 li
86.7402 321.363 li
82.6284 321.363 li
85.0505 326.095 li
85.0505 326.095 84.8215 326.499 84.5815 327.682 cv
84.5215 327.978 84.4608 328.322 84.4027 328.721 cv
84.3157 329.32 84.2348 330.041 84.1714 330.904 cv
84.108 331.768 84.0622 332.774 84.0455 333.942 cv
75.4475 320.429 li
71.0765 320.752 67.2822 323.148 65.0511 326.64 cv
63.7125 328.735 62.9366 331.224 62.9366 333.896 cv
62.9366 338.459 li
62.9367 338.459 li
62.9367 339.115 63.1361 339.725 63.4777 340.23 cv
63.7055 340.567 63.9964 340.858 64.3335 341.086 cv
64.8392 341.428 65.4488 341.627 66.105 341.627 cv
86.678 341.627 li
107.251 341.627 li
107.907 341.627 108.517 341.428 109.022 341.086 cv
109.359 340.858 109.65 340.567 109.878 340.23 cv
110.22 339.725 110.419 339.115 110.419 338.459 cv
110.419 338.459 110.419 338.458 110.419 338.458 cv
110.419 333.896 li
cp
f
76.0554 304.218 mo
76.0824 304.184 76.1233 304.13 76.2748 304.13 cv
76.5861 304.13 76.8539 304.137 77.1181 304.144 cv
77.5574 304.156 li
77.9683 305.226 78.1783 306.914 78.1783 306.914 cv
78.1783 306.914 78.4224 307.088 78.6878 305.586 cv
78.9275 304.231 78.3519 302.842 78.2371 299.52 cv
78.4759 297.856 78.8794 296.556 79.4339 295.541 cv
81.7672 292.714 83.917 296.735 86.8025 296.735 cv
89.5492 296.735 91.6294 293.091 93.8359 295.18 cv
94.5839 296.374 95.0911 298.013 95.3346 300.246 cv
95.1703 303.053 94.6955 304.334 94.9169 305.586 cv
95.1825 307.088 95.6892 306.44 95.6892 306.869 cv
95.6892 306.996 95.7731 305.245 96.1153 304.148 cv
96.4455 304.14 li
96.6478 304.135 96.8477 304.13 97.0811 304.13 cv
97.233 304.13 97.2735 304.183 97.3006 304.218 cv
97.4599 304.424 97.5324 304.97 97.335 305.723 cv
96.5041 308.883 96.1031 308.877 95.5781 308.882 cv
94.8528 308.871 li
94.5956 309.7 li
94.5739 309.776 94.553 309.853 94.528 309.926 cv
94.4854 310.123 li
94.3364 311.718 94.2062 312.072 94.1824 312.126 cv
93.6742 313.193 90.3323 317.258 89.1639 317.711 cv
89.1536 317.714 88.9022 317.795 87.8914 317.795 cv
87.2804 317.795 86.7312 317.766 86.7231 317.765 cv
86.6784 317.763 li
86.6337 317.765 li
86.6256 317.766 86.0764 317.795 85.4645 317.795 cv
84.4534 317.795 84.2019 317.714 84.197 317.712 cv
83.0241 317.257 79.6826 313.193 79.1748 312.126 cv
79.1462 312.062 78.9963 311.645 78.8299 309.645 cv
78.7648 308.863 li
77.7074 308.884 li
77.2671 308.884 76.8515 308.884 76.0205 305.724 cv
75.8236 304.97 75.8961 304.424 76.0554 304.218 cv
cp
77.2266 310.535 mo
77.3811 312.081 77.5309 312.577 77.6599 312.846 cv
78.1997 313.981 81.7754 318.572 83.5901 319.277 cv
83.8251 319.368 84.2506 319.473 85.4645 319.473 cv
86.0202 319.473 86.5281 319.45 86.6784 319.442 cv
86.8287 319.45 87.3361 319.473 87.8914 319.473 cv
89.1049 319.473 89.5304 319.368 89.7659 319.277 cv
91.5806 318.572 95.1567 313.981 95.6973 312.846 cv
95.8246 312.578 95.9753 312.089 96.131 310.535 cv
97.344 310.385 98.0701 309.524 98.9576 306.148 cv
99.2721 304.949 99.1522 303.872 98.6288 303.193 cv
98.3343 302.812 97.9205 302.577 97.4465 302.494 cv
97.6599 301.95 97.767 301.185 97.7978 300.326 cv
97.7993 300.329 li
97.7993 300.329 98.5027 295.565 97.9145 294.682 cv
97.6478 294.28 97.0532 293.933 96.4184 293.661 cv
96.4184 293.661 li
99.7733 289.908 94.5563 286.062 94.5563 286.062 cv
94.5563 288.762 90.2316 288.841 90.2316 288.841 cv
92.3284 288.054 91.8566 286.324 91.8566 286.324 cv
91.8566 286.324 90.4675 287.714 83.6004 288.212 cv
76.1723 288.75 77.5545 293.273 77.5545 293.273 cv
76.6313 293.554 75.4041 294.049 74.9841 294.682 cv
74.4762 295.444 75.2461 299.568 75.466 300.682 cv
75.5927 301.388 75.7789 302.016 76.0255 302.483 cv
75.51 302.549 75.045 302.783 74.7272 303.193 cv
74.2038 303.872 74.0838 304.949 74.3979 306.149 cv
75.2858 309.525 76.0123 310.385 77.2266 310.535 cv
cp
f
394.525 302.638 mo
394.552 302.603 394.593 302.55 394.745 302.55 cv
395.056 302.55 395.324 302.557 395.588 302.564 cv
395.927 302.573 li
396.338 303.912 396.482 306.353 396.482 306.353 cv
396.482 306.353 396.892 305.508 397.158 304.006 cv
397.397 302.65 396.822 301.262 396.707 297.939 cv
396.946 296.276 397.349 294.976 397.904 293.961 cv
400.237 291.133 402.387 295.155 405.272 295.155 cv
408.019 295.155 410.099 291.511 412.306 293.6 cv
413.054 294.794 413.561 296.433 413.804 298.665 cv
413.64 301.473 413.165 302.753 413.387 304.006 cv
413.652 305.508 414.062 305.923 414.062 306.353 cv
414.062 306.486 414.208 303.941 414.627 302.567 cv
414.915 302.56 li
415.118 302.555 415.318 302.55 415.551 302.55 cv
415.703 302.55 415.743 302.603 415.771 302.638 cv
415.93 302.844 416.002 303.39 415.805 304.142 cv
414.974 307.302 414.573 307.297 414.048 307.302 cv
413.323 307.291 li
413.066 308.12 li
413.044 308.196 413.023 308.273 412.998 308.346 cv
412.955 308.543 li
412.806 310.138 412.676 310.492 412.652 310.545 cv
412.144 311.612 408.802 315.678 407.634 316.13 cv
407.624 316.134 407.372 316.215 406.361 316.215 cv
405.75 316.215 405.201 316.185 405.193 316.184 cv
405.148 316.183 li
405.104 316.184 li
405.096 316.185 404.546 316.215 403.934 316.215 cv
402.923 316.215 402.672 316.134 402.667 316.132 cv
401.494 315.677 398.153 311.612 397.645 310.545 cv
397.616 310.482 397.466 310.064 397.3 308.065 cv
397.235 307.283 li
396.177 307.303 li
395.737 307.303 395.321 307.303 394.491 304.143 cv
394.293 303.39 394.366 302.844 394.525 302.638 cv
cp
395.697 308.954 mo
395.851 310.501 396.001 310.996 396.13 311.266 cv
396.67 312.4 400.245 316.991 402.06 317.697 cv
402.295 317.787 402.721 317.892 403.934 317.892 cv
404.49 317.892 404.998 317.869 405.148 317.862 cv
405.299 317.869 405.806 317.892 406.361 317.892 cv
407.575 317.892 408 317.787 408.236 317.697 cv
410.05 316.992 413.627 312.4 414.167 311.266 cv
414.295 310.997 414.445 310.509 414.601 308.954 cv
415.814 308.805 416.54 307.944 417.428 304.568 cv
417.742 303.368 417.622 302.291 417.099 301.613 cv
416.804 301.231 416.39 300.997 415.916 300.914 cv
416.13 300.369 416.237 299.605 416.268 298.746 cv
416.269 298.749 li
416.269 298.749 416.973 293.984 416.384 293.101 cv
416.118 292.7 415.523 292.353 414.888 292.08 cv
418.243 288.328 412.155 284.825 412.155 284.825 cv
412.155 287.525 408.702 287.26 408.702 287.26 cv
410.798 286.474 410.327 284.744 410.327 284.744 cv
410.327 284.744 408.937 286.133 402.07 286.631 cv
394.642 287.17 396.024 291.692 396.024 291.692 cv
395.101 291.973 393.874 292.469 393.454 293.101 cv
392.946 293.864 393.716 297.988 393.936 299.102 cv
394.063 299.807 394.249 300.436 394.496 300.902 cv
393.98 300.969 393.515 301.202 393.197 301.613 cv
392.674 302.291 392.554 303.368 392.868 304.568 cv
393.756 307.945 394.482 308.805 395.697 308.954 cv
cp
f
358.236 304.106 mo
358.128 303.924 358.02 303.741 357.917 303.551 cv
357.838 303.406 357.764 303.255 357.689 303.106 cv
357.605 302.94 357.519 302.777 357.438 302.606 cv
357.345 302.407 357.258 302.199 357.17 301.992 cv
357.113 301.857 357.052 301.728 356.997 301.59 cv
356.857 301.238 356.724 300.877 356.602 300.504 cv
356.587 300.505 356.579 300.511 356.564 300.511 cv
354.997 300.511 354.606 300.293 353.503 296.098 cv
353.077 294.47 353.755 293.314 354.963 293.314 cv
355.191 293.314 355.411 293.36 355.625 293.427 cv
355.625 293.426 355.625 293.425 355.625 293.424 cv
355.625 293.426 355.627 293.427 355.627 293.428 cv
361.953 293.428 370.655 288.301 370.655 288.301 cv
371.63 292.41 374.309 293.386 374.367 293.426 cv
374.367 293.427 374.367 293.427 374.367 293.428 cv
374.582 293.36 374.802 293.314 375.031 293.314 cv
376.239 293.314 376.917 294.47 376.491 296.098 cv
375.388 300.293 374.997 300.511 373.43 300.511 cv
373.416 300.511 373.408 300.505 373.396 300.505 cv
373.273 300.878 373.14 301.24 373 301.592 cv
372.98 301.641 372.958 301.686 372.939 301.734 cv
372.033 303.152 370.181 303.369 368.449 303.369 cv
368.188 303.369 li
367.89 302.931 367.387 302.643 366.817 302.643 cv
365.607 302.643 li
364.691 302.643 363.948 303.385 363.948 304.302 cv
363.948 305.218 364.691 305.961 365.607 305.961 cv
366.817 305.961 li
367.464 305.961 368.018 305.586 368.292 305.046 cv
368.449 305.046 li
369.081 305.046 370.217 305.043 371.38 304.722 cv
371.312 304.825 371.246 304.931 371.177 305.032 cv
371.132 305.099 371.086 305.169 371.04 305.236 cv
370.89 305.451 370.737 305.658 370.583 305.858 cv
370.555 305.896 370.526 305.934 370.497 305.971 cv
370.327 306.189 370.156 306.399 369.983 306.599 cv
369.97 306.613 369.958 306.628 369.946 306.642 cv
369.761 306.855 369.575 307.059 369.388 307.253 cv
367.671 309.034 365.943 309.969 364.997 309.969 cv
364.049 309.969 362.314 309.028 360.591 307.235 cv
360.407 307.043 360.222 306.84 360.039 306.628 cv
360.025 306.612 360.011 306.596 359.998 306.58 cv
359.827 306.382 359.658 306.175 359.49 305.96 cv
359.46 305.921 359.43 305.881 359.4 305.841 cv
359.249 305.643 359.098 305.438 358.95 305.226 cv
358.903 305.158 358.856 305.086 358.809 305.016 cv
358.678 304.823 358.549 304.627 358.423 304.423 cv
358.36 304.32 358.298 304.212 358.236 304.106 cv
cp
354.637 290.059 mo
354.664 289.767 354.709 289.481 354.761 289.197 cv
354.767 289.16 354.77 289.121 354.777 289.084 cv
354.826 288.831 354.891 288.584 354.957 288.337 cv
354.975 288.273 354.986 288.205 355.005 288.141 cv
355.077 287.895 355.164 287.655 355.253 287.417 cv
355.276 287.357 355.293 287.294 355.316 287.234 cv
355.784 286.052 356.461 284.976 357.3 284.049 cv
357.303 284.045 357.306 284.041 357.309 284.038 cv
357.309 284.038 357.309 284.038 357.309 284.038 cv
357.309 284.037 357.309 284.037 357.31 284.037 cv
357.591 283.727 357.887 283.433 358.203 283.159 cv
358.216 283.147 358.228 283.135 358.241 283.124 cv
358.563 282.848 358.898 282.586 359.252 282.349 cv
359.252 282.349 359.252 282.349 359.252 282.349 cv
359.252 282.349 359.252 282.349 359.252 282.349 cv
359.287 282.326 359.324 282.306 359.358 282.284 cv
359.534 282.17 359.71 282.058 359.893 281.954 cv
359.94 281.927 359.989 281.905 360.036 281.879 cv
360.209 281.784 360.382 281.69 360.56 281.605 cv
360.631 281.571 360.705 281.544 360.776 281.512 cv
360.935 281.44 361.092 281.368 361.255 281.304 cv
361.35 281.267 361.448 281.237 361.544 281.203 cv
361.687 281.152 361.829 281.098 361.974 281.053 cv
362.105 281.012 362.24 280.981 362.373 280.946 cv
362.488 280.915 362.601 280.88 362.717 280.853 cv
362.896 280.812 363.079 280.781 363.262 280.75 cv
363.335 280.737 363.406 280.719 363.48 280.708 cv
363.605 280.689 363.732 280.68 363.858 280.665 cv
364.253 280.62 364.653 280.589 365.06 280.589 cv
365.294 280.589 365.527 280.597 365.757 280.613 cv
367.368 280.72 368.878 281.196 370.209 281.95 cv
370.209 281.95 370.21 281.951 370.21 281.951 cv
370.214 281.953 370.218 281.955 370.222 281.957 cv
370.222 281.957 370.222 281.957 370.222 281.957 cv
370.55 282.143 370.865 282.349 371.17 282.569 cv
371.179 282.575 371.188 282.582 371.197 282.589 cv
371.499 282.808 371.788 283.043 372.064 283.293 cv
372.064 283.293 li
372.092 283.318 372.116 283.346 372.144 283.372 cv
372.905 284.074 373.567 284.883 374.095 285.78 cv
374.111 285.806 374.122 285.835 374.138 285.861 cv
374.302 286.146 374.457 286.438 374.595 286.739 cv
374.626 286.809 374.649 286.883 374.679 286.953 cv
374.792 287.216 374.903 287.479 374.995 287.753 cv
375.036 287.876 375.063 288.006 375.099 288.132 cv
375.166 288.358 375.237 288.582 375.288 288.815 cv
375.311 288.92 375.321 289.03 375.341 289.137 cv
375.458 289.762 375.531 290.402 375.531 291.061 cv
375.531 291.548 375.486 292.024 375.422 292.493 cv
375.212 290.967 374.669 289.549 373.877 288.305 cv
373.426 287.598 372.891 286.951 372.289 286.373 cv
372.257 286.342 372.226 286.311 372.193 286.281 cv
371.603 285.727 370.948 285.244 370.242 284.838 cv
370.178 284.801 370.113 284.767 370.048 284.732 cv
369.745 284.566 369.433 284.415 369.113 284.28 cv
369.054 284.255 368.997 284.227 368.938 284.204 cv
368.57 284.056 368.192 283.93 367.805 283.824 cv
367.73 283.804 367.653 283.789 367.578 283.771 cv
367.262 283.692 366.94 283.629 366.614 283.581 cv
366.505 283.564 366.396 283.548 366.286 283.535 cv
365.883 283.487 365.476 283.455 365.06 283.455 cv
364.762 283.455 364.468 283.472 364.176 283.496 cv
364.09 283.503 364.004 283.514 363.919 283.523 cv
363.704 283.546 363.492 283.576 363.282 283.612 cv
363.198 283.626 363.114 283.639 363.031 283.656 cv
362.751 283.711 362.474 283.774 362.203 283.851 cv
362.189 283.854 362.176 283.86 362.162 283.864 cv
361.904 283.938 361.651 284.024 361.402 284.117 cv
361.319 284.148 361.237 284.182 361.155 284.215 cv
360.969 284.29 360.786 284.371 360.605 284.456 cv
360.526 284.494 360.445 284.53 360.367 284.57 cv
360.124 284.692 359.885 284.821 359.653 284.961 cv
359.62 284.981 359.589 285.004 359.556 285.025 cv
359.355 285.149 359.159 285.281 358.968 285.419 cv
358.889 285.476 358.812 285.535 358.734 285.594 cv
358.587 285.706 358.443 285.823 358.302 285.943 cv
358.228 286.005 358.154 286.067 358.082 286.132 cv
357.89 286.304 357.703 286.482 357.524 286.668 cv
357.479 286.715 357.437 286.765 357.392 286.813 cv
357.248 286.97 357.107 287.13 356.972 287.295 cv
356.906 287.376 356.842 287.459 356.778 287.543 cv
356.67 287.683 356.566 287.826 356.465 287.972 cv
356.406 288.056 356.347 288.14 356.291 288.226 cv
356.149 288.444 356.013 288.667 355.887 288.896 cv
355.887 288.897 355.886 288.898 355.885 288.899 cv
355.286 289.993 354.875 291.206 354.698 292.493 cv
354.634 292.024 354.589 291.548 354.589 291.061 cv
354.589 290.723 354.605 290.388 354.637 290.059 cv
cp
364.997 311.646 mo
366.635 311.646 369.145 310.171 371.354 307.561 cv
382.698 309.335 li
382.698 309.335 382.693 280.135 366.375 278.505 cv
365.943 278.457 365.505 278.426 365.06 278.426 cv
365.038 278.426 365.017 278.429 364.994 278.43 cv
364.974 278.429 364.955 278.426 364.934 278.426 cv
347.17 278.426 347.171 309.335 347.171 309.335 cv
358.628 307.543 li
360.84 310.164 363.356 311.646 364.997 311.646 cv
cp
f
456.823 310.066 mo
454.799 309.983 453.436 308.959 453.433 308.957 cv
451.473 311.436 li
451.688 311.606 453.659 313.099 456.692 313.224 cv
462.688 313.472 467.567 318.802 467.567 325.107 cv
467.567 329.669 li
467.567 330.545 466.854 331.257 465.979 331.257 cv
452.27 331.257 li
448.671 331.257 li
448.54 325.767 447.602 320.077 447.147 317.599 cv
449.321 313.351 li
445.21 313.351 li
441.098 313.351 li
443.272 317.599 li
442.817 320.077 441.879 325.767 441.748 331.257 cv
438.454 331.257 li
430.428 331.257 li
430.109 326.674 427.744 322.588 424.28 320.033 cv
426.054 316.172 429.753 313.401 434.032 313.224 cv
437.064 313.099 439.035 311.606 439.251 311.436 cv
437.291 308.957 li
437.278 308.967 435.939 309.982 433.901 310.066 cv
428.52 310.289 423.846 313.681 421.535 318.441 cv
419.991 317.759 418.316 317.348 416.565 317.276 cv
414.541 317.192 413.178 316.169 413.165 316.158 cv
411.215 318.646 li
411.43 318.816 413.401 320.308 416.434 320.434 cv
417.853 320.492 419.206 320.844 420.451 321.418 cv
421.49 321.897 422.452 322.53 423.305 323.299 cv
425.502 325.278 426.983 328.111 427.258 331.257 cv
427.288 331.607 427.309 331.959 427.309 332.316 cv
427.309 334.418 li
427.309 336.878 li
427.309 337.754 426.596 338.466 425.721 338.466 cv
412.012 338.466 li
408.413 338.466 li
408.282 332.977 407.344 327.286 406.889 324.808 cv
409.063 320.56 li
404.951 320.56 li
400.84 320.56 li
403.014 324.808 li
402.559 327.286 401.621 332.977 401.49 338.466 cv
398.196 338.466 li
384.487 338.466 li
383.611 338.466 382.899 337.754 382.899 336.878 cv
382.899 334.418 li
382.899 332.316 li
382.899 331.959 382.919 331.607 382.949 331.257 cv
383.228 328.074 384.742 325.215 386.981 323.233 cv
387.836 322.476 388.798 321.853 389.836 321.384 cv
391.059 320.832 392.384 320.491 393.774 320.434 cv
396.806 320.308 398.777 318.816 398.992 318.646 cv
397.033 316.166 li
397.02 316.176 395.681 317.191 393.643 317.276 cv
391.919 317.347 390.269 317.746 388.745 318.408 cv
386.428 313.665 381.764 310.288 376.395 310.066 cv
374.371 309.983 373.009 308.959 373.005 308.957 cv
371.045 311.437 li
371.26 311.607 373.232 313.099 376.264 313.224 cv
380.526 313.401 384.212 316.15 385.995 319.985 cv
382.495 322.538 380.1 326.645 379.779 331.257 cv
371.842 331.257 li
368.244 331.257 li
368.112 325.767 367.175 320.077 366.719 317.599 cv
368.894 313.351 li
364.782 313.351 li
360.67 313.351 li
362.845 317.599 li
362.389 320.077 361.452 325.767 361.32 331.257 cv
358.026 331.257 li
344.317 331.257 li
343.441 331.257 342.729 330.545 342.729 329.669 cv
342.729 325.107 li
342.729 318.803 347.608 313.472 353.604 313.224 cv
356.636 313.099 358.608 311.607 358.823 311.437 cv
356.873 308.949 li
356.859 308.959 355.497 309.983 353.473 310.066 cv
345.806 310.384 339.568 317.13 339.568 325.107 cv
339.568 329.669 li
339.568 332.287 341.699 334.418 344.317 334.418 cv
358.026 334.418 li
371.842 334.418 li
379.738 334.418 li
379.738 336.878 li
379.738 339.497 381.868 341.627 384.487 341.627 cv
398.196 341.627 li
412.012 341.627 li
425.721 341.627 li
428.339 341.627 430.469 339.497 430.469 336.878 cv
430.469 334.418 li
438.454 334.418 li
452.27 334.418 li
465.979 334.418 li
468.597 334.418 470.728 332.287 470.728 329.669 cv
470.728 325.107 li
470.728 317.13 464.49 310.383 456.823 310.066 cv
cp
f
435.112 293.186 mo
435.341 293.186 435.561 293.232 435.774 293.299 cv
435.813 293.266 439.251 290.39 439.251 287.795 cv
439.251 287.795 440.953 290.536 446.127 292.149 cv
445.494 291.067 444.183 288.711 443.816 287.139 cv
443.816 287.139 447.19 291.406 451.765 293.19 cv
452.629 293.259 453.541 293.299 454.517 293.3 cv
454.731 293.232 454.952 293.186 455.181 293.186 cv
456.389 293.186 457.067 294.342 456.64 295.97 cv
456.502 296.494 456.375 296.957 456.256 297.364 cv
456.197 297.568 456.139 297.758 456.082 297.935 cv
455.744 298.998 455.456 299.602 455.119 299.943 cv
454.725 300.341 454.265 300.383 453.579 300.383 cv
453.566 300.383 453.558 300.377 453.545 300.377 cv
453.406 300.798 453.254 301.204 453.093 301.599 cv
452.973 301.788 451.537 304.591 451.537 304.591 cv
451.194 305.123 450.837 305.621 450.471 306.075 cv
448.476 308.547 446.265 309.841 445.147 309.841 cv
444.142 309.841 442.25 308.793 440.428 306.781 cv
440.226 306.557 440.024 306.322 439.825 306.074 cv
438.628 304.591 437.509 302.683 436.751 300.376 cv
436.737 300.377 436.728 300.383 436.714 300.383 cv
436.028 300.383 435.568 300.341 435.174 299.943 cv
434.837 299.602 434.549 298.998 434.211 297.935 cv
434.154 297.758 434.097 297.568 434.037 297.364 cv
433.918 296.957 433.791 296.494 433.653 295.97 cv
433.226 294.342 433.904 293.186 435.112 293.186 cv
cp
438.768 307.404 mo
440.983 310.032 443.503 311.518 445.147 311.518 cv
446.791 311.518 449.313 310.032 451.528 307.403 cv
453.425 307.116 455.966 306.449 457.522 304.892 cv
462.912 299.497 462.973 278.298 445.21 278.298 cv
445.21 278.304 li
445.167 278.304 445.126 278.298 445.084 278.298 cv
445.084 278.298 li
445.084 278.298 445.083 278.298 445.083 278.298 cv
427.32 278.298 427.381 299.497 432.772 304.892 cv
434.328 306.45 436.871 307.117 438.768 307.404 cv
cp
f
355.569 179.231 mo
356.274 179.403 357.003 179.509 357.747 179.549 cv
358.863 179.61 360.011 179.52 361.157 179.279 cv
361.539 179.198 361.921 179.101 362.302 178.986 cv
363.824 178.529 365.323 177.798 366.718 176.789 cv
369.762 174.585 371.692 171.492 372.323 168.334 cv
372.416 168.485 372.509 168.645 372.604 168.826 cv
372.899 169.386 373.162 170.003 373.392 170.677 cv
373.735 171.687 374.004 172.826 374.193 174.097 cv
374.32 174.944 374.411 175.85 374.467 176.816 cv
374.495 177.299 374.514 177.797 374.524 178.31 cv
374.738 178.243 374.959 178.197 375.188 178.197 cv
375.943 178.197 376.491 178.648 376.691 179.384 cv
376.732 179.532 376.758 179.69 376.769 179.859 cv
376.78 180.027 376.776 180.206 376.756 180.394 cv
376.737 180.581 376.7 180.777 376.647 180.981 cv
375.544 185.176 375.154 185.394 373.586 185.394 cv
373.573 185.394 373.565 185.388 373.552 185.387 cv
373.299 186.156 373.007 186.881 372.684 187.56 cv
372.362 188.24 372.01 188.874 371.638 189.462 cv
371.267 190.049 370.877 190.591 370.478 191.085 cv
368.483 193.558 366.272 194.851 365.154 194.851 cv
364.148 194.851 362.257 193.803 360.435 191.791 cv
360.233 191.568 360.031 191.332 359.832 191.085 cv
358.635 189.602 357.516 187.694 356.758 185.387 cv
356.744 185.387 356.735 185.394 356.721 185.394 cv
355.154 185.394 354.763 185.176 353.66 180.981 cv
353.607 180.777 353.571 180.581 353.551 180.394 cv
353.531 180.206 353.527 180.027 353.538 179.859 cv
353.549 179.69 353.576 179.532 353.616 179.384 cv
353.69 179.113 353.816 178.885 353.978 178.699 cv
354.492 178.912 355.02 179.097 355.569 179.231 cv
cp
358.792 192.435 mo
361.003 195.051 363.515 196.529 365.154 196.529 cv
366.797 196.529 369.317 195.044 371.532 192.418 cv
383.162 194.122 li
379.095 190.428 380.361 182.459 380.361 178.383 cv
380.361 172.653 377.188 167.667 372.506 165.074 cv
372.506 165.074 li
370.326 163.867 367.821 163.175 365.153 163.175 cv
357.588 163.175 351.331 168.705 350.159 175.94 cv
350.03 176.737 349.945 177.55 349.945 178.383 cv
349.945 182.459 352.307 187.358 347.83 194.075 cv
358.792 192.435 li
cp
f
429.259 176.724 mo
429.286 176.689 429.326 176.636 429.478 176.636 cv
429.711 176.636 429.911 176.641 430.113 176.646 cv
431.051 176.669 li
431.058 175.817 li
431.075 173.896 431.232 172.31 431.507 170.977 cv
433.617 171.552 442.849 174.063 448.573 175.567 cv
448.574 175.654 448.58 175.73 448.581 175.817 cv
448.588 176.669 li
449.527 176.646 li
449.728 176.641 449.927 176.636 450.161 176.636 cv
450.312 176.636 450.353 176.689 450.38 176.724 cv
450.539 176.93 450.611 177.475 450.414 178.228 cv
449.629 181.215 448.228 181.354 448.196 181.358 cv
447.355 181.36 li
447.36 182.201 li
447.364 183.015 447.32 184.352 447.208 184.778 cv
446.775 186.422 443.792 189.439 442.426 190.13 cv
441.697 189.549 441.591 187.579 441.591 187.579 cv
439.835 187.627 li
438.079 187.579 li
438.079 187.579 437.973 189.57 437.234 190.14 cv
435.871 189.462 432.865 186.428 432.431 184.778 cv
432.319 184.352 432.275 183.015 432.279 182.201 cv
432.251 181.417 li
431.471 181.358 li
431.411 181.354 430.01 181.215 429.225 178.228 cv
429.027 177.476 429.1 176.93 429.259 176.724 cv
cp
430.606 182.843 mo
430.618 183.564 430.662 184.647 430.809 185.206 cv
430.867 185.429 430.962 185.666 431.071 185.909 cv
432.866 191.809 439.835 195.027 439.835 195.027 cv
439.835 195.027 446.924 191.748 448.64 185.747 cv
448.717 185.562 448.785 185.379 448.83 185.206 cv
448.977 184.647 449.021 183.564 449.033 182.843 cv
449.919 182.491 451.291 181.492 452.037 178.654 cv
452.351 177.455 452.232 176.378 451.708 175.699 cv
451.356 175.242 450.837 174.982 450.242 174.961 cv
450.231 174.623 450.209 174.307 450.19 173.986 cv
450.357 172.328 450.238 169.834 448.713 167.486 cv
448.325 166.728 447.851 166.084 447.305 165.529 cv
448.887 165.695 450.116 165.901 450.116 165.901 cv
444.054 158.661 431.061 161.246 431.061 161.246 cv
431.061 167.252 li
430.032 169.124 429.498 171.657 429.397 174.961 cv
428.802 174.982 428.283 175.242 427.931 175.699 cv
427.407 176.378 427.287 177.455 427.602 178.654 cv
428.348 181.492 429.72 182.492 430.606 182.843 cv
cp
f
437.584 185.293 mo
437.584 185.658 437.067 186.388 437.067 186.388 cv
438.361 186.388 439.224 185.986 439.698 185.412 cv
440.172 185.986 441.035 186.388 442.329 186.388 cv
442.329 186.388 441.812 185.658 441.812 185.293 cv
441.812 185.293 442.91 187.539 444.758 185.301 cv
444.758 185.301 443.962 185.186 442.896 184.301 cv
441.67 183.283 440.36 183.198 439.698 183.564 cv
439.037 183.198 437.727 183.283 436.5 184.301 cv
435.434 185.186 434.638 185.301 434.638 185.301 cv
436.486 187.539 437.584 185.293 437.584 185.293 cv
cp
f
386.215 200.577 mo
383.865 197.374 380.146 195.237 375.911 195.052 cv
365.977 206.57 li
365.153 206.57 li
364.329 206.57 li
354.389 195.046 li
347.147 195.3 341.349 201.235 341.349 208.54 cv
341.349 213.102 li
341.349 214.852 342.768 216.271 344.518 216.271 cv
365.091 216.271 li
376.558 216.271 li
376.558 214.877 li
376.558 208.382 380.522 202.846 386.215 200.577 cv
cp
f
451.108 195.079 mo
442.514 208.585 li
442.425 202.355 441.509 200.738 441.509 200.738 cv
443.931 196.007 li
439.819 196.007 li
435.708 196.007 li
438.13 200.738 li
438.13 200.738 437.214 202.355 437.125 208.585 cv
428.527 195.073 li
424.394 195.378 420.789 197.545 418.521 200.73 cv
424.023 203.09 427.833 208.538 427.833 214.877 cv
427.833 216.271 li
439.757 216.271 li
460.33 216.271 li
462.08 216.271 463.498 214.852 463.498 213.102 cv
463.498 208.54 li
463.498 201.455 458.045 195.653 451.108 195.079 cv
cp
f
423.003 206.475 mo
421.953 205.159 420.663 204.043 419.197 203.193 cv
417.366 202.132 415.262 201.487 413.016 201.389 cv
403.082 212.907 li
402.258 212.907 li
401.434 212.907 li
391.494 201.383 li
391.494 201.383 li
386.062 201.573 381.443 204.959 379.473 209.722 cv
378.817 211.31 378.454 213.05 378.454 214.877 cv
378.454 219.439 li
378.454 219.658 378.476 219.871 378.519 220.077 cv
378.582 220.387 378.69 220.68 378.837 220.949 cv
378.983 221.218 379.167 221.464 379.382 221.679 cv
379.956 222.253 380.748 222.607 381.623 222.607 cv
402.196 222.607 li
422.769 222.607 li
423.643 222.607 424.436 222.253 425.009 221.679 cv
425.224 221.464 425.408 221.218 425.554 220.949 cv
425.701 220.68 425.809 220.387 425.872 220.077 cv
425.915 219.871 425.937 219.658 425.937 219.439 cv
425.937 214.877 li
425.937 212.607 425.377 210.469 424.388 208.593 cv
423.992 207.842 423.527 207.134 423.003 206.475 cv
cp
f
392.224 184.534 mo
392.453 184.534 392.673 184.579 392.886 184.646 cv
392.886 184.646 li
392.925 184.613 394.588 183.051 395.916 178.823 cv
395.916 178.823 399.798 184.647 411.629 184.647 cv
411.843 184.58 412.064 184.534 412.293 184.534 cv
413.501 184.534 414.179 185.689 413.752 187.317 cv
413.201 189.415 412.827 190.518 412.396 191.097 cv
411.964 191.676 411.475 191.73 410.691 191.73 cv
410.678 191.73 410.67 191.724 410.657 191.724 cv
410.025 193.646 409.143 195.292 408.174 196.645 cv
407.398 197.728 406.567 198.624 405.765 199.326 cv
405.564 199.501 405.365 199.665 405.169 199.816 cv
404.777 200.118 404.398 200.371 404.041 200.574 cv
403.328 200.981 402.706 201.188 402.259 201.188 cv
400.472 201.188 395.884 197.876 393.863 191.724 cv
393.849 191.724 393.84 191.73 393.826 191.73 cv
393.042 191.73 392.553 191.676 392.121 191.097 cv
391.69 190.518 391.316 189.415 390.765 187.317 cv
390.338 185.689 391.016 184.534 392.224 184.534 cv
cp
392.645 193.293 mo
394.977 199.251 399.691 202.866 402.259 202.866 cv
404.827 202.866 409.543 199.251 411.875 193.292 cv
413.937 192.834 414.514 191.015 415.374 187.744 cv
415.747 186.321 415.552 185.018 414.824 184.074 cv
414.55 183.719 414.211 183.443 413.833 183.24 cv
413.833 182.608 413.833 181.45 413.833 181.283 cv
413.833 177.844 412.333 174.763 409.961 172.633 cv
409.886 172.566 409.814 172.495 409.738 172.43 cv
409.651 172.356 409.565 172.283 409.476 172.211 cv
409.446 172.187 409.413 172.166 409.383 172.142 cv
407.403 170.583 404.911 169.645 402.196 169.645 cv
398.937 169.645 395.995 170.988 393.883 173.146 cv
393.71 172.69 393.614 171.988 394.157 171.208 cv
394.157 171.208 391.159 171.834 392.276 174.439 cv
392.29 174.472 392.303 174.493 392.317 174.524 cv
390.172 174.385 390.013 176.954 390.013 176.954 cv
390.599 176.402 391.201 176.311 391.662 176.36 cv
390.961 177.857 390.558 179.521 390.558 181.283 cv
390.558 181.647 390.558 182.36 390.558 183.312 cv
390.232 183.509 389.937 183.759 389.694 184.074 cv
388.965 185.018 388.77 186.321 389.142 187.742 cv
390.003 191.017 390.581 192.836 392.645 193.293 cv
cp
f
395.785 187.473 mo
395.785 186.664 396.443 186.006 397.253 186.006 cv
399.111 186.006 li
399.92 186.006 400.578 186.664 400.578 187.473 cv
400.578 188.102 li
400.578 189.424 399.503 190.499 398.182 190.499 cv
397.022 190.499 396.032 189.669 395.82 188.487 cv
395.796 188.399 395.785 188.315 395.785 188.22 cv
395.785 187.473 li
cp
404.003 187.473 mo
404.003 186.664 404.662 186.006 405.471 186.006 cv
407.329 186.006 li
408.139 186.006 408.797 186.664 408.797 187.473 cv
408.797 188.22 li
408.797 188.315 408.786 188.4 408.754 188.523 cv
408.55 189.669 407.561 190.499 406.401 190.499 cv
405.079 190.499 404.003 189.424 404.003 188.102 cv
404.003 187.473 li
cp
398.182 191.338 mo
399.822 191.338 401.167 190.106 401.375 188.522 cv
403.207 188.522 li
403.415 190.106 404.76 191.338 406.401 191.338 cv
407.968 191.338 409.305 190.216 409.571 188.709 cv
409.615 188.551 409.636 188.392 409.636 188.22 cv
409.636 187.473 li
409.636 186.201 408.601 185.167 407.329 185.167 cv
405.471 185.167 li
404.199 185.167 403.165 186.201 403.165 187.473 cv
403.165 187.683 li
401.417 187.683 li
401.417 187.473 li
401.417 186.201 400.383 185.167 399.111 185.167 cv
397.253 185.167 li
395.981 185.167 394.946 186.201 394.946 187.473 cv
394.946 188.22 li
394.946 188.389 394.967 188.549 395.003 188.671 cv
395.278 190.216 396.615 191.338 398.182 191.338 cv
cp
f
45.2734 173.569 mo
32.7266 173.569 li
31.958 173.569 31.3327 172.944 31.3327 172.175 cv
31.3327 156.499 li
31.3327 155.73 31.958 155.105 32.7266 155.105 cv
55.6649 155.105 li
56.4335 155.105 57.0588 155.73 57.0588 156.499 cv
57.0588 172.175 li
57.0588 172.944 56.4335 173.569 55.6649 173.569 cv
50.4675 173.569 li
50.5054 178.847 li
45.2734 173.569 li
cp
53.6509 176.73 mo
55.6649 176.73 li
58.1761 176.73 60.2194 174.687 60.2194 172.175 cv
60.2194 156.499 li
60.2194 153.988 58.1761 151.944 55.6649 151.944 cv
32.7266 151.944 li
30.2154 151.944 28.1721 153.988 28.1721 156.499 cv
28.1721 172.175 li
28.1721 174.687 30.2154 176.73 32.7266 176.73 cv
43.9561 176.73 li
53.7222 186.581 li
53.6509 176.73 li
cp
f
65.1738 183.618 mo
65.2008 183.584 65.2419 183.53 65.3933 183.53 cv
65.7046 183.53 65.9725 183.537 66.2366 183.544 cv
66.5756 183.553 li
66.9868 184.892 67.1308 187.333 67.1308 187.333 cv
67.1308 187.333 67.5409 186.488 67.8063 184.986 cv
68.046 183.63 67.4704 182.242 67.3556 178.919 cv
67.5944 177.256 67.9978 175.956 68.5523 174.941 cv
70.8856 172.114 73.0356 176.135 75.921 176.135 cv
78.6677 176.135 80.7479 172.491 82.9544 174.58 cv
83.7024 175.774 84.2096 177.413 84.453 179.645 cv
84.2888 182.453 83.8139 183.733 84.0354 184.986 cv
84.301 186.488 84.711 186.904 84.711 187.333 cv
84.711 187.466 84.8569 184.921 85.2755 183.547 cv
85.5639 183.54 li
85.7663 183.535 85.9662 183.53 86.1995 183.53 cv
86.3516 183.53 86.392 183.583 86.4192 183.618 cv
86.5784 183.824 86.6509 184.37 86.4535 185.122 cv
85.6225 188.283 85.2216 188.277 84.6965 188.282 cv
83.9712 188.271 li
83.7141 189.1 li
83.6923 189.176 83.6715 189.253 83.6465 189.326 cv
83.6039 189.523 li
83.4548 191.118 83.3246 191.472 83.3009 191.525 cv
82.7926 192.592 79.4508 196.658 78.2824 197.111 cv
78.2721 197.114 78.0206 197.195 77.0099 197.195 cv
76.3989 197.195 75.8497 197.165 75.8415 197.165 cv
75.7969 197.163 li
75.7522 197.165 li
75.7441 197.165 75.1949 197.195 74.583 197.195 cv
73.5718 197.195 73.3204 197.114 73.3155 197.112 cv
72.1425 196.657 68.8011 192.592 68.2932 191.525 cv
68.2647 191.462 68.1147 191.044 67.9485 189.045 cv
67.8833 188.263 li
66.8259 188.283 li
66.3857 188.283 65.97 188.283 65.1391 185.123 cv
64.942 184.37 65.0145 183.824 65.1738 183.618 cv
cp
66.3451 189.935 mo
66.4995 191.481 66.6495 191.977 66.7785 192.246 cv
67.3182 193.381 70.894 197.971 72.7085 198.677 cv
72.9436 198.768 73.3691 198.872 74.583 198.872 cv
75.1387 198.872 75.6466 198.849 75.7969 198.842 cv
75.9472 198.849 76.4545 198.872 77.0099 198.872 cv
78.2234 198.872 78.6489 198.768 78.8844 198.677 cv
80.699 197.972 84.2752 193.381 84.8158 192.246 cv
84.9432 191.977 85.0939 191.489 85.2495 189.935 cv
86.4625 189.785 87.1886 188.924 88.0761 185.548 cv
88.3906 184.349 88.2707 183.271 87.7473 182.593 cv
87.4528 182.212 87.039 181.977 86.565 181.894 cv
86.7785 181.349 86.8854 180.585 86.9163 179.726 cv
86.9179 179.729 li
86.9179 179.729 87.6212 174.964 87.0329 174.081 cv
86.7662 173.68 86.1716 173.333 85.5369 173.06 cv
88.8919 169.308 82.8039 165.805 82.8039 165.805 cv
82.8039 168.505 79.3501 168.24 79.3501 168.24 cv
81.4469 167.454 80.9751 165.724 80.9751 165.724 cv
80.9751 165.724 79.586 167.113 72.7189 167.611 cv
65.2908 168.15 66.673 172.672 66.673 172.672 cv
65.7499 172.953 64.5225 173.449 64.1026 174.081 cv
63.5947 174.844 64.3645 178.968 64.5846 180.082 cv
64.7113 180.787 64.8974 181.416 65.1441 181.882 cv
64.6286 181.949 64.1635 182.182 63.8457 182.593 cv
63.3223 183.271 63.2023 184.349 63.5165 185.548 cv
64.4043 188.925 65.1308 189.785 66.3451 189.935 cv
cp
f
105.761 174.166 mo
105.989 174.166 106.209 174.212 106.423 174.279 cv
106.462 174.246 109.899 171.37 109.899 168.775 cv
109.899 168.775 111.602 171.516 116.776 173.129 cv
116.142 172.047 114.832 169.691 114.465 168.119 cv
114.465 168.119 117.838 172.386 122.413 174.17 cv
123.277 174.239 124.19 174.28 125.165 174.28 cv
125.38 174.212 125.6 174.166 125.83 174.166 cv
127.038 174.166 127.715 175.322 127.289 176.95 cv
127.151 177.474 127.024 177.937 126.905 178.344 cv
126.845 178.548 126.787 178.738 126.731 178.915 cv
126.393 179.979 126.105 180.582 125.767 180.923 cv
125.374 181.322 124.914 181.363 124.228 181.363 cv
124.215 181.363 124.207 181.357 124.194 181.357 cv
124.055 181.779 123.902 182.184 123.741 182.579 cv
123.621 182.768 122.186 185.572 122.186 185.572 cv
121.842 186.103 121.486 186.601 121.12 187.055 cv
119.125 189.527 116.913 190.821 115.795 190.821 cv
114.79 190.821 112.899 189.773 111.077 187.761 cv
110.874 187.537 110.673 187.302 110.473 187.055 cv
109.276 185.571 108.158 183.663 107.4 181.356 cv
107.386 181.357 107.377 181.363 107.362 181.363 cv
106.677 181.363 106.216 181.322 105.823 180.923 cv
105.486 180.582 105.198 179.979 104.859 178.915 cv
104.803 178.738 104.745 178.548 104.685 178.344 cv
104.566 177.937 104.439 177.474 104.302 176.95 cv
103.875 175.322 104.553 174.166 105.761 174.166 cv
cp
109.417 188.384 mo
111.631 191.012 114.152 192.498 115.795 192.498 cv
117.439 192.498 119.961 191.012 122.176 188.384 cv
124.074 188.096 126.614 187.429 128.17 185.873 cv
133.561 180.477 133.622 159.278 115.858 159.278 cv
115.858 159.285 li
115.816 159.284 115.775 159.278 115.732 159.278 cv
115.732 159.278 li
115.732 159.278 115.732 159.278 115.732 159.278 cv
97.9683 159.278 98.0296 180.477 103.42 185.873 cv
104.977 187.43 107.519 188.097 109.417 188.384 cv
cp
f
127.471 191.046 mo
125.448 190.963 124.085 189.939 124.081 189.937 cv
122.122 192.417 li
122.337 192.586 124.308 194.079 127.341 194.205 cv
133.337 194.452 138.215 199.783 138.215 206.087 cv
138.215 210.649 li
138.215 211.525 137.503 212.237 136.627 212.237 cv
122.918 212.237 li
119.32 212.237 li
119.188 206.747 118.251 201.057 117.795 198.579 cv
119.97 194.331 li
115.858 194.331 li
111.746 194.331 li
113.921 198.579 li
113.465 201.057 112.528 206.748 112.396 212.237 cv
109.102 212.237 li
101.077 212.237 li
100.758 207.654 98.3922 203.569 94.9282 201.013 cv
96.7021 197.152 100.401 194.381 104.68 194.205 cv
107.713 194.079 109.684 192.586 109.899 192.417 cv
107.939 189.937 li
107.926 189.947 106.588 190.962 104.55 191.046 cv
99.1683 191.269 94.4944 194.661 92.1839 199.421 cv
90.6391 198.739 88.9642 198.328 87.213 198.256 cv
85.1898 198.172 83.8268 197.149 83.8132 197.138 cv
81.8634 199.626 li
82.0785 199.796 84.0499 201.288 87.0825 201.414 cv
88.502 201.473 89.8549 201.824 91.0992 202.398 cv
92.1381 202.877 93.1009 203.51 93.9538 204.279 cv
96.1507 206.258 97.6314 209.091 97.9064 212.237 cv
97.937 212.587 97.9573 212.939 97.9573 213.296 cv
97.9573 215.398 li
97.9573 217.859 li
97.9573 218.734 97.245 219.447 96.3693 219.447 cv
82.66 219.447 li
79.0617 219.447 li
78.9301 213.957 77.9929 208.266 77.5373 205.788 cv
79.7118 201.54 li
75.6 201.54 li
71.4883 201.54 li
73.6627 205.788 li
73.2072 208.266 72.2699 213.957 72.1383 219.447 cv
68.8443 219.447 li
55.1351 219.447 li
54.2594 219.447 53.5471 218.734 53.5471 217.858 cv
53.5471 215.398 li
53.5471 213.296 li
53.5471 212.939 53.5674 212.587 53.598 212.237 cv
53.8762 209.055 55.3906 206.195 57.6295 204.213 cv
58.4848 203.456 59.4466 202.833 60.4844 202.364 cv
61.7073 201.812 63.0324 201.471 64.4222 201.414 cv
67.4545 201.288 69.4258 199.796 69.641 199.626 cv
67.6813 197.146 li
67.6684 197.156 66.3297 198.172 64.2917 198.256 cv
62.568 198.327 60.9177 198.726 59.3931 199.388 cv
56.6433 200.965 li
53.1432 203.518 50.749 207.625 50.4277 212.237 cv
50.3864 215.398 li
50.3864 217.859 li
50.3864 220.477 52.5168 222.607 55.1351 222.607 cv
68.8443 222.607 li
82.66 222.607 li
96.3693 222.607 li
98.9876 222.607 101.118 220.477 101.118 217.858 cv
101.118 215.398 li
109.102 215.398 li
122.918 215.398 li
136.627 215.398 li
139.246 215.398 141.376 213.267 141.376 210.649 cv
141.376 206.087 li
141.376 198.11 135.138 191.363 127.471 191.046 cv
cp
f
319.612 179.899 mo
319.612 180.667 318.986 181.293 318.218 181.293 cv
305.671 181.293 li
300.439 186.57 li
300.477 181.293 li
295.28 181.293 li
294.511 181.293 293.886 180.667 293.886 179.899 cv
293.886 164.222 li
293.886 163.454 294.511 162.829 295.28 162.829 cv
318.218 162.829 li
318.986 162.829 319.612 163.454 319.612 164.222 cv
319.612 179.899 li
cp
318.218 159.668 mo
295.28 159.668 li
292.768 159.668 290.725 161.711 290.725 164.222 cv
290.725 179.899 li
290.725 182.41 292.768 184.453 295.28 184.453 cv
297.293 184.453 li
297.222 194.305 li
306.988 184.453 li
318.218 184.453 li
320.729 184.453 322.772 182.41 322.772 179.899 cv
322.772 164.222 li
322.772 161.711 320.729 159.668 318.218 159.668 cv
cp
f
221.201 177.605 mo
221.228 177.571 221.269 177.517 221.42 177.517 cv
221.732 177.517 222 177.524 222.264 177.531 cv
222.603 177.541 li
223.014 178.88 223.158 181.32 223.158 181.32 cv
223.158 181.32 223.568 180.475 223.833 178.973 cv
224.073 177.618 223.497 176.23 223.383 172.907 cv
223.622 171.243 224.025 169.943 224.579 168.928 cv
226.913 166.101 229.063 170.122 231.948 170.122 cv
234.695 170.122 236.775 166.478 238.982 168.567 cv
239.73 169.761 240.237 171.401 240.48 173.633 cv
240.316 176.44 239.841 177.721 240.063 178.973 cv
240.328 180.475 240.738 180.891 240.738 181.32 cv
240.738 181.453 240.884 178.908 241.303 177.534 cv
241.591 177.527 li
241.793 177.522 241.993 177.517 242.227 177.517 cv
242.379 177.517 242.419 177.57 242.446 177.605 cv
242.605 177.811 242.678 178.357 242.481 179.11 cv
241.65 182.27 241.249 182.264 240.724 182.269 cv
239.998 182.258 li
239.741 183.087 li
239.719 183.163 239.699 183.24 239.674 183.313 cv
239.631 183.51 li
239.482 185.105 239.352 185.459 239.328 185.513 cv
238.82 186.58 235.478 190.645 234.309 191.098 cv
234.299 191.101 234.048 191.182 233.037 191.182 cv
232.426 191.182 231.877 191.153 231.869 191.152 cv
231.824 191.15 li
231.779 191.152 li
231.771 191.153 231.222 191.182 230.61 191.182 cv
229.599 191.182 229.347 191.101 229.343 191.099 cv
228.17 190.644 224.828 186.58 224.32 185.513 cv
224.292 185.449 224.142 185.032 223.976 183.032 cv
223.91 182.25 li
222.853 182.271 li
222.413 182.271 221.997 182.271 221.166 179.111 cv
220.969 178.357 221.042 177.811 221.201 177.605 cv
cp
222.372 183.922 mo
222.527 185.468 222.677 185.964 222.806 186.233 cv
223.345 187.368 226.921 191.959 228.736 192.664 cv
228.971 192.755 229.396 192.86 230.61 192.86 cv
231.166 192.86 231.674 192.837 231.824 192.829 cv
231.974 192.837 232.482 192.86 233.037 192.86 cv
234.251 192.86 234.676 192.755 234.912 192.664 cv
236.726 191.96 240.302 187.368 240.843 186.233 cv
240.97 185.965 241.121 185.476 241.277 183.922 cv
242.49 183.772 243.216 182.911 244.103 179.535 cv
244.418 178.336 244.298 177.259 243.774 176.58 cv
243.48 176.199 243.066 175.964 242.592 175.881 cv
242.806 175.337 242.913 174.572 242.943 173.713 cv
242.945 173.716 li
242.945 173.716 243.648 168.952 243.06 168.069 cv
242.793 167.667 242.199 167.32 241.564 167.048 cv
241.564 167.048 li
244.919 163.295 238.831 159.793 238.831 159.793 cv
238.831 162.492 235.377 162.228 235.377 162.228 cv
237.474 161.441 237.002 159.711 237.002 159.711 cv
237.002 159.711 235.613 161.101 228.746 161.599 cv
221.318 162.137 222.7 166.66 222.7 166.66 cv
221.777 166.941 220.55 167.436 220.13 168.069 cv
219.622 168.831 220.392 172.955 220.612 174.069 cv
220.738 174.775 220.925 175.403 221.171 175.87 cv
220.656 175.936 220.191 176.17 219.873 176.58 cv
219.349 177.259 219.229 178.336 219.544 179.536 cv
220.431 182.912 221.158 183.772 222.372 183.922 cv
cp
f
295.89 219.438 mo
295.89 214.877 li
295.89 213.105 295.549 211.414 294.929 209.865 cv
293.07 205.217 288.702 201.846 283.5 201.415 cv
274.906 214.922 li
274.816 208.692 273.901 207.075 273.901 207.075 cv
276.323 202.344 li
276.323 202.344 li
276.323 202.343 li
272.211 202.343 li
268.099 202.343 li
268.099 202.344 li
268.099 202.344 li
270.521 207.075 li
270.521 207.075 269.82 208.313 269.585 212.796 cv
269.551 213.437 269.527 214.143 269.516 214.922 cv
260.918 201.409 li
260.506 201.44 260.1 201.491 259.699 201.558 cv
259.409 201.606 259.125 201.674 258.842 201.74 cv
258.746 201.763 258.647 201.779 258.552 201.804 cv
258.191 201.897 257.837 202.008 257.488 202.13 cv
257.478 202.133 257.469 202.135 257.459 202.139 cv
257.096 202.266 256.742 202.409 256.394 202.566 cv
256.393 202.566 256.393 202.566 256.392 202.566 cv
256.392 202.566 256.392 202.567 256.391 202.567 cv
256.14 202.679 255.894 202.799 255.651 202.927 cv
255.651 202.927 255.65 202.927 255.65 202.927 cv
255.18 203.174 254.727 203.448 254.291 203.747 cv
254.272 203.76 254.252 203.773 254.232 203.786 cv
254.014 203.938 253.8 204.095 253.591 204.259 cv
253.591 204.259 253.59 204.259 253.59 204.259 cv
253.59 204.259 253.589 204.26 253.589 204.26 cv
253.247 204.528 252.92 204.812 252.606 205.112 cv
252.588 205.128 252.572 205.145 252.554 205.162 cv
252.26 205.445 251.979 205.741 251.712 206.049 cv
251.682 206.083 251.654 206.118 251.624 206.152 cv
251.374 206.447 251.137 206.751 250.912 207.067 cv
250.876 207.117 250.84 207.168 250.805 207.219 cv
250.594 207.524 250.397 207.837 250.212 208.159 cv
250.174 208.224 250.135 208.289 250.098 208.355 cv
249.924 208.671 249.763 208.995 249.613 209.326 cv
249.579 209.401 249.543 209.475 249.51 209.551 cv
249.367 209.884 249.24 210.225 249.123 210.572 cv
249.097 210.648 249.068 210.723 249.043 210.8 cv
248.928 211.166 248.83 211.538 248.745 211.916 cv
248.732 211.977 248.714 212.036 248.701 212.096 cv
248.609 212.535 248.537 212.98 248.489 213.433 cv
248.489 213.434 248.489 213.434 248.489 213.434 cv
248.489 213.434 248.489 213.434 248.489 213.434 cv
248.477 213.547 248.47 213.661 248.46 213.775 cv
248.429 214.139 248.407 214.505 248.407 214.877 cv
248.407 216.594 li
248.407 219.439 li
248.407 219.439 li
248.407 219.439 li
248.407 220.751 249.205 221.877 250.342 222.358 cv
250.721 222.519 251.138 222.607 251.576 222.607 cv
272.148 222.607 li
292.721 222.607 li
293.159 222.607 293.576 222.519 293.955 222.358 cv
295.092 221.877 295.89 220.751 295.89 219.439 cv
295.89 219.439 li
295.89 219.439 li
295.89 219.439 295.89 219.439 295.89 219.438 cv
cp
f
239.84 191.125 mo
237.891 193.613 li
238.106 193.783 240.077 195.276 243.11 195.401 cv
247.238 195.572 250.835 198.151 252.677 201.799 cv
253.532 201.192 254.447 200.665 255.415 200.232 cv
253.043 195.675 248.476 192.46 243.24 192.243 cv
241.217 192.159 239.854 191.136 239.84 191.125 cv
cp
f
235.089 213.434 mo
234.957 207.944 234.02 202.253 233.564 199.775 cv
235.739 195.528 li
231.627 195.528 li
227.515 195.528 li
229.69 199.775 li
229.234 202.253 228.297 207.944 228.165 213.434 cv
224.871 213.434 li
211.162 213.434 li
210.287 213.434 209.574 212.721 209.574 211.845 cv
209.574 207.284 li
209.574 200.979 214.453 195.649 220.449 195.401 cv
223.482 195.276 225.453 193.783 225.668 193.613 cv
223.708 191.133 li
223.695 191.144 222.357 192.159 220.319 192.243 cv
212.652 192.56 206.414 199.307 206.414 207.284 cv
206.414 211.846 li
206.414 214.464 208.544 216.594 211.162 216.594 cv
224.871 216.594 li
238.687 216.594 li
245.879 216.594 li
245.879 214.877 li
245.879 214.391 245.903 213.91 245.946 213.434 cv
238.687 213.434 li
235.089 213.434 li
cp
f
261.526 185.198 mo
261.553 185.164 261.594 185.111 261.745 185.111 cv
262.057 185.111 262.324 185.117 262.589 185.125 cv
263.028 185.136 li
263.439 186.206 263.649 187.894 263.649 187.894 cv
263.649 187.894 263.893 188.068 264.158 186.566 cv
264.398 185.211 263.822 183.823 263.708 180.5 cv
263.946 178.836 264.35 177.536 264.904 176.521 cv
267.238 173.694 269.388 177.715 272.273 177.715 cv
275.02 177.715 277.1 174.071 279.307 176.16 cv
280.055 177.354 280.562 178.994 280.805 181.226 cv
280.641 184.033 280.166 185.314 280.387 186.566 cv
280.653 188.068 281.16 187.42 281.16 187.849 cv
281.16 187.976 281.244 186.225 281.586 185.129 cv
281.916 185.12 li
282.118 185.115 282.318 185.111 282.552 185.111 cv
282.704 185.111 282.744 185.163 282.771 185.198 cv
282.93 185.405 283.003 185.95 282.806 186.703 cv
281.975 189.863 281.574 189.857 281.049 189.862 cv
280.323 189.851 li
280.066 190.68 li
280.044 190.757 280.024 190.834 279.999 190.906 cv
279.956 191.103 li
279.807 192.699 279.677 193.052 279.653 193.106 cv
279.145 194.173 275.803 198.238 274.634 198.691 cv
274.624 198.694 274.373 198.775 273.362 198.775 cv
272.751 198.775 272.202 198.746 272.194 198.745 cv
272.149 198.743 li
272.104 198.745 li
272.096 198.746 271.547 198.775 270.935 198.775 cv
269.924 198.775 269.672 198.694 269.668 198.693 cv
268.495 198.237 265.153 194.173 264.645 193.106 cv
264.617 193.042 264.467 192.625 264.301 190.625 cv
264.235 189.843 li
263.178 189.864 li
262.738 189.864 262.322 189.864 261.491 186.704 cv
261.294 185.95 261.367 185.405 261.526 185.198 cv
cp
262.697 191.515 mo
262.852 193.061 263.001 193.557 263.13 193.826 cv
263.67 194.961 267.246 199.552 269.061 200.257 cv
269.296 200.348 269.721 200.453 270.935 200.453 cv
271.491 200.453 271.999 200.43 272.149 200.422 cv
272.299 200.43 272.807 200.453 273.362 200.453 cv
274.575 200.453 275.001 200.348 275.236 200.257 cv
277.051 199.553 280.627 194.961 281.168 193.826 cv
281.295 193.558 281.446 193.07 281.602 191.515 cv
282.815 191.365 283.541 190.504 284.428 187.128 cv
284.743 185.929 284.623 184.852 284.099 184.174 cv
283.805 183.792 283.391 183.557 282.917 183.475 cv
283.13 182.93 283.237 182.165 283.268 181.307 cv
283.27 181.309 li
283.27 181.309 283.973 176.545 283.385 175.662 cv
283.118 175.26 282.524 174.913 281.889 174.641 cv
281.889 174.641 li
285.244 170.889 280.027 167.042 280.027 167.042 cv
280.027 169.742 275.702 169.821 275.702 169.821 cv
277.799 169.034 277.327 167.305 277.327 167.305 cv
277.327 167.305 275.938 168.694 269.071 169.192 cv
261.643 169.73 263.025 174.253 263.025 174.253 cv
262.102 174.534 260.875 175.029 260.455 175.662 cv
259.947 176.424 260.717 180.548 260.937 181.662 cv
261.063 182.368 261.249 182.996 261.496 183.463 cv
260.981 183.529 260.516 183.763 260.198 184.174 cv
259.674 184.852 259.554 185.929 259.868 187.129 cv
260.756 190.505 261.483 191.365 262.697 191.515 cv
cp
f
185.561 171.084 mo
185.561 166.865 191.61 163.3 198.771 163.3 cv
205.931 163.3 211.981 166.865 211.981 171.084 cv
211.981 173.378 210.365 176.418 205.811 177.439 cv
204.96 183.484 li
199.968 178.547 li
192.428 178.547 185.561 174.99 185.561 171.084 cv
cp
206.805 188.92 mo
208.639 179.864 li
213.111 178.072 215.142 174.339 215.142 171.084 cv
215.142 164.947 207.951 160.14 198.771 160.14 cv
189.591 160.14 182.4 164.947 182.4 171.084 cv
182.4 177.21 190.346 181.155 198.275 181.653 cv
206.805 188.92 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.0.1
%%For: (\715\740\744\777) ()
%%Title: (0_1169.eps)
%%CreationDate: 5/5/2015 5:08 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb",Kl!#(Jp@.tT50s-;ACmcUX7oYYa<JVlUJ\?N#,,$@!b'4+g^h07rB3eR=#H^qAgS>TOr4uEVj;DhlrDTk]2reZ>4kANUtG\@
%Ec+J0Q9<@5\WN-jJ,JWh]k<><\<f[ineV4G1o>rYfV%$&%F4!7J%+18`P#TWh/%:^bIM)g>!%A_$_-!]V9t5PmI#8-TC_Xi!M)SE
%I,1ip`61/e:%7([o,L$mEPE%E6U-BUDf;CaFq7FGDslY`^_WODci4]h2Z.^VYP0IO"TS/aa26H#kHUMnVU*0Ja.6tSg2F?&0[Oi8
%^jgFp@BLRl<sQu6cR5Wqi+7C%LKuIlFufon;(E_8+m;-`rl=IqQiPWcaCl7Si[]CnkFA'cj6Z3"E=A<KHsjSl+5=)P\1dnLk%Kq!
%h1PL8e#`7Q>!^p9nm64Up+5uK^/;tU5.oC*QhTn&P4+,#^s73`U'c,Yq%?]2G5S*Is1+YH(0BgA="\TggYZrI#8S#-"GB3qpBJmP
%qmt>A"4t&XLt?(I?&tJu,^?V?V-0Wp2i+9e''#Y=4c0%YU$^tBQXMlj-DS3nS8VDW`[H4$%^OQ?>6jOS1f9oJjBV%(MX6id>d[0I
%n5OYPlDY8u27?Mu#.QA!+ItUM`^ur5]]?u!qQ;ITGGEokCUjWBL&?kkT+?pR8H$VD!n$sqgf!_Zp0h[ici>T2]e@Dc3$"M2[Aj[H
%RN9gPLpJSN0VNNp?U_I8oKA-4SLa^+a$'3^Ph3b/^5p%(#_/15$L0VGf5^:Ya2(OlLHhn?W&Zg.I73[TI-:B_k50tsqj!'(1l;hl
%M@_.eJ(-T<&1rbN%:A(46n=N6X]307V%S5T.NqQ`JtH'n^/*!('h#!"\.MN*Vp$sV1&4aaW]kVHBT@QR%I(aeLk^"#CABY2$@a91
%&r")WG/Xr/N-+#sI"t,KDsW@L`Ea]cpmYs;(C3LAE)bsKcN)@S2#N=mPmYCX.ad=Fe'(Hs(&m?m9Ka')e*#ESpb[9(<!n?Z+WAdb
%^Tf:q8>_nAP7*.!&.N>Q/'Y0S`^h?R`cjrrb5qU.P=H2`7PpnQJ+I-T\1huL"urKC"e*)e,dh_V7HQb-1%Q)tR!L*0-I5WNOh#D<
%ClG+f+V#-`A/#?Gk"IdbN&9O46t9@i)OW86(k3b?&dZaIPUfI;p@/tNkt7J2cmZH"ag9'm:adVeCWkMrq(_>`A7clW?7h,1O/J%P
%C4,H@45eH\T:A"o.SD\'4Yqo+W6daEAZbpd#+@(0eU"*[V=f?b?0Qm*6u&m$8SPnFD8g;()E9+`:26q7U8FugX@D?4\Z$,Sa]S=>
%RS"b'ff">Us7/D+jnJU)s+BI*`ut>IrriG<f73U')"RPX9L]QS^I!K9dXV("Z,lD,?iC;Tb@LnB^\i"uS_rbJr6J"78NVuKLqe4`
%q7V*pJ!!4T/\,2a>X>NQphdX.8g+Vcpg50qKU&k4&:uTLc<pYK$Ae_uqZ%R>/q7WRVa9"Bm=7EV8-Jq0odpOj)_uq.Z3,KN5/DI<
%*e.[@)GK':1j]".)@OIbhneUcU@Y`<Ul9t:V_iZei?(IOUKZ</\uIFj_i=1,Yn!6X)YXMI$U$Dn#A;(_@@,?W\hQ6(A-Dh$oLqd]
%<?3k"G:D^kc/kl=`AE%AjoSJT:Ttf#%PntaVWRLooS"As6iO.=aaB62Q+1$6)Ho*A9fGaiKai;sC0!kT/R;MbNY-O;eafOCY_nkL
%?:nNU)P-[Va">Ei$&uQ)U#i.613[@9P4SHHNN9S6*"e>6`II</Kd^(`()H78nGlpi\>ZAROCH)JMPON8d')M6'[pika&VH!BJ5:,
%7ZiZnbq@hCiX='t:0p^nY!^klUj9(TW*rS4&QLDidbN:rl1sR]G[[Gq,#?`ud524XK1u!,N9&+(M-a_cdR6*,a\"^T5s+CN6Kc]p
%Gp_0`@KR%mMhs:$[(7'@Q!u(KnJp)j9*#o!\%/#4UmRR5FaBTiBANe`Pb5:UjE7Gpd&+3B>BFT08'2tGJQTr%9NbiE.7ql1WXP:n
%R%_o%USY)l**XnuZ9g[P1`+q[>*jM>KI^Mr)aULC3b"5o-p:XrOth,SUSUXAcV$86>'JEuC6@$*_+%UNF\urfN_:$f0qADB?5lPG
%n#B<"Y!&:APG>7LU9)p3bBr4qf[B#F=9d4a903CO(H]Ed9B\0/ppG:$MIp]-[)0s_%Du."*2[5W0.)ZpYar:\oS96H6EsJ"NF[%j
%BD>do.5bfX/W!_%75JO(_mFbI)FZPFQFSPC14L*'WNaK?3J`o3Rm-l`Pa5N[U>k:Q<76F>mQt<C>IJp,mC4C0'o0_^b^hO5,k"nH
%<"NZ![[Ir9:0B>0$`g#/9sVmT0EWb\.9i,S*eK^,ibCLf>YI/'Xln3TQejR(0+!1b>Z-Igc-oTI2-Rs9Q&9=P"e*tHWf46ZD!R<?
%8cg2Nf+ZP(=sSikd/4LJ-giH=dKZ$`mEAl&:\>`m<HsgQ&#LjU:9$EM!5;OpW"HG^i?=H".m=38@5(u=a_MXY,jBhY6<f;+1<?5#
%$LLFtVCZRe.13,9MP%:V9m:-XM2Mb>?F09F8'2I@"&ugMRSd8_Q-$ToCicSdHrJFtU@pO'<N.Sr/;`]V6aALo"k)+9H9!c82S9Ig
%5>VBCj@9iaBTJXe(02qW#F'_ioGI[&13)F93Lc4h(osO@.'==[AS7k8P[^]A^a-?[`Gs!,VuQtI>d]N*IS+ku;lTSl`_[8$(1%^X
%.!8;'7Z3s4Z8fGSj\a9f>V`LY`^t8B2:n]L]h%9m8W8Pmcr;:A-,kA_LmbSAA6q"TU.JajT^lkE%seL+377Xls/@OX2pl4fc&F!S
%d_."'\Z^CpR]&!pB)IS<-@(5X2^M[?JF'/p/K(*qIZj[\MloAID3,HMPb$iN0(C][UTQ'CAmD71?Al4u$^PLDL*j"=+WVE#i(uog
%dR>W+dR5K,jVV#KM@Rd^RnA6kZpTNMOr#T2:c/\F=7S,XYmNTn.%5D3ic$6j5LS,Z9+Da?7)QddUm3[0dC$RNqFs")@YmXV;j**<
%&^a9!cD[Q(.;"[A,C,;gP-?X2rgVlU;Ipl_Bl>A5=2mh2U9qOa%!]]E*LQ+6V(sgidUl&KN,#.D*,0,B`_8+,pnpGM&h^#\?-%P_
%=BCTSY,"D7<7kq%q)//8%U'\le!aPY(pgW$fJjoNn2dV]TbH[(>K_Oj`,sot'S]T818m:"IUPB2^h([7d?UnOM/Fk[B0lh4g/t1,
%"dN>^$`7B;%bu0uOVhhE=*1I;,&:Hc9>Y4@ahRO)M(uS$?!VhU%RX;-%6JKogU)mgfqjS<1f'po<[qfAklagaAlW`PE1*4>CSS1X
%AJir9S#%1TYYfHtkiKaT&^4FPSfJbG`n.b[X6[&<&'UEi%*'$Lf-X%6=fFSkik/1ef?9Zkb_?1_<9;+>>6h*`MbN<Z._[_i"_M6b
%BoFV;V8eYs?;K5_<0KqR\Yc58Vb/[UQr6NOpV[r<<0rjp<_B3h#i*CQdEQ>s7BS,sdo*Bj;aIBu7e"!ZXb&>l[Mb=1A0dk93Nc!L
%Al`F(FdeGLZ-qE$Wb+S/FK%Sp8k)_@_Q;963FbA05TO,ZhBsJOAtG#b,nCVD<4AlZQ`<o`n4Q824IVd/P0'a)'*".Z:=5liVrsas
%A9:4F1$Z>>Yq_N"UuY@knB+J)S2[Fn/"UP"@Up,Y5F>_;+BCA#P%f[!&[cAFB!$A:A>iL3PXp"])JSp1)<mg$U(!<'PU\(spRplI
%P)c?fBcriXf3BB^a@HOMNH/%,3D?/=/'tR\Zoc'DPU)h82*ILR-$rI//t+/hYfV!0\Nr#dGhOKAL;'Q%9Vm6;i@;RQ@)P$_e5[Gn
%*DeV/?%1lQkcU,'1M`74QRM)r'jO[(Us8"_X\3g=h.4&'Ali0LGYW:$(%dncO\)<S5)$tXA4Wd'*nGB1Z0CeBLauBBLnrh(CAt!I
%L/!;XUJ6#5AY8ItOPGfU;t5;Z.jl,HNiTb$ONZ#7O\u8I2_dpBRXObu8;_9+R!cK<F<Nnj01OP_STad@3!`Ss-l%H7ZnX;#'^/cL
%'Gb8I>gi(d0-hR*WZCSF"`7Ck$.]d]72f6"ku89S-P^Fif/)<*:l][%:If7O&6A7"pcfaq)1,7n*En/i>()%!C2B]>NZ'&!]P=2@
%VUJ?o0C'%)R:gcs[*;1"C6gd(3qb;N]V[<Z2E,I>R$/(E.=UeK?$o0E"Qe#?4ZA82B$i[H$POi9>o6_U;PLPCOdqc]@jgP=d/itF
%((N>r]fWHI0l#jJB"W'Y!gUqSqbB1'2_D&/7Yr4QYG@X!W[@/%'glgb;KY'l=/gTcD&dXW@'#&uWYS>c=k53i^GZnM%"O,>#W5s,
%P[8GHb1i@K-5BggVj`YrAIfLr,tE'/?s&n?'U)kbeGNjW*Xn=DPrL$neI#c--^/#qC#U=8$^.TBaX2(_e38/Xbc:epU+^Z'8^G[U
%6Ij)5X.>hb\'S8fM@U"EZ*\=rbg#s*Pcn[X>_l4G$V;>?C8$H^.jU"#3c%UWo9Ig>"-'+p7>8Nl->'o]<(^0#YN*6:/AohVakI)X
%FY.2bH8MspFJ`pAJ9,:fb6i8RTsgn77]*RL.cbnLl/ad3P//n0F_k\1do)B-doCZDa#-FYjl+";3U\DT@WGLNV0.SF]*T3BUroo$
%R\iZK\kjDIjM$bZ'3bX/]SbIfW/_J?U+$bM[Q]r#fBZ`]/ioEZ+T#G.3hbh?alG,)Mi?G"<*+C6C#)9LF#jFEeQ#N0<W+@''uTX#
%)#Q!l%,R/'>"qcBT_/Sci]M!u>\A4jY5MoXkX8iL"c%Dh<Q-p<W#I&NUm.fE_5*/V3]q!o?+WqTF`;IZ,:"lea#4cZ=\,WBXZ<iZ
%;qj>X,O+4LOgZf%M=o9UWW_KOTNm`M9<(<29bc$n.$oY,U*:'-^%GDHmq^"2V=lq+WkmF.I$\?PgMXGqjJVh`IC:6l#G"*SNX>ds
%?acXoUP0LRrqP)<r[^1eD%>LANGa*ifk_\<s7k2NU#%tjF)U&A^YNc)-a)WUNkW?!q:saQa0n2m^@fTfiPuc4j&lf^I"9,tSrKB*
%p]EI:*sg]L`V1Fh4iRd0kW9Y8?YsoIYF/Xl=ma3hrY4)7>PNQ(J$ZL8a2dT8\aJC>A(`sdS6'+_\Tn5_E?u4df6?.1qugntqc[q:
%Ln!cANiudOWi^U8D7/-?17-g/[8lVVk_$W1Q.sY&p`)86EK%jDJfHEJ^;3:G36>pkL68q`5@?BLOH</bNk;t7X;Nl>S:lQ2&WDc+
%%9;efk).En<U]m7#)RjL&nCF7Vsk?@n5*8"[f>ssW82:^c=pTOcGej-9u5BNmb:WbXCTW3'tbelaVfCKG\YaJ_[f.1WuUeI1BnKV
%8sj8-A<Md\jDR9N[WYiukjG*fRQG2lRt%'`[\GDSEC1)+iW;[t8t]g2[KX#NKl3M1oY3[XK)C\T?:`6YfMVcfSfi/8S%Y>?WS2/H
%::f!$BqtCJ&mu[P<nU`un=ZqS]<Y!pg#FT>]4AXD$s&?EAXH)`,i#V/oKHZ?dA&D7b2BeP?:gGRh]F9,A2>%K'O;PrW[92i:N!l&
%JGA4==*Q%:rh%_im52<&39jPVNVFF4K0k"AB[pOcqh%@&k-.OTg#=LE/m6'J__i]98n$X'jC?4FULQFrmh!?/1ONG2\i-c,(4Wjo
%Au!dfp@7_JUZ?Q8);`']hKmkXa7QsuW8U24CA6mK+0FVdrdEX>_1t\!dr+2Zd#T=u=9QQ/[p'lmWLYr9okrP/$p42sZdmYLiii>W
%%,BdY3FQ(bk&ZUWU!qRa)X0c"3KR@@ET?,eIgKG^HHp1X",46EdH(5YW:s(D:a>MM78..]&1k)_$nR=BCE8;u.;[KiOG?BeU9./3
%Q16DblY/C,-)*mUA0<LY4YA4j#ifK\S&G5OZ:XhZJV9X%/_A6gdS+2$coi:4DH)Otk6/9*Q5N9W@j/q-SrVC[I&GQ!reRnZRYa-Z
%RW+Cl-`\3\#0e]J9HfEjlgg?c4ZQ$_?<la7hZk9o=`eTgIpBq"gACgQ`.$;OfHWM+"A]dn9OVQj2O@8`Y+jj#<tuf^B/GR(?bHp_
%XA4c+AYp^fAg#[7A8T(Ekgn`&c5O#cP_l('d<"OT%3jMs\6FZG.g%4=Fj0\[C7f_(4\G&rW69+J"bhoe:Z,)150g:S1:mi<kD!Vm
%mOY]6ATj8*_K9F6a5&6+/^9XL7W2IN]*oHcQJ7B\\'%U`S#(;7e8CT+bu2.s,%dh1/@AF@_pFMa<uo2`&*;ZO--m&,H&b.,`N-<b
%^;QH,.,CE+_o$,BB;KDtPA`<tDeL-JNR-?D1.:UsBep\qRc@W2DVSr,Zg9PLlh(IR--SW:7NJ+BX2i8?f&^3\(!1[ZC;2mPioLU(
%EKPF8Y*hq[7XdoS>eb/jr,GR^X:2Jd1Ta`,S1E-)\$G3tXYr-\i"ndl=WmlmCs/"U/%1]V*rNHen?W2"iU7,&@Dhd1d`X2%66VAI
%c<dF%aKg?(C9rZPSrnRLNB4L_5R,b"MGH!=0+r2.Uf<h5<e"^(V]5C,eS`B)%:bDUKrML!kF&Ef"D7O$btH=P9a^<pO`=l'J6]Z6
%1cqVc.4AF(=fQoCEr;[u?Po'-gh3@B\ULe\*V=Z;C9)Ti$r45?W2TjBcJUJ>\@G6($h_8kY@qN)erst^AqeH#[fRH4I5f@YAG2i5
%DZkO6>#2dcW-0-Ye+:)A`C0`+UG/:Xm<X*(0%2V?&k!XBjWFX7=VU"7N;A]k"t'cfc=G,HALBQ;1q;#p,]D[3`%Uu>?SUEt>gr)M
%HP.PZa16iGZ^C,':[0!AL0I([?Y5bo+j]kDB7%^p.@TWIch<H5HcX[ILJ0l4GEH`X-)5t"1&Ju#CL#+\=Inguch<?2qo2NUB)BTC
%jm"2C\gP-I4PMfdC`?2h*$5]sgl._I1Q\#f)e02OA?.[WO]8JhWSIWJhTE,^(KubLW6Sf/#2Ne1eFt,ZbS#,sdDn]-ca_YEs*6bI
%9mgIO+=u'sbtP`q_[Rqp/D1#6?+1Mk7_^comU0'=RoRPLRD`aB,u[Veo4DR>#qhFHk?Bt2`c5bt@^((\<3C5h?MVu^2rjm02m0?k
%]@GK/)jRc+frTW\X.NrrTl4uMbg0*NO.5Vk@qEQn*LggO1XK,":ZHhakn./,k*X=KjT]:Q>M5U#[eMp36>>bO%!6B_f]2^qJ;`hj
%f1gm3.CMoc4T_@\BeDkc=Z37'li6B<i16i>G-T0A#gD4.e80W.%!]&!XRItq]Z^^9^I[([n1lN,N5+j+b:HnCO]<6u^W[$<Zbjne
%n1lN,UtjK7**JXDOCeZl?_#3O9R(.aUku,p:"pue?Ws:_09"-s=>>YuT\8PXf5aZL)9@9$Eq2r?ZorkbC*-E;jT,[Orh,-"%nN)[
%#?><.@J6@OR</9Pk;Z13Er*bJEoK5mp&J^e*%0F49tGD94iM-t*%08shSfBd?gt2(-TKABi&!&@(#F%\_.tB<DU]K8g7KA2QOh@3
%q*A3ZF=kgo%pbMD]7j&2Ec(f6:YG=",Ii?K]\Q<9`;8A9T%9'lJo?:d7`9Cu+7/?f(SaM=G?J>-$I'I&U3H=`M_SCdp@3,USq\I8
%9F.dg2m-fKHbM48@7oruA2"5\/<N;JN1iTS)R9JUp$@gYmkS32=6]]pS#qXiZR=UEAYeA+(olV.]3XU;o?0YKC@,g`a.RUR>&3b[
%/mJ-F&])e0(U=lrb\C*C!cOkMohMR\p7J01dA<h&!<*=F2dk5kWu[i)aC]UoDA)?km$W<dCXAq(V3sKqmj?nbs78(rjjfiIMa"28
%pg8?C+"bbpHuY'/Kt!nK%&RW[>O$-#AG3O(=WB8V'P<KEYi5P7a3i\dkNufXmsjkI40omeZ^Bs+1a\[I+J7;ZBQf#UP%21.Z$R*8
%_<_C%7%8^@44lL"QfMa;a=$#2h!>7@FC(-"3QKeVo"VY%1Z(16p2&0*j6QjCbVr:sDnLoAjM,jn0tRT2kJI5P:%Ck[RG[%%DpE\,
%elgd!M)ap(C]/#>A\4)$Wl"/+Q&DI8M;>s`%F00JmN7jgK5MloMl;7opLqp4>?S[$il35pGq6d]ekrgk=1[qr!>(mb)V#Du\7fZc
%p\Tr!mBV/MeD1nY4(pH,$"F<h>f?U#DTp@E-.f0LA6\Wr.Wh$9#no87L2T?ChA+(_DPFQ9'b`e$"V$U#jF<q2-'7FAr@?bp1>^6X
%g$W`bV/)93-DpDngi)dTPBs'Qp5Fqb.acNu?S)/(Kq%TpfkD@r0sQrd;49XYijUQCQ??%f0U/%NNW1Nkliueur^%5PnQ'IL_J[fh
%6&'`>2o[!<R[opmjUq;>Q]Yk\olq59h/V5P1qM.8o(c!$kU(0SpT$eefPi(8PBJRr()%;X->R`SKfs$`;AliVHT0B39TtS"K:J3r
%Ftqa=M:oDX9ME2U.us:A#c0M*jnYQRD=rpqHiq7hauiS<7J80gd=1m0cG\<tIP$qYq!;iuqNsZt5Y'Z<c0"K""?/'Qq,IfJ;pNA;
%Zm1mOBa.N/j[o(J4X,tpbi?k7hn^u/aUekUr1cLUlef<q'@#&AT)>]b_mB9<o([6kQ+8UeK9^"0@<QI4nr><R`pf7ZP@jO#nTk"%
%#(mF=m]tJoa:gJP\"MQee#[.A:KssQ)u[dQFJk^fQ(X-jiN:/@NE2ps$j$[nC;69MgX!eY(MR$RU:G)ToTqtcokTo6*uC4!AJWZU
%Xd*VBlJl-N<kFVc[;*+cq4Lm8;TD<OO,L)OUD6id4CPWuD:Z/M=jgUYF^.=7Rt"IgAe7%[SbglS`[Ha"-T]I4m^CHJ\1'``+!j4-
%%',pF^M7Bk4FU'DUtTRRB2\E[=,=EO(U^.-;21LEmb&r)34/?[2]65(e*A<68uFRrFZKF(>WrUe:QBAbf9a)jIegOl#en46CQ:W^
%FdV,?_QOZPDINZ.]A#0k\c8\TAVe$s?0<uI@&A!$S\&.i:mD*?Fj7C?]?p-^h7N$q@fJeF2Jl7]XZ*C2l.jdd'kWQVDRJ=<AD,@,
%Lh!lAg[/nA[,#PjACtF]=h]C@o(b)b2m[lj_")&ue!]=pT=93b[I.<R.&V'nDsBn*a!LB2aSE/>ch)?O&oV$nYZCmEjOnos0/1)%
%a5/9O%QPt=*sD"?Q9u1HIOJsQcE`U9T&MKMLNm>R,0ODgljrWR1^fN7b:RYV;6\_`Vl%!u1hk+-+07Uo.PrGYG<670RE@k6llf=-
%NN[>iXtO^`&f%%iDmW8hoCR(C0=^HCIqGI<n]$jscG%U#J,8K4+mFT.fCS2j)49ue1$4L&-7U?*!uBQ*j.FSIIohT6gMY6L[<`V\
%r%k1#M*L-jH%dS/NglU4S4!`=V-h;(/RQLXD7dHeDreQcP1_d7rdGb<4-,W#_3o+BRXHFDj<qdYZ>hRhO!U7%'q'I`kAQm0lo`WZ
%HKJc7Ng%[.&=%f<Z_JEPSA&ODF#uI`0bG#L'RiF%PjISYNbhDJOc>joC&a'qR*N'HdT5Kh<]tBHU<IYcRujZWB6JLZ;JIQ<mRB6u
%Sq^n.rn$c*0qDM<15Or.+2,c_`9d':%8+O8X.ka8L?bk7EPms()l$#(;UGcJTV@R&L06rT_EI:fU+rWZHreX^<A\Sc7DkRsMFJq5
%DH]J]*k$l#U(I7VF**\bp\?g@61@Z7+`:?Jph`u*_1OXXO4i`(pP<q__=Q1A>%T%N:MNpLj1Z38(MSbIBIe#G^)-,(IP983A*DV?
%.U7cf`d-SkRsCCrRag]4h(7HQja7#Cq-JeH@$^9+o"A2?pWmed$GXeF_o^J4`]*=E0>f!Y'#%Mc2bWpX$/[;mRjEI"):Fa4DI-"B
%_WUHajtXuq^TK)J0B;r_7GsYui[mmBq;k;Y@_/nY/7Hi"CYUb;)P+#5fMhUZ7j=SaT$<LLo?jA%Yq/JlUmnW'.c\a3f?AKaN)s'!
%T8'^#$P>>;HqcuQCh`S_O%E19.GRBSRYH1O),:k#\@o[/$ZffoYa$M4RI(,`\J$s-Oha]%"*VSk1QSElN_C34DN%T=j?"`=?hp>F
%nZ`Xf6*>N:^NFD+?aj(WY`2L@XgVDQF$FQ^[;=BNMbV2[hd2&NVI-7i@ZrNnRrY:UBi]$>H/.\'=$&@hjd]DG]*s%X2^?enO@)gX
%s3*aHc1.E/,+;)I4B>5UQb2`bUg@A'/A98j)^rWZgUIlF+mAW"7Ui[jgX.i_6c_U4bqTN-N:`p8KIgK@qHnJHfq`?:EArpXPG)l?
%gh8UP*M$r*DiM@`7<d?^;m"XjrPjmLnW?9](KD?kdNhNrrfW)IT"[&\\;9c0o<@@h8sZCE1"NkUBXM&I`332\S.DdTr(\i*JNPQj
%RZ1?Qc1%r#8CD;.m48ci1/Q",,\@UuU\H*uB9RT#,,O#kZhcH[3=ndSX5/^h#@gN5^HV(oca3Bl65uD&bE/^4ZfLB<0kV9P<oZ<+
%`EN1F1RNb!ZIYo3,YAgrDGG4."hDn+m.m]GT\NIj&u@Jq-W*9d.c64IMNVO^DN#1!4bcXBqD[gn8u@,NFr'2SZ4tc,(*s>#2o_q1
%nt)%p(?M1>nO\-Gl0KtDln$<G/B\"Z=d7VsS41Od`6IhE;gB-Ibg)s<'`1q#L9i:2Lq#Gl@<NDtA4Sb`?^l6QcdZL2)E4H=EjNM?
%/(7Y<fh1&4k>g<-L%qdV)!;=)lD]O1j?1KCa/%0_o7Glm2-;fbU]&1c+<1bPEVFMH]r;O6a\k*jm`3Vs%,KesF;_g;HY2JRL2Pe$
%/q]P:%,HELd+p3g$L;ZE<DO#E_)qi@^219%TpIrb['V+;76Di4Ie(Oo??Z<gRts9ZFSkt6T?XkNlh$q%rj,&^E3\OhIL8L4.Id8j
%VndN7Ko9m-#@@;sJSW);%t<GTi-tsRnI>](pjV89du9KnXP=<b;O(G`mp-YOHgiO-\;kEaS<`j):kU"+YTq>7i'f'0\@V/r#Ucji
%e-jG-6Tb%FJGfc,pUd'mmQ%rV#-^=5_TH`Y5(9q\ofqBP4^;G5\dgOOXTC_+)9hc0OH0T9Y%R->[2J`90iPQ.K]GP<Fp"7U&-b<m
%eJD*H"RmTB>X+<K7J>Ge3U5>B>o1!g#l^kal[$?LV"!2iGYPJ%qVtqp24T`fk$Za&?9Iq0#nmqZanND99km#AYDLS+UY#MR,'/n4
%gsKJnC!\7(E<#+s;7hZjrBF6,L7jlm+A")mCBN?s/6D]kX7m)G.0)ss^.m9r!#W_'`5e5!7mKg#jF=5"IqY(i/Esjc.t,dX_n#ZH
%hVjN1\$pC[2ZdOfi*(>hbbg_UHfJ7Oe=\1s?XNI1>[ZfFgs:"bNFl^q02;YTR;RNU?F*p!Mm&,;BdO2[T+m0tc\O*(NI-H6f"+^A
%b&GuFVibP5a1h>`DA8CdA2amP3uLAFFOgZ0If"Kobhm=RdH+[L,=1sq?tci=l@20>p924Yn_]qaFK'<Lps08.mi,ZVHd,#sHH`m3
%=h.%LEOC&q`S%u`LaHPX`R4HpF//&8bOfXA1^Eu-8)pN6HFg7BK>aN\#X(g``:2K,&P_3HKTH=kVV#cn7F+iC%me08I,*WD2DSON
%Vo`1[1bnM&)+H5.dhc%Z7K<I<D'J+^*qu^XLogT,a[CW*13`#h4H`:u%.(@o.5p4rNjAH"kZid]HA,':E_.8U!iA72[oI:9%&t[p
%DR\F>FHh:c/#S$NJGQ3g)L5o=-)fC4FsY6"eP&$SH<njW(%8fh3u`oSRuQ:/K(_7m^*^:mR4A^BmG)$Uf8mP's2;f\&6Xl8\[*%s
%XR/;<GLC=U"C6W6kdBs.-92>RWCUt?43D]GS[b0T2<ZJ;l@9h`C"p$Q?_^l6gHTFS]CfD<:S$Wa(d<s9,Bo=[qc_Jo@pq%0)mY9U
%d-k">]hYtnf+DG3NB5FNnC%%na1H^uOeUuAA7LMKibHVimt=GfWl28DD>gF,p@VBRC+4A=EA-bZLiWgk^\bS7HD=h1C,?lXj`KWK
%DTDFii&nIb_cdRi!C%MQ2G,2DYg33W"cH-HpN&fT7sKlj+Z8"omkg/"Oq(tAV%Qh/aj-R:!TC\g;-KY(g)X+adi\!dHtRopWK0!,
%mA"E;0CB7;]i<Sis/b!q67f&D5%l=q#=a_]odJ<r^Y:qF]UINYDdZXNrC.:H]W)OV0VMl5me/\]%3KSt!?ufFVJH.fI;RZ?^a6ir
%aE&QH>C!R'G?3@t%%9nu_Jc(ThunFR%>>fK<p^uK[t=kP$V"m07BP8,J5BaerbiA5',X1r$+'c0RWM+*Q@@2?TH#L_PqIQH[_P6b
%_g^Bg<p]up>O>V%M%\MeK[CB$Jdp1b]:7mrY5.koB$r[2OGQKLQ$S"/I5RstNod_/+)t44^EV)ig]n54a7%dUd:-=UYUS\2%*f'f
%rBUZ)TpL+Qg&MMoUXgTV1iuc6GO'6s"N,8@?FKaqc]os7!i?d0&_\f9AIg4`(XZu53QX-^,R3gdIkqud3sT*[.`7HN/p)rK<<^l%
%mC,b!;NE+<b*!I]]p)?"^tk,F]mm"ZVpGp\R5!`lE7hZ`HGb>?9F8-E_VH)1YUgQ:I<Y]-\:rSeZ&AM'a=g#sSmc?G9/sp^)-J;5
%*9Pps_QS(QO\S=dI;9qdNuIug.]V/JhT*S'S=H55O&0uRa2`JNHBaW.'`Yi"4mQCh(F,f@mXEN@5mte2BY!p!#Wsa#k<:miI\!^D
%^M;DV%pY%-C7*9[q52B'j$;CN="o2-e#e[u:p8d#fAkoVT\1]!a3&%RmMF7sSe8#1J_R/rK5GG5ZHo7D^U@2rMegO6$P.D\ia&r3
%J0`08SiH<3N]hEZ!S=ElKW`BdQXZg!;Wt@@b:jmu@!2'8#RM4=V4BAV^TG_d(PI&g=tC?RXtc!aNq.XD21A/Nk<Kk]p&[G$k'Hr*
%fD$0DOoB[h='t,-JWN`*"oPbG;&tD_ge2/nkKlh([u9jZ%BmY1=K*%FU9h:U(t*Q_%HC_*-:4L*isI'=8+jCD3,+dpQ@0&dWS3Ic
%C0]F>@CD49br?)?[Dt2q8kh\>oQjaf\_56"Vdc9\.(+4+Cj@*9hQ,j*e0MmjC0#+_=!;eRq0'4J!DG@fdmmjgK?H>nGQ4G%LQQ6a
%cWoKRGi4e`eIj9me8D"b/k)N_*@/=(Mtl<N8pds@ZhEttS&\(-<prX`#,FFnQtEV]&h7>+Rak.;G"BQP#U&jY[kKqZd^CB(%o374
%.DUVV5/:!R.r[f6qi/<jTtKbulLVi/@(\:+Mlq$of-/\UmETi6*O*nMeoCRJ4Nu"lD7r\#G[*pMNiLpl<=>1S>7>/0!P<9uFWIdP
%Xtg,b`_8-ql^;9K2J4d;O,dHCI(afbojadmpUK%jde"\hDfCs)UbcbnH9eXY6q>6Q4U?3c5/(dZHhg]i;GEalI45roGF4k+,=@7m
%Y,?D:DbYf]<>,F(gGqOcSQ>&r2nk/RL_]Zh`6a,3Bmu$-D[7p3Ac)M`aeoL[\e7,Yf"I/7:pFgNlH,u`@hbYZO6MhW'o6+V\crlh
%hUSB1_5`r!'edC>GA:2^*5^oF[JY\T+']EE!(KbM6N4nq8><&M&(r-IIU]fYYJ$G92-hFr%4i_^V:V'q8MKQi+\oN'm:C6.KQ]Ik
%eZP')7ZnX;,*AX57_$uL/(l/W!q"](Vfls4Blgu$NFHdH^#Y*mpQt5G/TI^lVeZL%UQuCO0H\e5X%Oe4MN,%8T3'$T)RJ6a:"%FS
%U_8^<Vh2e3)-+?8aodu#\Z/mFZ2;XcnM=e.ec'\n>qjda?AtY'Y@%a4p<FQs#^0Eb=0=?5mbn&g.:1RML\T,p*/06HW:,^Vp%.n)
%-:Ah#UWqeZVsB/NNIT!nh7.eO-^^lm"KmDpi,oT!YI<_:BAq"H"E(W$V56MF>L=e=Ki[HC\:jLtK5n4+UDZ2HYPs?e#L.^mdu4Z%
%]F;Y20M?u4c.l&!qs!4$h4Eq#Q`M;FJC"q_7M3`)r7]%1/%=2J%Og[ZGB9:^s,Jk_.%*TVm?T8X<"1Ke'20ld[Hj"oGOLu^%$4a_
%<^jD)'<Y;]rO;=ERn!<g#40%uA/jRH%&aEe`d%bnRrPL"N]Gp2ponm8r1-/,?<<=ifYa0h=5fHUCfon-Psm1h>qfNQ3c1;F&gnEI
%X;jkjb,4VFPp7sL_AUbOAL4?@%?%l79.]AR@^3rhUblD\:i@Gp\_VP"7CeTA^1mL1lUTmUDusDDg_b$_+=AOKBiRjL=s?h]?W+R"
%@#8YGiR(d!P'7W6\?=5A/AKR;f?\@i-OXsXM_nqN,(X5TL+=Nj<.*dV/kT`c$JDXNY,*<t<@P<)XDr(6epZg1%-RUf$`k+CPolu^
%A&sHV(YCO_?r=(A6CKPTR#Fd>n@WcGdp5\<M+SF+H5sJoR3q#W\TI3pkr2`J[8]_!Q8&c_fPHg_SgN"rC"\:`jT+eRYN0,:5tuV[
%f9@'H.]G?C-5"^7[.YA`ROg;hiS$Z3,RM_&ian>l/B>G-\'ZpYq@uJ@^CT0=>\s[\`C@1rKNM;ub9n*F#J&CBjkpr'hep'Z8BPZl
%F3%_@p:b:ElDTI]d<OLMQr^51ps_eY8WH<=WN*#dG,nn1mC(@$Er4/u+0rWmaLEJD=0i:jGS>9,$:jKZEa[XgE'ad3=0s$>3FC52
%@_A&@m>FFaMjS>=_Ei!fE&osCC/l4t/AD"(0;_#1^oWi^.c6VrZeB>ncL:P[d8JE#(k\3VeS1)&J3RCI[o&J-rDL7-V]tnJ*E8\O
%gpgrhn<2A;d,oqcASMV(!jn\j@?5ItMj-80eOFR$lRokXBd]n5Ct1e11H%qkJ"bG1+'&2BeXpjU)EGJ0HrJTs(QLP9C3\j>V[S2`
%EJDQUiR/bEnfbC!k1L6?rT7inP&qs^N;-4>`oK`M4"u[SR_)%U[bDlD_'#"dX1sF3?W@/'EWOn\XFTbi#li4op[$i'deTa,b`pBG
%Y-N,1X8g*k>"B`e]Fs&)MXmj7Eb_#Tib5*5[9(4Rs.WFa2`4(;RP/3&IXs5krZ]UTbP&;te(1uq]B<8J.ln,kD%?2@n6ZilXjesu
%eg377phRcYcA4so;!,>p)?$@tqa0eYP+)P)f)JWGAl85o@RJ[t$N$[Ec-Ru]27un?T=RgBmXJJDIJ`fU9(h$"F6EPJ;K8hNEIPKH
%d^o+aEbf[_6)d`+p[7m]T<8!7QIfG]4P=nM/oQ/aYeAU.e:PiS]cGrCY'\3pHKB),P==g*g<,c[_mS%6:2d9/_L;X*XK?<pl7/mu
%rSkr*='KI@DS0=k4FU0YkOT3Z/r[2<Ih)VcjiY9ui58%!r9\RQrNNY23,`a.$CgqkdtK1KSO'+=hL/W+epQs&L++3Kc]:QhFuP5;
%K/]ttIOZ>%no$-&e\k\k]XE,eq7O/kbF^GP([he_EuXd^(l%fcq$I^(q=sR9T\*Lb^0<cRT(YgT_$?+^aOg=NRb7JN[efX4>ODbD
%h(*n6q9k"!pV3%Rl^PA@9B!@lL&Ii0/Y9nmC4-*"7,R,BC?mbGeQh@g4^;,AgiMm:'ONJA?!&U?G[2c;K837Z4MPsK;QEgDn5Wt,
%rHRXmLDJI9C=$hQrOUeZo"8:FhL#*,WOqY6:tXL:ruDE5?X%f)lG,+Qb+$^mKi[TWq821ZPt/[dVoOc>Ggnfu$JjF5=?'M#8XHjU
%oA1GE>jrjGhE"\c\P[ZPKgcd3O6;fEj'jgs4_G\iDr"VJD6D`@]=o,-pgfTZk"#HsPG$G)ZEX2&rc-UT](;?dIF>\3,X(Z>hSEe!
%keHdt[?+BaMJ)P[Oqc8%odrga^9_*o<*d1E\[Cq#Mo5>b_&)Bj:gb.+kk:lHD\epD<opC4\*G[a^U1NMQ$]jpgRB>%n#V3j:Y$?L
%o$`fCZD4mi='+\E?@JTu9P+_3m1_]@$t'gB-WBfAV]b+Cmib`u'$Rsf/0>M:+^f]_qB,WR[DG6*gHt`2d>RJZe`qe!7K;TEX(_7a
%]@Vb-;K90n]\iLupAOUR#n0aSh]Egn6U1A=&*o![iD%^J=4jL:^V)c]288mI<fYMpSQ&5%%gDIlak%ZfX1.bPiVrTC(PSE^LG(.=
%q>(K]NoDps!/a%VPCL"0oM,!?POud(X(s3jrS*$YkP`4cieEh9E'c.r]C%9$eNRZn:'mPtZMpPHn&54:qQt'=5-6gj#HM35.qOg)
%LPlPZG4]?j^!b+^(KW0mMpKl$hLPBSe<m=`^9pftHnIs-<YmeI?Rp3<0Cf9^p#(HcJ+q,9cQpaIJ$9a.Q+?d_q9l7WGIG5iQ*4kH
%"[.+f-=aBs?:R:e"78.a&&d:l0:eW9pO\[alb,XS_1"JY%_L&UDc3.`hH4,g4GlT[96:ra.)@TkKC/L:(n2mM\[_>3Ct*h=e\Kpa
%*uoq(XP9&SiGN!:TDi_>I^cjc.=30'KdRgHnL6;`1n^mm>Zi_,6.'&nGsf"f0:oj[Uf#<r^31P5^\-pU`FeF1]5V`cmOn/%@Nk!/
%ZbG(@Bij^U"Wn,!a/9H@g#r6$IpqYBRa1a"nUkI<bdW#C-?9"/]4]9\_[%nZ+#oOnPK3.=hL@+!\Yj?RYOC"fBtX=s]n;Bjn69sJ
%Q)pJK$TO)7BKrt,Me@+%7V-^0bSd;W_qr;2aVO@tL?TK)d9qCjnb9NHo*g&)!^5-G:1/\DrWRuElb^eVmhkD8m>b6^KBC4krn$<Z
%q.Wh']!hI:PR!GVDnmE1h(OWrK>YS*i5!m8&i//tJ=NfcCWlHta\5-OF2%4U-(7-hU3]<LSNbdA[AEJmU3?!6`HqO_E<L2AC[h&J
%^8U-8Pi\fe:S%RQ,p;*W<MEPK$oKeEk3nTMlI#n7HF?Ibku6pD=hSXbR#cFP0Cc.I^Zl!tF]*m"eMZ[3gq+s)m<ioG?q:`NIeS67
%*/5f]1OnpeNk3^jcihmL>H?+^[30gcqtLkSeVj"Irm!!d]RC4&4r3cE6kZiai'7c>K]HJ`oafX4eZC%nH@$b>,inlYf;\r6&l/`s
%?kf'mX*nRunRd3ijI@,];2?G.?,lY4Q..kQ4CJlRo+)@<EjMO)?C=:E@BQ+a9d7P0ke'tjNI\e7041+q.H5$.'R^dRqf$=D[7%Q6
%^>a5kl*.<IbQ[7Cqi/RXLXB!j*Qa^"m_@IK25f\;+5"+:5rDGSB$cF!L&SGECMHgi3M7GUU82.X;W>I=<JUB<_f/7Ph\QKHs.YOL
%fM!4ZCfaK/k)5\P.RT^N1=N:BaGZRP.D`TLAceVZ2+X/OhJ685JUW\O;]'am`)G\P25?rsO[in4@Y(E8r2FS-3;dlZFeA"$F*Oj?
%Op6EN.0Mem+[O0N/N<FlQ;]oY9ZU-:K`sLhk?7mA(n`&*2!dM;Kg7m48\8Ai;oY@&L&DqFf*a76!8<i:kn*MriS_t=((=,EHOq8a
%Ao_^W*\AkK^n768<PE@c?`r11Qp8"<UZG;U,YN>)]IKPU]tO%6Ut#0[\@,^*qgP/CXV(,KrETb80Rt(,J=4g4_V7oo(eqDcZ8DTG
%6e'r:q+o]LVp[p?^$"+=#BNc,FKkM5r8P]iU.J8Q0J;_"auaD9?b/ah`gr%[0FO-0/AJQ\LT='T/+):k+5NOg#^Q"\Hl1dfD=QO]
%d9j8IN+?!(O&!jf_t@Y3&:!\l&8C"B@.@1*A'erp3fm*H4ruR3D9P-rl/S<B/XP1P[eDs#E,J=1>'M.g@P1)hg/,<X)fdAbbV/-W
%6lbCcWJ(5nR80]tB"n.9#>hVmS]O.bh=Di0ghBg2hYotcF<N*G4;I]SH-iLt\KhoaoNrnpcT[V$'`A7j_Yd:$e_8'!`E2dtpF1-l
%So9EMb,aM8jdt_tM%nm)ruth,r"`7e3%(&cd!?J?Bl4q*G$_o`R0PSiSk1sHJmia:`*@`Mq[X??fI/ZVPE/)ab0X*rT(,R$j6U(\
%9(m!7X"cJV[FjC#gcgUiKba>.B*:]=>F/l#Wt/mn_L?QC!LfX.(U^rS48.Co>ER.4%j&a+Y;:B%X[:Xg81?`mh'nnD]!Vs15!2dg
%n2V!^k?eqL[ML')g-'Tm79RVek"G6gIXFe<ON>)B>X*.1\5^f%FIKbR?`^?3J'',Z"dLa5+5Wuu[g$4,HdR,[o!N`:dDmr>D*9Pd
%g0NI@kMMoHPk,m-^K5[QErQSL#h0)t^H">(Cu;^RZbb%l[FNAX2gRQ*pE(@n;qqt[NuV>;E+Q0+4al]MDng]m,HP!C=2&-->-a0`
%d\]=^:8dlgkRNIcHI'R^]j%IYq"UZsXh7b.4udMrk8OU"FFA/2Hi*WFb/=$D(JNFbaN#(^/aubeQ-/(`X])%G=^+&cdTV"pC>o0_
%l,%lO]OCFAL*;C$F+$XMjk3Q-H2$:LO`oEl[JkjL&iEF,-.Nk2c./8!qh=pq.pf-nN\6e2WA1PM>*FrfTI*&*g-.,HH4@W:]^ueF
%XS)%YTe8,8-a;1$qgESpr416d7r4Dr1^Rr#KXY8gk25Y$$SU@p3\TRS(GG+9qK]HH6u_R;q=qd)X'BsoLCN?CqpprneM#8VYg7Xm
%fNXBNhN&t`T'\]k2Y27sqV?)S=Ch6hlgXNBiKnm5@JV@\f"Ms8bU"n.1m'sU_#E/:^kl_<I1XuYerLl#BVZjl1>s=SkTF1+ed2W5
%G%X&,bS`'9Fk5UG00;[Z&?`+-m5^bFY:WkK$LV0k$;BF5&D)Y'"??YKcJ%R4fD!IXkDbNkn'/IliRPj%PJZ1m6=o36`oj">-L+km
%J7/]Spec>.j46SV5kYHeD"[)-T">\MSlU)Ts6b?tnBV",j^V\$Yo2D(/3fbrT@4sE$nkBDSUjm2[o\UYm[oLVeHNFnf3;U,kT?#'
%e$/m*=m*$aAaRauIQn]r$Wd,bQJ^T"lkR3dr)2g4#IgeZNuP.*K>cYFR<e\anaUY[_5hDYoG01OW0H1(HT5bW;Q/Hhb3/K=:KO7&
%Go42qXm?IiXMeK.cd8e&-#i\Aa\$&kZ2Ht=RIimUhlD.]3:B(ZJ>hAXfNaN74$E'bgSZ$Q4S@TKP[9[44<5%Gg5:Gi2P,#/I>"Qq
%q];j2g34c^PeC4F@.N%^D<Hj[LHI!M$f?G=q>P3<gt_IBF=\7!bFMjBlhoHh2/_=E5fDKL6L2a*H^$(di9dmeSS7oqOXTQIYJ41D
%.<`q>>Y]*XDQUMb%F@GF'nXd)QS_D.p!NVk\:9!aX3nEEK*-o5^:Z,+:NmkK+VN'u78`^NPFat^l05&g.Sh,_Ng@&:TL<FHon,RB
%m86E"=?_2aHbi]X3T"In.](#FP=fQVAFJ4-a'u@d4ZY*P7O^It7Z#1%B!npJmMdq`]6rf8g@F"nA1d.i%uoSKmUP(EIn8l/ZF"t)
%26G"m)t@:HUXb@dpA)Rh@,oqopCAeCPGN<8C9I;Ma5Ia=aLD%^DiP>47d!SFkC[f(YJ.BPr:1d6Zk9sgY64fJV,`\J8Vu;Q0A'LJ
%F7=sa-$[daF;fZ)Wd#Pr-9Igd%*Ho1oQoW<UC'&6ebQiO?@u(gs'@hFH/`+oRod)8URcf]Sumf/Y^#S!#iH16Q&cHeO:PO8kCtI(
%p-*u^\6$66@]b"?9>>l0mcI)Sd0c]12?H*h16:0imjb0oVp7^gqA`m#q)QE"Q+QM!2([KD4"YA5\JIWg&c#[&Y.aYX90-@P@5dFi
%0`h6+#3/uL?N#Jd`*d$+?oeh]k!Q>aneQhRNGjLk;03p"IsSQ3qP82Q<([lD_5mF-F@K[2(-hRi?G#M,Ds>4kZl3Cu(dapqI]:s)
%,<aQDb#W;kk-\U\V>U8<^8E7D5p=n<Y/!*2h^u2C`tura%KkL9&J"JrF>*qcQ$'CF^#4EZ4h,tl[=pP3CGRAc9)=`g"KN'EI*a?F
%p=%/7OK5S9HL6+sF3jF2Zd*cK^Y$P.cY%g_Ge_h*%8dHm(*5^?nD%C_pn5sPB!?HF1(CcYlf1H+n8No$@rHYWGdV<`P:BXM5F]->
%c"?/)E2nE8NutJG=fW(W#[=U\k77pEC5c@JGBe&nN`F_IDtV;345]?RJ3"Vp1Y;V\L:P'*]Bt*&9]oHcZ6&Es)id1t5MOqeFF*'D
%r;M,cm_AQ7Ehl$tTr;?<m.Yi*Z8GDZNKq!=$Tek7J;7Kt7cElL0qgea#(:l=(IkUhY8mE+g1mrLD[,FCU[AY.?cmJb3e&fr>`ZV)
%K6boB&8>??,X%`G2?+^RR$WjPGEu<AXK,/ILWr=Q(eh]T(;)_308(:X547_iOVN,ToVNm?TD)CGjnn4+ptiYDoTSb,1;\EBMpnPE
%:^E+C-\dC!g\]r0obdm`D/86X&9l5'VZWmk_t#%I;,XA:iUO[@BHMirrCUYg"=/DFE)=;QN2[\+`ou!8)42ggK,D;0+\l1r0'k6o
%_:kDAC^nMMH>RWuYRiGKDe#=$%ga+5VcI&Ecg#ZQc0N\o_Vf.m=m>QgrAH%ilaPJH?TDK904(a::3OL0>HUr*pXe"t5/2hk1jHE9
%fo+a'@.Z[RJK$f@'_\!P>A]P>*`q7$p#b/f0#)Z!@$RLkJ#Cp:ARO&nK\[0T_;V$jGbrIB'@4G,\iBK7n=P)X\.36$_s`l@8khog
%@]0nYogrA$C"%A`kLdJ_n9?Op?)HWo0U^7`@)(Q)h<<YmZ=KaRom6"5frdNo/N/s6_8a(tmolqRrLtqD1!7ZmZlrTJqK[%;B1a4A
%o!HnM4E)sT\^dnSMB"iaH4-eRHEPUU3p@r6cKMS)oo"5n/l<]8JRR"*^4Effb5ce^rZ7H:=+g.CD[QfRK*0B4k\TY@(/TJZ2HAm-
%2Lg,_%]a+4$J$\T^PYlZ-%6RNX<*TJ2BLCL(Z2tU(;e$bm.,U8-mfqn^>Vh3JRmQF%P_"h7Odb`B=JV&nfF3-Vl'.P2Rn\?j%Au]
%qcimDqR:g:or-\Ks75UM2;"LspEPd7qQG*,IZqc`X7D*n-:ti%H"F_)dU'-Qo3QE`I_HE$2IA%@/7ZGH=CAc3!2TJZL\7M<iCVFF
%lRWntd.jnk;E-*!*ocF>mk:\:+%$5q#79%_8.V)0o^MCndIPuNo&n$i4,16k*DuYD53RB)#FKbkX#R:TVebt%nn,6#Fsmd'lrThI
%<9@L$_nths`O<V<<!?R^L^*"?hYPX9\u0BjlA[h##E1%%eZ%!!MCBVkWkctqUi_#sH+j(IgL?lLo[[pAleH+l2<%R1q5n/MR%6Do
%E;4!UF6D5J^\mNm&Ps-BAG?E3-V_X&lNH7_Go5M(=lf=DmsNE"Ll2+i(EG-0D_FMOJ.%:.:'\K*g660rg["a-]@#s;O*@@_[p>BU
%1G%bQ^D%/QCOM`7s#p0&\PAX.qH9[#nuBlP[W1>`DrR^RC?5ddPGHI*L7b;TG*kGocSndXT-Uu)WX_6+?l5_*06`o9f'l704@;:(
%`4ujjWB8+Ljj@n(elf?2ce$kQj*?E-$$W^uQG`0!12e2:N9Jjf7]rG'@_.?Pjb2+\_tZDD3_[lWmj7&HJ`6&?apC/Rfq&Fe4G7Sm
%rUDPO0Qa"Gma("5Hu>uRe/#Xo;%M0+]ibR)0/PeEL.n"X#VBC2%qNWC+6(n(dJ&j<q\,l.TO/`8I;&7)>efdYAbbJ7HDpZ8+9,NM
%neV4G(p[^>j9lp#fOjolC2ke;2k^0m%d7a7k>g)?)s2BOhR@>`\)c7/h@4lTLIZ"h^h\HiH-6e.%RH6EHOTK3+97Lq[ldGq"]:Yf
%@8fDZ7:#sZa3$ofcCEp!GnC;u5oqk*!$^u2a@Ld:[UBoUWGf[i90sZsW]1.WDBKeWg5ZC\-Qi2FCOi@cRs,&.@j8K<@op(GE$AWF
%$=ldWJr`OVdXtDf.#f"p;3:&NVAVGRn=[S&BF$>C6&?tX#(4jgn.K29DB%]4^^CgQ\2h36k950\ecfsJMX3m=(q>TC!G[N@<,2Lj
%5`cX]6EZ\k]*.\@?SANUj9@l>'1o-TG9-3#X6Y*lXpqQ90*2]4juJ+V^^L48`XVLQ*tY0fLJd+GU?;a%!o(kQ[`or<Fr^d<a_&)6
%6%Gq*M#^.q8'nc+n/:6=+`Ir=(V2Ll>SdO=`%@gQM(g#Sgecp1mh%s<O>&(,W=V?:Usi7:7H?oN)R>MK1lObkTWn$Z+F8#W`',@8
%^&o_DLE'GV!CK<>#;ee<&7YjiCB_@?^1@ZV_>6/S1l?O6:^`_FO[jEqX%"5!(T?nOe<^_k8pgY%(YH^,k#nuWONfKRL3:qM"$)5B
%7)8qU845X;O%]P*S0/.I3_1XcHl.Zi$$IN=,t-X%k(CMXmOe&K&n"Yh8Us;*4cI<o`sH_o(Y"l((Y?S!)$GjLQdWj]-/$ji6OAa(
%O9T]1Kc#@8&P1Pt3$^+1AM8pG-!)4c!-&*q!,F0N!rrLej0OsW2.&QnAKt>In]&[R@3Y2,DM6Cf8UFU[/cacB4HAnsc-@Uh#URi;
%IHoAsTuS9+,T@&Q&6L9X`_E5Tp/?cRhG2EaLB&HQOuOt$ksbJ!a@bHb(0J$tBj_)nM/C.0*&b_Y$Pr6J$U("#-t,[C!*C:u/PcO0
%?jet0>'/+`ch2NG66QU9ehrP@JYldL,pY8t>`]TAV#bBD>Qhm1Xq_KrA@$r8AQqh3>(;T\M%p&<KL8er!P5hD+8RGB:`sI[,F9/q
%5n(Qdg#Pgl%kQU(j[Hr#"p-dDZMN8LD4DZVFRVa\RTEU,Q\gOr0HuUcoOo<t<uN&$LcldTepu,K84^@*LH\!D_+SIG(IqlN6L,2%
%dkFo0$rtAH9*h]#A8m'H9r'3>H/2q>D>?MT77bE:7E7uV*IpE'K-@K-:rl"R#SEBH2Ph6VOfq$!jJfS]kK-"0FAiI&CoIDsD+-JY
%,c&UK)Ror@q507%U(*YQ*`ME[jOX[uHGgS<B!)1aS*B!Nf2keQI*;^q8tNDN_17jP"&&Kl^o$c.ONRh0Ut$Y""!F'B":DB*a9Gj\
%d!dKqV2u]%NZ`"k@S2W.Ml\8:<9sfT?6K3L'hBJOTZ(L[gpVo3#$l[+,7QJqJPUiJ#D!J>Hs["K^caVs'GN,TJ3YAkgVEJN.f,7"
%)@%no&0<6^m41:9JfoYuJ08[mN&V)o&-m&DTH1QIC'#-afd0h=oWUA#1T(I_-J,<gd&(k<QOo&t;K)[tX:,X]JisGXC0P3k6^TY)
%+U>]6_rerH/6As.N/\Ck-3Kr4**KsG7(fm5j@egX-H!iJeS"[[W:2g'!r3L-#sEI_8t]<8d=q?8+A!t!FVIUbKMe^e.i!&XEX35j
%fh.Ta98Ia:!i9kYD5H#aNI96nf@U0bc[`D8,n7A84pojaO?*E<q\Vr`ni;8CIK:9K$7-*/`$UM^NWlp&cHBk!&EFlbN:VcN0qsHp
%"<&/Q;83ZH=e9D($]MT*foaZ8L-hOjn;2!Wi8Q`bR0s+baPa-??V]>G!aBZ]ZBQLU.#KTekn2\4&D%shTTZrI2MMK82aSC%9;nY;
%_aE6>^^/I`%2#:n[LEe9#Dc_"WYc=!L2t2ieh"+h[c*WA>9p(75qQUMq`iaS6sj7kHBjGi5UneQ$#2js"Z^q88t&r13K.E?S4lMo
%8Dk6c,m/;UK["fK[2e=.5`E@;,@lMk@Gl#,-=mD&@"A>Y][GVMedkD>bm<MAr]hH<],]3!,9^e.%4K6_i2@ik'P)Aa$=p;tL,s"-
%E^jt*C,[IqL,__c>Scfr5me5%=r>p^D[+,seUX[al/!$s/lGo;3h%[[_$*N:_(hfJ!&NWh6#%5G1?YF+C>MO#R^cm>9I@QD]+ge^
%GTPu[m(HtC"sbc2$C]0kktTV\9WL(CM<R9$'&)Eh"GYeleNQYT\6U)iFg*f*,p*b@nGA=-+I?ZR$/mjT4G`2/8*6;DB6i"X%W*(m
%7NQe''*RUY6XWdO[L*@_L+&W)UVN2\:Hed!%:*%mW9nj?O,Ml6;bI<4*[-,ZPTZT&Jl9cS/)jAAJTfsEn[A?D@*3<IG\eo4i&j=D
%km>Eo4^1Vt'N6;%&B#0T#QlNt0Q@4\-L:.f]9(E[9,fZrR=Bq#:p'nY/p!Qp,>t$;(`]%).Wc<+n*u?B:.#=+3=t9aaRrP8L/C'a
%]YrudDQ)7rO7G(3Gp5RAKZokD)jlk"gH!:5Qis/]LuVZr6paPc,U=*9Ys^p54ck.:#dYA*H,*WeEc#4;+\b<H"sacH\ZUQr%L'.H
%\\P8^WhQhZ9LR*M_bg(4hA9TtjE]mlQrR@ND9NG3*ldqg)DF13\0<9OSIfZ/#nE796A!kB/$n'j,)f1j0./kaYcqCu"Ca`U?.%C3
%/qSJp=-D*G3<>ej@1gZc]XMHmU#ZFDNK,TF":Us+UN164U1MNd/.<ci$U'c:6605Li$6_f^8sTqOEV>3+/gXkBNI`t5_O<T9!U%9
%K#gjO#V;t&KL8CX$LhCOOJ0Mq<9ZHpEni'"/HV(ME&)9t%ZE.\:RN'DboPeU@YbGSZrh?N"bjl1b6SAoA`X7d:f$RS4Bn\t_Xb?M
%=I5g^?t9qJ8-@NVQ8\pZDWhL-$gSXT+cQLX,g/t9<`OF!.%=81)R#68Es^,[ZohKCK6?p//9G]c&JRZKF^YgfFbJid%0@<d)$3rY
%kU,=^.'0rm\KpW@83s9[E<QR*U]M#DG6#/j':2gJCmQn:J3(2B":D+N$6]1O]JN0(>4WFbKT&A+dVTN]%"^`"Cug+3;:5GZ-rAot
%1m[/LOFYme%(3/[@Qc4U4C9f6!Efp@Eh&55)ap-SVZkKk:kQRK#feeg333KcmCF`/8AKn_\Mk'J@$;Np5Xqmn#I#3if#>K;AK_g(
%#S>DHM%W?eJJm6#-GI=sdBJib7O^_Zcu'uh#QDmnoBEleNbY>ITQ+ssR+qhl`^/rjGECl^]Ta<Mbt4"g+(gq@.G-^=mT?r!j>uL/
%ah1-VPsA.r_Nf8b0f^TT!9A0@D0"=G-2#]B\5YRV[:m'c&5gEe>[<+WgOUdX#dR^]O;3::mq.@ip_$6*:SG>_%;\s(%?MaQ.4EA$
%H<T9r8jRnf(fDDo6QS`GM3^.3<S%XZe.=uY9d$Jp69NTDItWK(@QUBZ+M9B_*u%QQa@V=!fc@F!`'.T@jLH^,B#J?)g_h6P/uG:X
%5TT40&r)[J85Y0dCQ.eIbF9d"C`D?31@>t=<[6?B;rapaSEg44\TIe9YSGZ^.L&4l:o1t#V@K(_E_ZbRGR3X6U$EU>Bh9>ROX?eI
%K1Q&3dXYP^KQoBk0usXDg'JPNHuA42SkLHs:p9tU201dFYTPc$L,9Ud?BrM')aml\#GW^*TZ5t32]Fo]o'BI#Zt7Je,a@>i;!ndC
%Q4&QWE)2%#(gm^kOgGQD%pY'>jWKR[Z*"g5^QE+kmjk'*$b#^>6.hP\SYr/)KHcFL$6-QUWWJ9AkrW`6\nYS!ZB]6A7'ON0S*Jjl
%BO"146rgB\=WIqd^9elB'?R`cK$]$5^>(MrGf<HJNI5pF(n6Y]#dB]8&BFJGJq2DF)'jTp)F:1fZ,]B36[B`H$1h9+""^[?SJ6n^
%J2D9#&@\SX$2'*)&;A81L5UCO2Ltqg"pV$Gp=Zb-."qqmb-Ig83>cB2`++h;ki7)&fth-sYR6"ioEo!)9[,q[!\pc>'TrLH9t6N4
%"qCqcnd`Q?r"_&2MZBH<S,=+Vk$7Ko\/T0CjMsM3A8l3l-B-g,%4JJZTGm\m0,3gcU*$=U<Wj8P\u>9gFsesZQMrZK<OeG>7\QC<
%NV9-dn?D,bU\+I<@Bia!TN?;kM8`)dD=W@MBTusGBPV:l_]6["D&P(c%)?+$$<k*9Ka"F"p.)5LL-#m1aV,h;1$@U\.RTX))L7@,
%6H&hG=%OSB-cT,gUUjB%$rG!*9PMP+cgkmN-SRkcj<qP!iGf=Y1R/A6^>'2F9sb3@7RAQ%T/;74br%?t5cu%eVZ*JYM4lVrb+\ka
%Y`hdj1clc@B$(Z2k/kD;G0K/E=ZZ^2c!l!$bfbZuDf&.uHm7@%7"[#l<MUg8NQng9<P;?VL1-lCjJU@S#>&-(-kgOPPe1>^(Q6Qu
%DAXe*6p!JhA]ZO<0FE1bXsFTY?p2@!(f?U4KOm_?BW6$F-,W6+7\Qm<%651LNH``G4gCN.+;RFgBVFT8e8c[b3Op@^li_'i"A^q;
%<4EW*;@o"mXQPcc@qg_I&IZiYN_0DHiZt%V7ghtT&a?n^]&sE]K?9O"VlCVb(r/8jF%gFj_#WdH@DIo>iA:_Y^s^I<l&J*i!7&Q)
%6UI#PMd[7d:J60bdUY=N>=bTH>f$SY+AW:d:L#NpGReYQi_W\(f&O%E7KXeo?N>@lkL+uZJK^_e?4n2Mgsl'X7)2@5A&LWM[_h$M
%jN9U7E\Sgg!0%sE;1WO4=.>47ED(8V8r?n%$2>[Z&.B#qP8Kl2CDA,#(F+p.$phZU\s=nXH57@!Es]6k3H#2M4UU'kAj1`m-H-)k
%Nf3rI-tZ1;[gfhQNb7'ULbD`,O2=FjLpLA191K%]$4=[<5'MMr\dmm.Je)Hj!6CXB-p!LXbL/I?MHmEFjB3(P-Y5<c;p+I#-^(H^
%i+$CL5QqFTn)TEU((4`edqFKJ%[PDA@780<P#+1"ZD29k$7i+$\gl<#-n=Kt6N^O5?@eo*>)/]2Q*QMBRL>$Sd[Pbq!$O37FMNe=
%*q+K1,h=pjL*.X!IOBe"M<u`]='-H>'43XX'ECE5bNBpo/B3j@`C^9q93ZGSK%q<Uo['GjM9r-Z.L$^QaklXW`"7%VE[YO\]SVRW
%22]miZZ,^+S-]q?q&Tu4nK8ET/ua;L"Y'[C&]WQAY"Mu(M?.Yj85\U)EWR"oraBja%2&t*7]2U\K7m\;R90W4Koc+/)MEg7Lprc]
%+<GB@RA(iQn>r%4@X-pAT-329q%bX#j'_t=:c`j_,Uh@.G>'D*FMLg7'KKM-'k%dd6a=Sr"-FbHU+?fufM.m_"[SAU%i0sA/u2"M
%"-4eL`FD?4?^Oe]+gI5'6nZ#aGidsW(^_*#7kTmWMXd8Y:rKV"#33-SpI[W*82[(X_=IuN'X!E!%H$AnM^*D76>R]-i5jb$1X$N/
%c#;H.iI-4^l)2KfB4LP!,`ZT4E@-<1.0'cI-[/Gd*KHC]j?+1_3eQQl;M>^aO%pY?J%DF5GWJT]V:$Ks5UG9gP#*6*H72Jq#P_a6
%8fP;."XopZL^^6J-gQUViAh>\'OY@$*MEK;%cLI9<XO`Di.H`*I11kkc:6mlEq:D*)cC?'-FH4k)NRC^crbD&1Z\(C/>_8qGd9(A
%L7tlK&sWKOU^^QYeU:^cnAMA^K$,GKQ`BZYfh0TbV$RPtcV8sIisdF)K&Ut$ed/31%)jUrc^TZ6(lSm8:FAj>JKg]f&j.k!0aqrD
%L/+<b*$:5%i;pX=`KMu>K-KXb6(mD7!@g\/=;9mI-qPnIa88sf-n;&3LS.m5+dT+$&HpLA85Bh/hrR56MAAC.*#Sku&BPcPr%sMS
%-NP-?a8k4V),,Qs4FuZfKs_'OE*a6Lda2Eb#ji;m:HM[jk/6U!=S7dL))6QZo-phRj/E`Z<Dm3:SRkN0.=mS(/&9#YB-I[%Qp_Z=
%mLJB:q']>EBiqg*/q(,eK`r=#&KZ=7;n.\]I7O_-8hNW,<0EJk%R@l$a@#ZGoElbUn&U.@&6_0F>NC$L,L6\lHk_PPflEk<_VJc+
%3KZA2';C&P\HOHJo5.XK25"%W_XaK'_E\l8U_Lnf_hGL?>Ch,cOt2jR6Dpq7/@L:"'o='Xi5h6[Fim\8nfg@^Q<k0(Vh#kc5e%CK
%#>K_NS]2o7<6jV/"ud(^(lP(9$:IOFGm;M^5uCPHcuG$4%$2O]"QJqU4NnAq3XT"u'.t==N,X,$PhA94VBp+!=K8S-M&;9SEhmG5
%Q>?qmPGK-ea90=.hNgjH+bg0\'fgNS9^UV*)#Ha(6$6^h;q48Il3Dl&2f7U++b;2i%:JSMJ.]kg;W32:X/:I.aSa2uDp@$G-l>,c
%p]n=`O!)VijbCL'$P#0Q"uTg5UH\:q`q+S,,0\[TbqTql8E00l04<I\G*u=Ij(#8)*@,U"%QS3*ERp8IoF+q6Rt6`B=su_Z;mVGP
%X>:_#$9R<W:aa'>d'E0!\kFt%/6$"<CZ,:&7jd=!cR0omO!4ZR,!>7KZ=S<A3gPPr8VmfqM+:WFcjk>`-'KN&MRXF6/<27u3-[co
%`a7!"I!&&=dTuoBQ9'11#$<#M6+>qV6-T&Y`)#%-W@&W$Ld7(M'F7W!XX"6QP<L=mb\0C7*El%GK:.`:(M4DY-AXO-Y&bk!TQ*kb
%]b5Y]m'lKGq$umqCeb%7bEqOLi?B0X%N"Xl6U[5lpA!.27^BWIDH,:-6:5-<^phd+>eWH'Ot*DVl);m=M$,XjOOn3F%`h]!FolB]
%D%q65$<a@5`o1$+d["fS3>eU(N9JAV7c7DPedMQ>ZK9$L.pIlA6KRkhPS*I-?lUT,"c/(kPouAG%u/G"/P0a=L[#^/Rogf!b>k3*
%2BDS.ihJ"]bI8H_/Z,J/]^TIj@6lAhL69,nA[s51\F!k,93VOn[WmAB)Fb-%NXL7t(Dni^:TZF/9*fbc+C_JHd>W'L?UXIZQ&B8i
%q/1eq\)hscT\@iV)F;8kU^+AHpulgM:56fs\?+TkS1$sq@^DG12X&Ts=]kG-)!%@8d8^DpA1HoTI-6DG7"p_j35jf7+kf8*k?uC5
%6'e_q"%:iEI_k%GR"T?3'Ol!Ak8<1C;b/)5546=O"pJ7TPG"(tW;XdrTJE7M4i^8Sa*TG)U+X5t^]6fJDV8)L84$Srnpl?>fc>Se
%O,RL&XoakJNfnH_:e@4s[3"-D&!.D3!T`3rIKWO$O?f,LpY600.d.X8ID.2)TQH5F,0rb%;KRlCH1`@DX7)u.3>/+#(FB=^U<`8`
%$Wb0)-rGRAB;G.IL`!Th1*No.ZBC'b`;LBGmNr$8nD+b.qCW'jf"7:TA3$7.ZY7sR+Z'47MUuZ\fqB]gQb^QC]T7ocBgabn_]tJK
%N`^ic*K#P05c?9+/]=Dnkh5a2+)XrL^a$q[\hrelnHmGg_D,!r$M-FaJWrbh$[83TABXT^cf/*$MOY[CXeP0N&-K#=8jNp6[5sG2
%G:+DB&UYIO?q`&728O3(,`lXhj5a+fJ6SRQg(5FSk-Io'O34qo@Fl(OE37tNJ-`Q1@2_b^2M8e"bpe6LLTa'Y]8KLCe$OZQ:tgdO
%8=&DG[7?m/L$9?aA-p_/:oq]-bmYtP:cCB=$)I)&13Jc*Neh9(Tm\*dh8g)TBYNd\Vhd_sk@DKOio;L5U8k>kOpV.Y\[hOk]=5m^
%APUkH`aL,5C#JU=A<[kT,H0ab)_5$FOeikLcB1pai>E2o4)T>r_DZph?\<E+m`ET0h%=""[e2cr/'(&.EUn&t6pQ4H8*^p;[g->a
%Ysdi3ns$1,37G`;/@*9TapC?E5]#&9&XeP]F]`YrJNV?DaTEg@J"Z5Ug:0l:iEbD5*cS!gKK(JXDO^m?CFa%t?ikC[%DYZa8co.@
%-i):H]O;WQbQN'Z'tk>'`5p?R+:I3j*6D3m*EKs7On"GVmni&t-p7E<5VTe/?!@CZpr"$1o)YCoA(AUu>61>_F:ANC4+X%o.5Zrl
%0\qoskj^J<lP8K]@ARdcC<Eg&o;`N05bPnR/k$%kRJMX$^bDY%@L*&U+5JL)\>:cqFMY70KNhsOL+_0kLtjPH)q'-@]R9$"rrIri
%4u>Eb\mUGQ"Wl\2?*u2?rXX!"FirSP6:WqUprY#-!7mJ#?4nZQ/MChb_,E0j>S!Uc<#]cK@&>e,FDRnG6oM<KN-c;2+htNOiTLXY
%4u^EQ==/MMjsi>nWTg?8<)jmg@l*#Z#f`25K@cALmQ#h\q<sG=L+0&X_o4qmm2Vk2PEbT'E%mis9Ms^]glT?^77qP>R68im/BLU6
%Us3'o,05*^^-tPl0e\f)FMV!ulj*N]G:ISc*Nr>PBE2;*kZ\Nt:@OVYDhm(l\;r-W=P%]o"NWnNpn<9B>3Ziq7a3-&Yrk=0K^5H2
%Oh5&aE$0tY\Jh%Sf\FP?boBH8';Pr19@moKbJJlWFCA9W<Q<R?S-f^YPM@%knBOCB&u[mk(;']>'IGdThiFV74Fmh2:hA.q!npiJ
%n,SQ6>Y)(=Bqsb?+C7&.qr-KC,dl[q@+sl(!s@Ur)K!+/Al^=@UH;SbVNR[8a1)3+Wq>dQRS#5%a=#:GB\=lU`mY$7lU:GB)pAQn
%q-H27]f[ofH+4O+)5<0*%#@/UaO1u#2BpH!Y#Lbg1VfGiWK=Zf5Qc`7[f_o?g3B=lO3t;+;\3c$G"iC?q8sig]T%j]H1R"<AARg&
%[d4AQOcN&AV.SZG[P"-[kFF^,llmRIK87OCjJiBTNq73#5*X@sZ#Pg.Y==9;8JFoJ$$>]$Y7*F-lkV5q#eiH1TqR$\GV$apO2(08
%IOGKQHQr^3.Ngd28G,BK_Jl\2EXb9jRQ5a$<<9Q78DD3*pL'qZ6%Pf6p]`];l30BU5s\VH!`(c[E/U!MO-1i,""`*(R5hne^gl/?
%.p2sOG!iPZZ7!3eK9c.@5R"u,,Z@XW/IH:S=TJ]E"$,]L*1Jk7ETb_@C'kR9^m\sM[RKJ"o+=+h`*L-.;f=_g8o?eR=%rhLMG)Gq
%Ad7H.n:ETjF`LLMm/(T9UEiba#kLCZQimk>.Lso//BZnm']md4oUuQP#o8K()&D4Z0X6e'1`fnt__;oUaG7*H=:o3#+"#<R&JRan
%<\6hn]QqW>=_&-$FuW+2PY];VkQEX;_cU1"giakmI+oJeb$[D4V%m6F:PSJ4+5k-G50LcP#j)%<SpPJ<@R0'$P=F?oQD(o\G?F?*
%H6B%<_DC@sCb\bDc%Qa_\LKu`o[&R'IAh#8#__^GC;Z8q=H7Q!/<!)^8gYH&X>,Bo8D>b%3SkfY-4\AtGck`bks1<uV6)$c-5G73
%+s:`Gl-tb7UogtU2)<3/iXQu4$OfBu"X$f9<;qEr6<d_t_`QGrPJ#Hs*>2Z/$I`l#lTDJ%X0BJ%p,JKT-Y-O4(M3DIZagY$CgF],
%#T='qZFJ<,D`SdfkiB7WZ9-.BErp.W*[c>emi]A27-'b8G!(d-"Q"?$O9h9f)TI6"/ao^ed0,gI(;uC.#I6aKB4V/;&1+nF=2VIg
%qUAM+")3n5UGo>*glVgXFQ4m1$kTi>YR4m<&A<`RU^131JpcHW=<<qn6$Mh31a6d[7&fUYJnG>+j+_pt_aFoYbJGM,c"p8d8Ee#5
%HqU@4JO%65\U=+)FMSH]>_0oLZYZJF]T",*,`h(LN\G*0ram_9Hc/9O;2=I^IHdC[57gEo![7CW8BDNn%aIAuWAi"%8N>Q[5`joU
%-9gIE%06R]o:I"MiY$kF\Uif!d6\%Wjr[uV=42Y&S;LNak?Uni<:(5W\D`&_N\`sh,(.B<Z4E5<MkkAi=GS(CK6JF'f%A=c^:Mp6
%fabKe?rPoXpMD)_`B0;UNe:uR&EGn;+]49=VrJ?RZO=Y!V0M;.6%S4!KCa>?L-VHT^]YbB@pj=!%o;M/aVBs^1S&9&j^e.#1mfN(
%ir>)b>I;XI[oQaGF2Uj:J5">1r=3:XjN?XT3?b$o6m;-2aDTDC,=iQ$83nF^S;U:\BDLV*.2r@Q<.+M3$UMUf_r^s&0gmdBGAs`\
%cl$I[(5t+6i"9.ZLndF.8<%JHbE4%#\8dEBgY0<JL\h:#`)"`'B1H6@6k3'u(C<r7jGG3l+<M./U>Q,\E;rtq8u0$Q"V9+K:S?Wt
%@M1.MDio;a4Wjl?-VsK#a>dqWZ8bIN,oBGH1UHl8'7`F+n1iu<GE,%9)oMgH7&,M-_*<%*,bu<5]VUL4EWPW6+]O,p2AY68G%,0]
%U/2(je;gd"7bUMJ@*.OEMBU`&2p]+S3-dV]5`ef*n&NH;Q(#;L=ZhujYh;@ATA8nT&=MZ0e6UYH+nspbWDF%eD8!_*_P9YT6*A6@
%ViD^+CuX*k$WP/3/j\R)QU>HMWB3J-6`V@.F,4t+jB^^70b(rFOlX#'#S)Ia5[>(I,*s@nL/;#?6L(feO!'4=WhA=d8fWG!IM<8a
%DA_Y)I'k[NTGKpkaOfEK9R'gb6%r3b^3GYj1uOH2Dm27_/L-0,>KC(s6[KP=3[9^WNW]qQZ2$+p(@GO]-D2pr73J]?DYT?FE7E8Y
%&p7.VLX,q@llKqnJhGiX,PW&CIul&K!biuK4Oo%Sq>/33Gj?/3TYeFZigO[&kX4dZ'?=+=8hJbD7b#d=?uHk6lA7G0*`4'/kGlef
%aHJXf:ff+m4c[<hX6V'-:nsf3s.?PTa0H^UQ2k"5HcQY,*mB97e0ij.-&;=qXn=ViE"FrPX/i(E@0uLf+9mV5\Tu_KB9gRUSCjsa
%iUk/5VRg6jh\nPBL3!E[SG'`1g+$UO[I*1iQ-/!\0&DJr#c1DbMN7IYc@5R`9_=&mXQl)"8Flp-<I>#s[@'_>o<M_3/@!b#eQ6^`
%8c(YaY\uS["\Fua-$Q-f$K>/4V+[^pN3+8O(CVMk#quGJH%@\SYk;go;;29Qdbp\.Q4*XC[-cd.bf--2j9F?]%H_odJ`&k>6h!b>
%][5Okp546mn(#M0Nfskb6uN?6WSPSN6#j'jmeGWKmto8=lZWHje&3I8kdO3I<oAlPLbI_h5i,p]a?QC&43<t=GG<LB6<EYZ#\G.C
%I.9O@IqEY4=L]jL0MVr\7"2o]/i[`LlLn@;4XN@b-2VLD<PfKC0":0]%!Wl`[S+IVYY&=ch=e1K07TeF4r_?U%OnYH>;qdi5dh[d
%CE@/GmlQPi(n1_u6eLb\e$5/3Qf"RWrJ4j(Im.9M6&P9J2,[M4.+jK43s+bE#7g0=d!SLcj9`pgJ0+#:,$'S<'!*fX*htH2"5+lF
%'aE]Rp66PB&?Ul!T,DaMYtiNUA#C;U:NB_PAQ4Gun2D!ANbgBF"b!^#^<R%+_HYA-F+2u9klK.0g`-ob?TcLpR$Xe?`_J=qY;d4@
%hMQQT4^_2Fr[m_A*jDbDpBg!!1ZS]ha2_MWa2[+JO1EVhm[kZ-L0Q0=VDIQ<=Y3t`*ka0tPm^"6Hm(rN!oZat4p):`A!eX9?rl6>
%PCq"N`6NXRh?3]S?U2Qu7",(>8u2_1R?/PGN`maDS>%6hq#FPCS]$UqguNAk%4@73NbV,a#LCt@IAFY@aNonq'/Ib)&j^M2l+an]
%/"6dWAX5.!.QIRK3B5g!lK&nJ=%)QXm8^0(Iurhn>0PAsk5:5`J,Ml9R-j4NlYk%sXIP[PkE573YK-R-9]'G8-silfdfX$RqKE9u
%#<=Lj^dE?V\g9?!P#G>#(L88<0XK!ImDoLX#a%XmMM1tk"Y!Q%N<lXogc_eNSY(s@lM?'@qQKc+);e?toGEHEj<9H=\PS<(m632W
%&GV$[M*tU^1jhp5BCBa`^dA4?7s_m?Wm3e0"=R0UQ_":WLPK/>qCnhY_9sLQF?<QU-_9F%f#GZ!h$,,ZIM8gRF(!K^*WF)_@[o31
%Tr-*lU$j+JLCHmMbL48iYl?5`kjFns^d@_as,D.(X7tdqIg<O`0'kR^I@9ZH6<[_6kFHnRSm<3Vl5_i1YTU$^,i4KmjadRnb87r>
%cFe&5+62V7(DIZlCWeZ@HilY]H<NY<:Dm%rhM5M&XPXWl(7_Aa)tQ9]"%9l]%hu!Dl+TH\(,a_55o&!;W#)&g#CYN/HXmIVG>L:d
%f:F_-Z-Rk<V59\4YG(i1Pf@tIrCQ:H#W7j>)stcRncI.:H:^Zs7kA?Qd`rG'J,c4IZnCEtj)^%u*oNp<Ehj(/Kko_u'<J*HEdUV.
%+u+YS,@R*aVf!$L`>3.h:(F1,k&[P.1B_p\8:V;YAdI+'jr#d8Y9^1Nq9jpm1>(DVJI*HTWUN>h%]&m2[GkR3Xk&m<o1g>\f+1bc
%YiZ=`TKgGRbRa43J,1Y0?g#J[oB*shc&$*Sn,O9!BJ^831O21'KF>9&]J%PMJ182(d#)FPkF;,JABkR-?=]Y(jL!p'c_2JmC8%`!
%a#F"I7,Gepku6)3SqfHdGcN-F=s1=o6D*FY"c)7a:E_+l3IMKn$^2TVAGQM)bJ,4XJXOi,7k,%34X,ZN"knfp\8Z\hW6.JS_.ODQ
%0ca%m<J%=l]6s-?DF;-H;uRpm`&RtAh!^GIXpD\>g:ms&*FUEQ[5YrYD-\.dnm4CpgoYpW?JfIO:tG;fY`$W]\3Aq"!N9=3HiFop
%+MkGr?6Cj'kP^%i9I/Mkjis%<(LadjfKZ9="MQ+jK/q(Y/3$uqI?73)@*mpM4*pYB5^a,4'Aqhq;B#`Xq')=-hL$KV0L:(o?_DT-
%Q-*l94Ib)k^76`o"@8YKC*#ugG"sFU4O(&fW#^/Z0MQY+LI?NcnR;s>&=Aj-P'Om0OO2_\G]+=4`qt[Fr8J@VB=jHFQld[K`jK4P
%A?S8FeC`^H2?.'VMUB,n(>s+_HhV]7g]W4=bWL13\"r'm938,+C_ju+^c[3Q"KVJm@b%LPA+A$A%BE9_o3KBcm;IPf(4pr1][gU@
%Kh=.A%Y3%o'%5jJ\dcj$dkf#jBoM1rHDi\rb/m,IJ!O:YANKIX#c3-[4F&E]Nt7X9=PH.V")F4*P(XlW#EU!0@O%&j-\BiMDKEla
%N[ZkL(-q7I;9NA,e6VGWSFBiY0]YmF!g^pi"M5lbOCT`C7K?Q8GH=5$A@d3p3HbZD'CInnW5'PED$74j_kf$3\ei\EYs=Bj7`Jrh
%F'KqABK>MN=NU>Baq`.JH]G$iHEbXf_gF.=?4dX.=03GDP75ein2d;0a]]%C&.G/aJf;Mp!6YC5J;WK%EmHLZW0f9$VlPC8d')L?
%nAPe$cG&%$8J1$imN1(\:j?2@&a<nkZ.+^bPj1Ie0_GGpVEdBD1TZ-uVLe$"Mr/\$Rqqop'ieWW,a"PQZ=#Oq34IEL];dY>m(#Q,
%NscJ][J`;I>:rqkEC_c8Pt/Yf@7@,&6QU]]Gf2N2o_orYNgR6S+gOt1rNsAt.#s<>(aqW`qZHu4Ddf&I^2P^>+Yr2Kon3SJ[L4/N
%mTVQ=#o46&P*M=Mq>B6_AB5G(GhfV3!Kes+V"7VCc\U7;UXBtHQE1-f\OP`oO&]Se/?CMp18W*YVjbPO<MgP#N>>eui'gkCie2-t
%SmdoLCeB8X_F;crIO==5.%TmT7)$1KM#2X)9dj%qH5-SD(66m+g,L/_)jjMNkW!oiMe<?gdd(:5(%tfXFThSB**Qf+"WEW(KWGRW
%Q^`sHi6toc&(8#AoD[Ge@^u:trZ1)!]-.4g5;=kV+(W[icJjE2-!;(#6*m-"#2ft/FY"$DFk$-17H4+o7!:+#f&m+l5A,T`j`cfl
%.GG*u[BgP"-DWD#)eR.',.K\7T?8/UV_4O<fjhZ+=oBK7h!G3^h3ub6[Icf-!%A,i_4h:Ol:-"V=JIa3)@Q$;B.=5u!O7#N(B"M0
%MeYB#eB#A.Y2D<)O'U+KXQ&I5!/lGPi)-ackJAf.#WSE>9Nu/'T\<$B!hW/+%!*QR-9K]H3X4%GRp"hb4"<H6`dJCu_=>rrV)7YQ
%%IjlM2$@o,,Qd01E)tVoSY9b"5SMldj:eaP*+&]a.4Hd](fj+nr(+KUNotNZCk:*"^T1<6]LrS(`J+ZnL2NuIYp<Hr+(Xb[G0gT4
%oTGtpO/W9*2asR5#*L%u?;e#48>u=CLrgmUquZ$g86u4j;ut[:e;Q:g!<\imEe)rlOaJ-9D.6#RFR=i\mPHD^g,VVJijbHbl&c;\
%Dq8Fm=VjpAY51EqXJWf:Tp)%TTD^3^r\LM;j9gM8ZF1dt:GXA[h(`WTmSg[Tg$CVa*:[YV&Uu11=14<#[)2ZX^<a.Hd*Rie!E=t3
%]m,Q<ICG*I9b+m&FC!XpJ6eAg?lq)K\:&qJ,+L#DmZcs8=K"Mur_E0R==_&1+KHZ?[ZEGYI&hoSkTX"eOJ+,.=B3<6a*'WYg@pc9
%iDd@2'dMFlL)68e=Z'K=MX_QT>&2-[='V+jR%=Uf$4G_FLoMi`<T"^8Wn=.#Bf>=@3nFDN!Fd3$,uQ]XJi8OGTZG`):gfEjiO`Z;
%oa@5O;9Al'c)nV_Y`ul,>WkU7!cqbcHlqO8ab?.(pP!b?0FY8L(r;&0Bn[^9_)S+G8:9U3Pop>K6&m\ROINMRFqNaF@r"r9_ehl,
%pchHJ)A`)J;\?I'Quj1ii:ni/"fsuC$o;b&@#$?#d1>fL"Fg%R(,.>U\8X)M#fB]MODIgNFb.064JeGV":K9?<Jd5<>aT91e-`3H
%^ob*kFf'cM/Su:)cfm#4k$B:+^1S@uh3Fd,%-NTk"5%BVGJTGr9[%a_!=SonSrLf!dK4OukCRh)4^FsUJ17K'-28JroG:^c<5C4m
%:r:h]"u;sO5"fQ/g;?C\g1-8H=:5qNL747e?1^;/0L9@B\WVP]&t3Jn/j94h!Y1-KD<o^t5i4n:.L4!A_0V`P+?2\!0;UYs<Rk8\
%<M%=]=S6[E5YmVp<]`!2>$R@`W4$hfpEiN`\/"<H9R(sF\lJAO!(r'#/>$R7R@k9!UM5@m2V4(E"6W?@")jtF<NmKg>__]%MSdoH
%><0e?L-o_GM^D\\k4)-\8KQtR0GiTFUhXF`eP_gn.V/"N)b!sYF+S46Cj?Ci$8K\X=Iu%8hn\+M[K)r)-mTmfI)LkaGh2pSIq%hW
%:00e.>"G#6290u,CW=63JY^jgntg&F'B(gY-$#f^fZKk*AG"%\!Koe/RJ+dW]N38^ph[<?:>T]"%]noeI[@8<R@0LX[t\l:ATNE?
%CO^.H?=eBVbdhcI>X0SO6PK8rLj`*`6u5.*Ism&#(f^3*68Rl2L6/-CcZ[g_"^34=&iF;&X`THSU,)*lE^I>/.U`^lcaH"U@L',5
%&gVAqV'b(NlK//M>)BD*b?@?t?6*jMq>Eg_`UMQBkOJQA%Z&\+8k7CU/^WscOe0D#\PHj%VjX*ZXt(4HM$gdj2]&E`KW:NRfWZ/:
%cV3[nlu@BQjq^e\A9gSnglgP=U99qh=@tG1N);GKkcuA(<>uOs2!rRgErfk<jh,/$nK[AdiY0%05]&uJB8<=8Vq]6oC/'Q.B]sHu
%]"()+dcR9A/tnka6B/Re6F2`OAP"HpO-hJ^mCKiU(n7ODh:t>N'j38oRu9dQ1MYVrS?C5dp3=8^EsjU^Ij)tsEhIP&n[`IQh@Q\*
%O^3pG\X5YXPS:i=p+O\3B,QaP_=isL3P\K/KOcW%2dA!#XdY_njtC@aZ>)"bB>WAB_cTdUTj2/:=Z0?oA/rKUGuW>Lb'$c6IShs=
%OQh*neQgsMA6Xp#\m0Ws*=^+B!>KO=GITaGK^>-GisJ#/(Q'1H<m:e9/I``6!;UJu:Jia7bNH4PfTgOX@GUg'ELNjDFfOLh/*CiG
%P!4]%UP.bYG7-&[+;ZoFMO<u3ec"1*8Q<P<R/WSoI6>DP4dY2;L92'<F+K@>S`38&F5Fgr,ZHm-886+\E-56TD$G(2C\q->UPn;I
%M+6.B'ub7i"/81Poj$?HEg*Mp]*N9(>Z^T'7?t+_A/5,`oj"Tc9dsXN'_e.B=7KNJWB.i0m;R`?^7'uC@_u+s]Vg!,(=ZTAg!&Hd
%J49q/1lLMunoB3pcfJX&&>6&d(+SGtIiYXmn:3t(DY.k0E*eA30ss'?Q6Kh>GeNgKH)p+;F\1[HT:E@@/(U#e0iGMp,PO:UisAP8
%:YpX-e<qM)_^-=`(rq;'l$KJo(8a)+rs5[g&m@!p2Ku)82.s)W\U9M\M/o\hbPfMR&m*B_A@LPu4dWjN:.\>bcfMX#Yj,4PQY;fD
%]Vp6E-k.g0/>!:ul'Qj`cR!n;HmZcGIV[o.+'RcI1Ip$_bH+drcQuPCp)4*VJJPq@'[XhOh1pKK;;2gT_\@Cb.\KEk"kf+tAHB3q
%9^eK2UYf[>TeBP&9@=l"6WA?3d4e?>1WlgSA\c;]Qp`L!9@kRgkCl=Y5dbL"HfC6\X7aB6F`otmP[jT'6hG-jG[H[lP54_#d!ZC!
%O@M(b[NmJhn/li.8Z\VD7;%q-.?,7W5_iWpXJ&kNYd`^RIV46C?)cp&go@&@</uO1L+[=L`H3r>`>=3NYFKpN[5Y;WiN+khD6h/L
%BfU@h3ldXaC=ZQ>cS[VbDu7r6cOA%<N.A+3?$k;_6EAprc?'<PKf<gn5[@BWABW.=+0\VSWTK7-qHSsLdS>H(ZZUl.'rL^[jsSTS
%_G$:>4HXLq/-20^&Fe7]^$TRQ=Sr*%X!]*.mBu'[NEkMR&EZ+#CEniTD@#ca=[$`4ieuX-Mo3;sOf'?b$R8tQY5t7`3]WVu^3&&X
%)'/=mgTjo`jR,0Un7q48brVU%SNVpZ=i0\.f`HplT5ZB&@f!`$04#H7q&'n^B\ScZ'g9;?H;Go2SEA99"0.GR0Kdc!ie`2Koe++S
%V\?K3YgBtR),uO`4L,;"*bFN=nN1d*!O]CkWtd+8NYTBnKKpEJjga01GD<SB;:Bt'\a/asq1R!@^^Fi.$&S`#f^=?.)l-/]VK'X-
%q(cJEd@@+Ie,hWFY4D^E@u:=p.4(%6VT]LCn.?Ik3h?)2E(2&rhe;#PYk>HsfN>//U.6%d<P'YpT&DL_)+(qHc_2pfUUM8,FQ\"[
%k8bo2R(iUeb[D^[q)01(*A.%!S]J-.eSd*&6Digcb!;)X<UQH2EcR)NdaQ16jZ`CY[t$1,3Y>&7Z%8;\LUH_fa#N`'Ys>G2L1>n?
%1nc*<TVWVmSe8A6o4_erW]To"4Nb)T&WWC6NVR\ZB^1^R[Jk<oYZT9q3:EA0*]?&&$ZYB$4QDPs8L(+$qrLsOh\3F6f5D&gFkGUU
%42&)Sf!:8Hgi7DP-mmGVGXio0$)kLns/YpS-sYWD24XQO(U8o.B\2sfh,\MMmL<#K4,ZLbnW6B7cBY&o!N7GY!jOG,EC++?+g@>N
%A3D/R[o:`WXL*RiJ.[q;Jn*)UoHQFHVj;A;*9p\pB:.#tJH6M;6%[llp/Y,/LquY"j;^%9"2aYS6aq+s]*(Wt[gT.eD(@-CSfG2<
%f"=UcYc"\HBnX6Y#;13VGh#5@55,]IU;i86OoW*Qcgu6a%A!"4GA)T8)r3/?ZGnG>Y951@\;<],+oEN5gur3Sg/=/Xe$i^)BWUNp
%r>Q2C9g)ap9?UjGn:i/1CNFhQXu!B02k*;pQj4HSaFNT<_g]u6#"7ELcKQ-TFJ6e+W.01)Ah;Zr^"*XNeTKmP6[DoUSAISo>5&V6
%RR<QD'Bbtl(D[?_lUYhPN%Vfc*aukC\:P`'e`D$0R@1b8Xo7"n-iKn@Rqp5]-tXRJXpCLl0^GA\[$E'*."9JW.GYAY#9fEP,U7NO
%n$J7JR$_JKG:YP5,R9s);Vc=t3?oe>.c38&OK>c4"*&T_44^GGN4(A]aQ!EpbJo`@:9s*`^^O@'9_SiO`,0]9i`')9Xl"l+a2FgC
%dLbdVD;Uaus'/#9:b>cl"-9jnV?bB-gH@.%pAXPsOkrmdK5U3;`4dtgrOshiG^?$k=CIL!Lnb&";?>po],?O$//E\qje&q+Je'Oh
%M[&F=J,&ps[2)Q+W7UhKkh'PGB'%lYGoodmIEsQ3b7Ug!apmAO_Lc0\p\+[:@geeiS.cjk.W3Y"RZ(tTF-CrH0Eo;s,s,DXR6H<E
%MrFL\)eEkYTicJ/#B..i>piJAIsbcH;5W9Orr[AB3e6MVaK*'EmCN]*'aPt[(7aFtBA[1+Xqs_bCt9t7U7C%>U'E(#TnC\gdtfX%
%FZnd"jLj9*@pUI-16'e.Di,`M*(s7B-=h'*neUH"0Y%C;s28$1k5nqZkHU5e*HH027AHLB'KhJ'6*CNe>j-,'m%mMN?dVF%\l&=%
%T?dkU89+&pa0,&UN6$\3.7&W<(]f,%/ZN"&mh(']YRV$'1Eb>M\T<f3B&/El07.Mc$`[)(otiDYPRVmIJ4WInEIM&gk,i4R)?@-S
%=)ckbcJe]>n]W9PMGI&0r\%n)Ud;7jPg6D.T,uEc(e'^Xe<N/E_TnHU%)&u`UG\]'Q0T)H+-A'+L\QiQGsQ93&!UgorBb9DX6gg?
%(ZH&&r:U;/3<-]I-ssj\J`Acp6[un"p(-3""(bk30)+#qq]F5CTBKaPD'DS<n"BIB8uQO.i_?;fH:T1-+U1hq8:<+C/hs8>k/,ka
%-g#V(C"$^m'M<sNUkR.%Dk5(>rjP^V"],g,(j2mVXX)C%dXI%!?;NI,q#+@/hP&S;JM*Nb7EoECn<I-YFZC\N<%Sc;'j1.r;-+Yo
%56\E0AEBP72s(J=d^jpr6<q/C"Y!4bW^*O]?bV0^,dcm?#'4+B^]ST&_B]P$/Mi5rnCW8u?(GGd$]EgAd+k/?/33sl#pB%ZT`j":
%iW)"Rh.!YQY%tYfTo^sbUD9HajU"D,at<atMjn-fXTq!seb;GB/G.^)V0)Ir>4'N;4*/^;)2]1>Uc6A*7i`^W9K$8Ja%&Tr@<R-[
%O-3L+&nk.H#%b##*SqGaR&\d%e^3qfF;50iMofds8rZ*I'O;iO8]NAA^GIr3.$<KT#,baPZ4lbj_01\lU:-A8rY$Q[fN;`jBJq-6
%;U]PrYD&?^D1"V#MY%S\rIJ;*Wr=s25Zoadiu3'4)N$WmnWKFf8dutgoN:H3XGgY.UM?51O^<pK<ng,IX'_G/,qb2D<%J,P+8J/F
%[E'5*DMh]PnaXetSl/_C'5I1hpT(rBfm2NaEmK,]/:(CKl9?q`GM6e_,j:0g)[i.`ha3*S>BNQD)UO`J+>UWma9$%5$&#*)f4HUr
%!*"meCBGj#Z#V*)S7>1Ko+D\`+5ZF_KX;)%=`@=u*_hOSYO_3%Q+R)_))(V"#^tqV'l=th+YpV[mLQY=$JJ@8?rg2?)Yn7CUKrTi
%jSZMlq('JirVgQNGj-=;l<g8cSTg03GlRKC&9f`V:f(<CTePS7h]d@VC9&pak=uh'h\er*Jmg8GcHSC,JW<oj<:N]CbMlf9Y))=1
%OX!t*YhO1dRhh$L"XW6YWH2i,cpG"m#UgB$gBCQ#"='<%KA3LGj_3@GFsKnB3^O>]/8@FQ6%LefDcXAR*,3`qdS<':PKgT]AR:jH
%_uq#)<s`"[N:M&((2+]X7kE7+^c2`+S4iZ74]n4F+T.:LGtH[`q-9JO=E`nO(GH]RdrJ-6;dl5^T-/V"[1T->36qL,OsWeIbZU`3
%DTa]e7-DN3C,;m-B4N[$iV9I/4/p(G!@2FlJOP1_,IYLXfg5Cd/8WTs/a`mV6fOCNEe<Zk5E+M?-beZOOemVQqR7@qdrANCiHZ1)
%N:#!'5nGO\@h+=.MQm.9V];e#$/R!I2H@N0:'u2\T`A[EJXPNeV<rKWL_!F"&!)n?0L[baDM6.<Jd=s@hR[?\EO9Ztire"<ZW))N
%:UcDIobkO>[q`mRJ^/RGZea(2/t3V&USDRB&^@Aq"N-bI'jW!5R"dh,inMe<$Uh/7h4Pn`\'S<id0;1366cW,)Al#!imXr6d$MM?
%&m4%GnG5ia\/Nd=!7_\8e-uHQ?eQT68qAl@(Eh"nUGs185lceoXI:^?<l:WLDT\.e((HP])EQX]=kOdScc.sc7dD2#Tj?PQCckf!
%7^K*3H<5]K5\CS`C1`!OQ(1XH05.0`)D`WD=&fD-D-+jOrBuqg<o4M7=(_5Hf5Qb3+`@X-7im^16G:cL:)2HlR,1E"1r._O@MR6i
%6GIsX:1g:g1csu"3s/#TOqr;:#\rnXIIuf-k_VO/CBVrgK'R*77hf3:++O+7;fZ.cUN);#RG4&HnRqKZ#HW`3Ejo5UN7m@A(f"iT
%PdJ`i(h:*V4$HLchW/E6'"C)d9&JSmdh'JQUI8CC1R<%)'[>QRf[&Jai[5o4m<]?=g6mOF$e[E^di@!Ah&fs;njJe5gY;4=]X7Dg
%UC'.Ch):;.'f--OF>V&/loi'bg>Su@''*sAJJu[EHi"f>/8iCk+i4,S%3fP/Aq0<jfJ-95qeODR(WZT-mjEfr(:_uPRY%q$*[$J2
%81R?01lK(-6n^o\WA,#NMal\^aE#8:%@(roT:er>,D$H+FjC[KXGfVtU>9Z[pUH/5,@@b&<#4_8QB3##a%q;RK@#Fk=:*Efa)[4_
%mA@bIkq_ST1f3QWpH<<&J+k]]YNNep<#U.&6hG&fi9P4dV0Kf*]aEf`5=b>fQWtfCO)k!#l8#cnYCUDsc<'=8c:Zoi4)B^j!(okn
%`e^Yg.fkp-K*%TeZ,<1%3<lK/o)M7F25AkPq?N0-24F,(ojPBc.o^a?&h#t%*9E],5<$$SIjDaX,Jem#i$"nMQfQn=C)/of9dLSc
%pmf1)rh<m7GQe3A+E.Q;,q6SO]Vsc:^:+0!'$T,)(B`V&'5tEf$sisSiSmTcErFo(`cI\4SO`_ML0p9a5S[H$9N&PgQj04%E`kc<
%"/D9G,/XNa[g2cLE;hc6d=JYMeg3:RM\Z6BPiLW=WQFdmk=#T`+-NM2q_@1ZkMS]XF_F[C7%0QP+d3@_K:mH3g$H$k.&C=Y`'"DN
%1C5G%pSU=B_+LUQA8X4dhMW"`Z\]ufCFSV#mtOnUf#)k^&lV"AP#aLQf^l<I(U=u3*]^/0Ln5L,^s#WE+rt>D"KLa@I#OTr)[]bW
%L`m95lXNA7S(@"'B`pdGJOtln$a@ucVN9ARHBER@*0=#HS=s>sd.3UK?5L`TF+!o^#Q@l+(.!I@%'$R^.m/nis7fCT`IWrCMLe*7
%cR(1%DoPo9Vue2q"RVC@-!99fJ`DlXWSt?Db\!8jpdJ'PemhVhAW/InBVoK=W/IdbG>s:i:D+TOMm,uYTFM:6PIW5=&LSjJD$^]d
%+KBA>$R(2!>uTiI0X/.s^u-&F;Y3(/3tMP?Co6$H,etQ][0:f^qsh7?Eh3tIc`GVIYq29O''J/M"pkSKceZYEdt&AHi(5),j;#[5
%'Z`K^d_gqM>YZcpJ&%Y8=C'Ji_W?GJ]H6+pq*pbb)b,R]r(QbC7^5se#H\]]Kf8uUUqG/%!]R_H61J'OZ,'cRrZl7'dr3q\[c<QM
%/IE`*.I@*C-.?#TXG!bX8E1<V6#b`b+>SDd_R@d3E_1eVZ=8r(:*BW4S\"l&L&Z3Z/k%-b^'s_YJRp#%R0qLkpu4>slC^1M*GQ8d
%;Kk`nGTaVJ._N4SAqc-R/u6-hmNA0;_#Suf-J+m:5])JX+nPi:ItE@Aods&!Ij0;3A28[h!p:5%pf?'A^-/Q3FXs:tBn\M:V7j-b
%]m)Cbn1!U&e.lK!#O-cFarC=QlZSufl#&CNTmptaO(J:hMqs]ngC,6addMs(h4+?0*N@jWUFWe4X@uHMm_V*439&i/$BQQSeG5*+
%<*X;p.(+nRI@p6i@VK6gR.I_r,r1(m&Wmc=<\T]s7`As>%TZhmi<;X"d:3:\8aO3-SDsO3.>/P_=LYgHP+'r^E7uBu=5qsFJ4F2Q
%/Hd2u\;HX-<-B95!`J^&X?TIUMP%T(GTpU8+KMYSQ3+./7_CgFY<3pL0i#6K]-P&4oUGoS][&hQp,9cE#p<k2?sVO'/l%]R.4doJ
%j4%I$DI,EGpqd8'!]ZV.9\^X>5d0$;iZDSgA6A&#,\9J2!1+o<70Kh9:=os6M%R\2L*2)h5UmDTJ4qp^Y-Dg(b?72+@ssj*cr,:#
%<W83sF9u(Copnqt#I"f+&ESR@b5e5*n_OfUN7IBh4S/Du1)?/QBSJ]epH,*!f.QKKjcu!cc,Di#Jg)I$[rq?n=A@ig^O8nZ`tuVW
%4B"oRHNUu+C4614PZu)IZ(V2[B1<<7`u'p6#8$qecN"Ej'sh[@pmXd.o/G:+WI_foO!u?a@i!Xh9h#^/"K.?3U[8XD!QtBnj^Ss7
%j9B#TDMT%*$_\==&;DA1n9'*Tp27j$h-"qo<P*1)4=?8-JUL-.mUFP[[pUMgIQFJ5p<=VqRh#h]._;pSphKjC/P:+50C$UrrK"P"
%<pt4X.[kX`aTEFAT[V?68))b,)rtIXq;qt:rWu(RSE'O#$qIU$/[st^9-8=]ZL*9M98^\U"kk]`*^d[2_O3Mb$>ZI@ilto,PkERC
%_/D!MNMV%Wc&4us+\ABE(L175qaqY4>[c8)G\f]o?o\;mFq:ZLA3"mglV%gTS.eY1AhU']02([pAhI"S1&COc(Qs1`rN7soY"899
%IN\PrhM_je6OEBLlrd:X`J4Y=N6=#*%3,n$*tu(YImlm]s42Lg!lAq;;;5m"6]h!rD38V01:N$/]=Z`uSh(bL?>_(1B"OrF2kP@i
%+99$!Y&KR&gk,P$^j_p&(CXeb];ej)hqp-K`;_0MPSoEDT9*)F.LW?$n@'%n%/eO2+5$%tb)?3?-"DjUAAP5EA$D'#p:^SImPuO&
%VU^^+/Aj,QmM?LTE&C%d+M`LGG5rD+[#5p^_?3n`=V7_KPjh)T%<NGk<,tj'd*c6"'U)`JJ1i?D;O]AESXm2#[pdBp$n_EYZ(*1c
%+$EDN4;)3urP\LB*,jQ2+0UrtFEY>ZJ8JH*e(((_m'8r9!^R_sZfn>9M/LS3!a5dX,ZEU,_e4]/_^MQoJ8;Xq@mQ"XA!T7n""L[/
%:6Q**%ib!UX45.\/s@uVF2iF,A7$JSNef[EY39#Ak.UFaOA=ADg*J]^@=tj2(#niS6GlD<;_NYSG->Y??]>u156)CSXL=N-&/qS^
%],t%Y%S-[KGn&3Npk7.%h6Ms=)1V.TCh)OjD6DkZNPGpQ%-).KQMR[i'U5&WlP)u7;^AgqE!HAlL7M>"Rt"4R2kf;c>$/^.'\u`'
%d9aP,9S;*]>d^D!^Zjjl)G0I@e$=Q636Fb.^)0k0$4&%N%b`k73BK&5N(LmOWX.e!iOf=2*,0j!]o*<h(ILIVl/-Oq\@<j@l5qeN
%9B+ZO+Cf^,Q8LZ>%UgoE6$DY@;RWF0")bF[KMNs5P@-KfP7G#M%-(n&0=IXmf`2>V=HtM&A;9hDokgN"PKbdP'>r^Lljg&O21Iu=
%%I(]\[a+Gg`pjA5flrQ5i#\Yt`+_U]Y3b6[(BJ*(3nKFk=,O=GX/<n*\X:%5AMKlj23TD.Ns?)=T&+<cf(NqQda[4lDH2#8K:Dqe
%S>2iBe2a$n'ZO!6G"b.$bbDd_.@k;RC4ke7D7jq\U=\lu>RLU$?Uh_0NTl,.Z`_)r`r++tnX2ajEbC(-n?I_!6om:.hh>sbLhc<_
%%;3-S>-+'SeOTAGW9UD,`9toc]cE)5%4=c5FuKS*ic"KY)8,RqVXZ>kcO6RpAtf_=n&8/uSfD1S^q$@@.lKH8n2RfcJ.b+qHD=]g
%%Kg,BgbNDk0^H8j/R._h+r>la]Ao[mQ)4T*=GC%tOTcU=.ODQ$6t3d@6Y<USc3OTMNX(=u?3>bCIrWHo'Wf>R,:5_4`[,P#Jt*W&
%%d<[#cn5/YkSI3R:nr#m6lB877p_XVrOO3gpG>2sF3N&,3o@EcYFf]5)(,#$;DD9Y,emI%5"*h[irKB%f)5PW%;]Gb><'*KnAG((
%.n5Z#Qd`)["c<V/C/LO@a$Hl#Hbg@X3Oan/rpb#1OFi0_R$@f,#qd+6BG+mPVh,V><E-a9PmoR3f13HiIf2%`-.KO"N5S8'qX"Si
%?J>c_<`kgb![VGd<KQZ6_a?Vd9KDo>Z`CJ.aAe@Xo=X!\dSUjBSc^C-4X9h(pU:E%^A;Ig.3OhehYaiq?Cu_%7tr3D-SthKN?W>U
%c\m0uM?)W,B@SUA.5]!o15frIkjDgXdms]OHu^aI"t/'qEeXh?ZpiL_LiCm1m`<<I:[m]*l3,2R04%#Q;QVlbj0g.$\/6(RX^:)b
%`>=I<HZ+$Jrl7*,A$kAD?"\C.40f=q#&bOH:"=\h8BOrnU2[H.72lFCMGX?k=rSuGW0YFY$WW>n%t1+NBGfDN'`ohjBug`3,N:GL
%R5'NA-Hbnc'>o=5#qdbj<V5&OJ24nrAnqmb't3V5rNnm>7DU)8H_3Ta(SZlVTC<AB@h*7fEe=pS"%W3Sq"fV7U):P)!N\84;l4:a
%CbDM^nn)GB8R@4)mmAb8`b^cG+@bT#fURHc!=l!?nWqNQ1KJ2I0@i3tm_CVe'r=SLfl#rG'YQk\F4E>mc`kn'P4Lq+7&MX!hJVJ_
%;92CY2Bj$AP$Jo1Mr[N;(7ibS6S'80-UR[ClI<k@/?m*mCDC1qaIlLY%#SE'E0=<@_rnKpeC?RS%!hB.<AJ#/i[H?uWa`d'0lZu*
%*lW2R?3:(NYZ44d_=C'n!L+,XS*NPG.gBQ.qM4uUep-5+F6j:EBDMX)W,f.hr>"A*k2!WN<`[\g&.>]d>tl'II&e'oBDMZ->d]Y]
%e)!Tu;#+Pi9>0<2A:SfZ5XBJpV?_BPlDsd%cSaW&G4E^;H@-$0DBQsq[m1;O^slc.2'C=u@/0A>?6W*/l;Gh<<k:S^9>b6JqMIT*
%KcD4s7/%7,_M\^7\9=nC3\p'Bj=fR-`P_D)q;+P)#QIJ/\LYi)F03AMb=!DW%X$^U)"djZEb,dgIEuTFlunA6jA/K/"$'B'Z%#J]
%:t<KV`:gW]AS0oTOWF7.q+AlbWOO2ZJ<06u+3iN>dKC;\`[m5X7M3F$_@cV$C1]s3Os:^jThA[UK`X,+XYAg2irm3jh"!bnaWt=T
%&9`'/)K[GK*9h\2>p1q/a=N:p0:WV;!4#`YSC,G&/W;7$0et'!cbnR"I<:R[)gX+s?8;#[`'qbI#I6u`g*.9.A7/;Ym[/p,-1\ao
%/tc,GFb&#<UEN\dVQL>\^u75j@j*oALTcXsa43S//KD8F%G4'AL=a4_@b7rN.o()?O&1jiiuCYp;Za[8XX\VIcN3Mqi*\jRW4es_
%<4(DT4B[r3QBF&3kn%0AN?tGc6+^dY."lUhq?@EOg/EQMBh-9e1q_)#0Wk4b1B%i"0/b3LfNrE]l]/a)FtDF_'fNKgYP\!NfFb*I
%o<ptj`EkYj4*OS?ddJ,a.SSD@@n5n&/\c*DkLj!'UnDc$Br1aWoDtE(@q$15mc`g^7#F1Sq\?@?1jX0%@rkYn[<b)#:P]/sPJYL_
%UJkp(<'d_Vn,cL2YO;b8XX=!Pf0BMlF?!g=-iIN6.CaHSX?V.dR[6O,O3E.D5\8\5_Xs!p0]GY`hXPaC#_[Dm:jNL[\H@qtguUug
%>?PY?-QW_F5QuuEZS2Rs!"?jbL9!o[iNPX,9s='hK@s/l`&7(O!&i8OTod^6/sSOQMe_Z2KMq,864lMRX"4W`+O$DPT%roPbhM%a
%1OV%37&Z![E'Wh7O&(BC![JpNN:*6GUWk%:#j9L!5gfZn;e4i02HDqaR))&+$5)`[.Ol##43e:F^F]QK3dBPdLmW:5oZZXufnPa)
%Y%Hn:rk>4Zj@=:MmD?G8Zae1D!CkjD7l>K@ONMTe=765*qZ\,K])WC>9INR:&Lob6V`h4WgU,X'3VpR.9D&H(8&fil!Y#;BP%X%f
%1=7s!<!UP(2/3]BoK"TS%tgH@lZaU@(^XL(_G-Ht70I:-45(RK31dZhb"=#`<d@3\jg:CE?8(7&AoXL7[+Yd7&tr>N`1ojsl7>,(
%@cQAaRp\dp_MQF*b(8Z096?&.#^1/b&h8n4m^T0AHVkE10""<H!&Y+\6X^oH68Z0\,("b5k*=VNfYs=+C`!o-C/nZeBiHKd"IVB:
%@+o"4.o$E%-*P2JPsd[nB`_csNT7Aq*6p#RCqr,c/7E$nqe+<=FQJd%B'j;ei(cJ3,mrQZ%\(:0i>)IWn=NBS8sMr:;rLGO(\jgY
%6Gf65q,1P$<6H;9?pXPM!HXY(A;;e@PNQ+Tc=N5?%L:[!o+U)\noY2-:pT$)7?>\a'%k,@XdWc?+3fSX,s?5WUKDo1X]L*Cf5Am5
%(k:0T<.O$JV>r.Ap)hPH%+!m`fGbFB6*>J6OKs$aHO*GM0kT(aS`kQY2]M$tEc>9TPId8\)d&X^0sE;1`'Nh/blNm7,OQ6UOn\T&
%^BkQK=;C`jX2k<25Ul-n,1d@>?p*%fX*F?1Dg;(P>UQLupe@,@7[lP9X,n6hXPBN`m4a^9F8-U+A71?,^Bq^#8tg6f`jM;t'B6BY
%S@VEDr9I2)q@<Bd\hbK83@mAMQTnTi0&uch"OLX$2iS^tm/:Q9C#m[Y=J4^8=]AR^,W[q\BH$s<b_)\Q+1`,,ZA%?"Yok")60Xqm
%P=$C9kd<-^nb.^1h`2H9Y[jKj#7,q9e/a;O#Qi3A"Q4JY,o]g11Nm>q.%-PqB%eM:_'L9UoIk3]+ScpgaMjnE9q?i:W*le_$fH&q
%<-\-2l]ZWA2"lW4-FMW0Pb:eIe%:;SI?]%<_;K47fCoKbC>QG_Us`@aLqGa089"7pNjB)U:^O9M9m9"\p:c84ScY%jRP/:RBJ_O$
%rW7bik4n(>5j:J0fc9G_e;@@"/K>H0pmC:H*cD9Uj$5TdGXS]kpGu':NCq@EBnhR/3i(b90CgjJ"6=Md-U_\d0o8KJrnONH0N<rh
%e<i_)-WW`77m&:nU$0^J]hCXlJUd0ZE'-2q'e*V!o0:&8h.2*Q4pS$hG`FZQ]s]ABiO[bs?.`--:>#$N<,#+cs(ShMkq`p!p5Hsh
%]]4b!=0(U=(EV+1nomGLMN0I53PdnsO=R`[,sNk4"LS:#&f)gSV#dLT-8KJZAr.tJaM<JM$o7Q>j7A2e];=KOZ>VN=G4.LYd@Or$
%Io%Y0Ym_>=MMl(jc75I!DgjPZNkaG3[7k2'D`=nf8\P#ikD0!.\KN5aJg'/gFDV;&g=a>;n@\mk@Id/Xh@NgDabp#EFY!_!+r4WM
%"=QP2+CuI*>_bViE]G%g3S@Ga]:QUs<)#`I(rdD(/kNk]h7%1'kJehA,D`j3,9_MAL>pBeBQ3R"+>f36Fn]JLk=7<LH&,GeJNKE,
%H$8..%9W]HCgmBsb%;cF@.4/YS2?<!o!G_I!0'D1>9_ITK0WrL&B6%1**@<5mX=;S6$Wioc4&2.T%K0ebfQ!.V+!70\\3ih>&]kL
%'LWT4d'0Q!n9b[H,J4R*&bU$q>]b$#.f=&-A)OR;(N.pT'+6FE.5Fo?l3a=>dh0[%#*N+CNDCJi#NSj.MtcY0Ojk)\)(rf?#pcj1
%lbuZ&@4V/#A2[(rn+S=FiF2Z\f[s)dIJ5X8.!].UE<E##TR%&#J2r(@UTj$fnIF&@X_H#QCH0pE3A*dL,oqr1Wb2P1f"KeXquKoE
%ieV<gc&]J^bf%[#&Zre]Q5:;Ci02V"F+q)tMD<nW:eILZ5RiuDr/+G.YH-?ul^2NHDTUS`Xk[c:J1B?uNX$"8X/M&I(";:LZK-=@
%<FobSj:sr@?oa7T'YbaJPPn.$^u@2$Wm8J]L1/41/@:]#-3fW9%&5UpC;UHP>$3j\Hj^](.7*!DCcpQ=#K*.gra%_?bOS:9/gQ\Y
%1>pgr6b/0>S&o6@11h@$#Gej"g!*bc6#!it625c6pP\uTM?!B.oDaqY=i=?2";k=Y`GsiC?7:cZb45Y`Eo<0'5hm*p#6^VR"!E.K
%>Qbq!G(G?icc3NGTGV`[\R5B6SIEkHKD!CV7C/HHVR?OhQ0<Ae"Yd\.*6H>nJp1nUe>g_Rj0>4=Np#_)X-H9:G[@t,%`Gm0#7A#S
%haZjm;d1r;;$Dkn_T*Z1"bj_KO]'X5r#Hokn"B^Ts%lduTE(t="qaF1&cI0FJXmJo`lC^s"HV2t4(hB,E`McqHZ8rR&"iUJX`"WI
%!c4V#GHe/^aO4!tnY"C)k;f(E59dbpi5a2E?S&?6kUc(<[h4Iigi!;C<DWKYSrKsV2#nk]i[JPB8!X,tlYQK%<!JU;Hmj,,V*f_(
%>pKH@e[8LJa^W9SK?i2fZC*iW^EQo;i`u!e3!+%kkuBeo:"4T&@QDid*/J$_A\B]c,/Q#^,8nj*fcB_`\Yg-kg>)/Sre+LZ[CbJ6
%jCYH'ik5f[A?1Ot#_<4S6osA4\AJ,)GFrlW$4"qEN$LYYP_F(mV/q^O/9!o<[Ek[p#ckT&(G]':5^bXDV!Jj0!(K#Lm8Ht$0[$HS
%6,2G$)SW=I3@>L+eH)-$6aNO'DqLo(%&=T^D<U/!LVL(3#3)kT"BRdUd;LT>j.>/o]iQ(aM4)4MPQ?kT1H]FZWB?E9BA+1crhXo,
%E&fX614'>\^tB:*]i_dJh)hEW_WPbIiTKf-q$X1q9Zn,&Ys^$&*'K)RSDrG;'SD_qo]-X4eA!9"N!Nu0O[aPt*3LWCHr"c,&,KLD
%9#]+30_-qK3ZWNg)_u:=q<WD.?IYj-N_p0Z/s!tm0ccG35E$9M-aY,:GG0hgGA7'QG)25Y\`s(KJ:;4!i=cE-$.1@<_RZ&eUfntI
%csh8H9e#dsk!CCr(E36(W^S9)oUttuQ/t^C,qU9'`>r0SmXFXDVsh,]2^N<-%1uBG(`Fifc*+`T4Ti3/i$k\---$`1DUR(BLCOV/
%^RMDMpSl=*?4F1+<o7dkT*U05dt"YuN"jlE/."`n7E1pQHBVRUG[e"(qdaBpO'I;^dQPP5WEg34DH'0FaC#',`K2l_=*%8$"t6hB
%SZ(odaWots9lM4R^%nf5"(Ne+]@d7b\_Ls-:(0f`r`FNeN)+F/.>2;Sq,ke$0aCYTF3OeZ_=Vqk*8uO"QV]q=1]1Ej&XZajPd)K4
%UUep%h*trZZ8Xr_Gh-W^leVpP4bWF]7f@0ors(atb89\:*C^t=9Y!i(L)WmRl<r0WMgAW3<FARp4=Ioepc3GDTOEF&_Q'$7b$ICu
%$DK<j6HD(-$>9YDOZYtl@?F$@;LG0N?#ERKApX<XT>(4IA>t#7</Q8M&5;l1q,gd[L2hLZ+S]aY\bse.W<D>]]?$'Qgc#^XkjF+R
%4/nKK2XE+W'eDdZf'1g<jTSPa:ZqcQ6sk/0nG>G>Z?ZCMhK!+Fqk20q)Hq3t;s;A*;e[g%M7']]Lg*F>+?I&pj&F>]2F&h/bHc*1
%lUEHA8cgt^fuQq!COI'MACLXS3g5M&QX`ZPlk3$Vndhg=iO'\b7cjnUh2Ua30?*L'<dRdK@5]kX+,%-=&>E&5TfUK,ZI+1d-B`hR
%1Sp-09M1An&\l!0n'Y!tEc'Q(h*UN2Tp36Q:"F;OP%3+XLdfVj?`9-SAilS>d#b.:Q[r#;64&b`ho6@p96&fOGWEY\9$/^<Lb5RY
%MI6Hn5]V16#F]1S!:?SE<(.sPD.DoM&5-*2%,fJgK86^D>[*N>*cShMeVl(_b:GD)=9=Z9W,,Os5NHUD#eI5u^hZ2!kT8GV&b0\c
%a&pMU:"=q/Q`D)-c)KsU8J@Ukd*:QSGb&8VGa/Hd]0=W(DiCD4b]&nGf6'/D&-8&m;Gij=D:O!_XqX?-ifOi<n]7]3@tGc`O&Xle
%Ul)NK-km_,PjXiXlqo'_WWFR?qIg-rZki%+q\e]n@c-gjH"/i,.m$>phAD!is0<oTG6-gR\$U(p^H4Ea4rQ2hE_^pWDFgR&h+,0I
%.$h[;;#UK\nm5PcC"V7G[dt^qT`+8.PuoKs5'Ep,@*sOG6N@BB0=3F2:5-pd(bA8Jm#Ch2lVt$1ja+ZFIcDBiHAI72L\ZejnM1dA
%j$ZJ4jh\eeD\iLQ\aK?!;"'hK#?SeH$2egl>09?:DDTl]@/\t$:'1tAreU9((fIF?3Cj)hHUL@Uh]("3k+TEk[IQY5gNH<qQlB<W
%/0usB))PWd\*8)keb1GA8YR!JMMt(mamCRJGX/(dc&!B>,VmY@?>M%_#Wl&o902I=%dC;jPRHL75orb8)u^UV8S\")W)HKM277k:
%&Q4?EeBfid0<&;+TMs2]q^\5\]*mK.kFrLNS;T!Vc:.3hcI(eQh>:IL53%&H8u)d\O3?c?./1gh3u,/BI,*E&@F:'(.FjF5aH\EC
%T4#$I1=EO7<.NDr@%S(+'I_EW=BKIP=GMN^%A$/mPnkaQa+hs&.?\K[\u2^u9ZH1C$jS):Pcj47KUI7&Xi#RKOYY0m@l=!Hm4M5(
%=>>I%6?e,$TIGn`ca.E&M)*('XdlK:pk_r6Ls"LPf(L-ChIK.@$kB$;c7)$GolEUi61Qm?b:;g:>3Z.9T#3d7(=#Mpn>1gg0=9R1
%AfsQs[rCn)n?@4`$\OZJRj6*^>:E]ao6btRPs=V2=f:&^Q<&"hcpc3*W"p2Ee/9FJi"Mc@S-_M,TKL]VTe[prJ]dmua=#0e\!)MT
%=M]U9>bOVAPV"5s+?Y=Y*,9\$76[Ve=".DYLa"a^+m0bWE\5^P]is9)E8W"[/=OH(eiPM?8RRk\+a,W(Z/J1,Bh0%M[_\.3s0[m;
%K5uK3X6bP^ZlDDT#8ENUhS]3ZhBpbK1IQS_blt,`hj?lqS3Yhi[L56^29@To,R(CnR-QL=*V,M+m6s%(9p/L5XORlq"GFpumph0N
%[S1E'N$R@]RII3`bCX'FL#@WM5[BmHB`3e5^^:5s&rM]E6`<^KB[^Dl;'pr[EMB,H6>ZU:23D4WTIK[LcE]$83.+6'lTC""@9Ei'
%9(&)sMcO3.\nm$l]sUB6Fr$'1g$*p8)YRA!N_Hp^WE=*HqWDW$/_X-\EhW_s:t;SQAcO\)7>7e:,X4sD=[ti*C'Z++TMUWnG=sn6
%qpMHP^R/N3hcS+q,R!Oe'MnA-aQZu#JgC.ChNaF#eWZ^KTYR;%(H4D_(^;L1D=b8+AkBI\@&FU61ui%:_<ja\e\tmgO@"(3H>*UA
%]W.`"KFkG_!29lS.O*Qp"EaO'4-k,K&!jL'8hT+^ap`l:BSdma8k2)ra)tZL[bE[-#)GAO^MOAK=@eB*&J8\^P^2NEB-]=3bmN[H
%$Q;OOCs#3O8C;q^[s.I:=n[#l9?!"K,0sDsHu$6)oogMQKKZ$)ppN'#pOSQKG=T&'[E7o;X)GV>C3DE.lFF2Wa,.N<Mh9hrUd1oO
%.l63NV&EMhT[qBta6FK+41Z6Dg<1s2??:B.QR1Z:a!suA'sVJ9N'M"m0'X6(?n&^BI1&F^@j.J?H_KcI("Z*<L*XpHm!MQG7B3+W
%>t1_&q"oU%TIsE?9-CbMEZ15;FuT2#Q?Zug7d^m7PU!GTCKNkbA*LYTWW/eo81u4KmkfZ9QOoj4+fX?fJE?i^AjZZJc6?0fc=MGq
%6t:=LK6oFTT45<8.,2&HEMp'J-rA@2o2);!OdTmE,'Yql.E1e)kthUmA#FVqTOjUcYV\JBiR0QWjacL-<9<b&1)L+Ho+kq.=h\no
%U#`j>Ug+m5Qpu(%+J]>eMOCDiq>j=S<l_%+LIqjdU;^>==e20'NaVhPKM4pnUZeAINB<0Je1afo&<B-nI3E=+m]^f-E"OU"\b!u3
%3lP+$^<bCKD/%'dGoj7.P[>><quB%qaT+/0n[D97e0F$_Z_9&;/!J1!$mqRN=`r$-E4>2e^9eeG_dnG64,Rj9%1]=1A[5MDYs)6$
%9qQ:d*%IQ=[s_rkKoMDgN(\6S9IEom7b=4a$O/H@k1Zj'PjIQIGG,CjNj-n<k6PG;;R2a4SZZRp9l9ff_C]j[_2hE'[(o##dm)4n
%D2mqg+KF]iFhgXj40Yf$m(Vt_)6B=A>,I;Ud`NIr4;fN]CRM%=d+=V$L_`s=/g<h*BrLmF%"dbg/]YD\C<Q-lH-u><bYRbIjA*tA
%G<7S@mAQP_aUOANgZ$pQpFXS'7&sTpCkKEUOj25[>i\&g,Ni;`!SZSI+D'P*o@o?3ggl7aG72[G6Q]D]4a1F%7r'Wd['<p24pL$<
%Pd%G+4p]+eVPQ$-X!Lt?]=:?QK3/b'$8X175/%Q'CqD@fh3QD9EH^PN-PLRgN/W-:XYE'G[H8,qdJNSa.u,IOO1Nla4WdTVH?_/c
%#&1kc<,`bdnts$5a,dOAU"et2Au-8=cbq$fY\(MM6r$8E;EgC-ntECA(!C2BFV5rQ]<ZVC/K+Pl[\l:maG5,sUsFeZQ<+bEH/0?H
%OF_fJAcipI6u)H_0iQZJaBg/japC&/'MkWQ3]OgKiA]N?a-%dID3?qT`#J>OJ^2sh>bKVCh-fQVk+upX)<L1S\8(BTiOWAXG379p
%6O7A4<6m!h7lolK-t"`r;+bNK+V4Utnj^C:51d*I]%?e[UL_r+`E#44cG-Bs_lUQ!chVc@Ymi*^HNaYk8nc*iiYC3@caguZ@lLk9
%LlNqn@"b@Xkjm'6EpqG:a5<[3kdo8X`U7;n3n6K+`bpP$C0W5',G8&:XE<:0@:sFXYZGD;;''3DB5sl9K)qmL]%GBM;L0"R]]-7m
%6e`tX$'oeI4*%+JI_rBE`3Q@A0X!BM3\52V>$1u5BQpeg%^H2:!KH-kR$sUCWe6F"hars2UT97g]ecd?=s@tpECU>!Ki$;]fW_o[
%f)ke:)c?hR)Th-!;)@th*)CM.)uR6@Q*H5+5L@OMq\'.TfB#q;P\$XG$\E73/uU2Cc738?8S$2A824%)%u9Y<($k7\,$:`X"fRW3
%!F^+CKE-T`!\C`$TM+E$rUiql@aq>JhN/hHp!C=]&g0H>+')?J@WAOTM(Uhr;<+E1<HD;sEQ\.%oj[ZFF2@8,B/js*P^NQ6ICcMl
%;9/d/10-D:5%Cc6V+NS;/>,A0$UEOs=8&00Q-/1kg>J&;`)?c2asu7u`&U1r\Co_S76s1IFaB#cNo#`_'po_7&+]'j7F5;JVGXCT
%&LF(R3t]WbW1+-JP%PJ8P:%>=ZB6ZU:*u%0Hp_$uMNO6d[Ro"/j0g2Z`k@m,cOC@QBL[!Z!Q4"`C03pcjO6o498rNZVHTrm:6>o&
%*T:9=+D2'I-K>0MXNeYSc+5\)paD)ZqGPIBk]>aY!D6Un!UZt_3Jf13(`RbQ8?3#!P@_WUp:(gUF;,1<E)UA28U;)OL?-KS,A/6U
%4#M1artSA.<'1A1Ar.M'%a]PC_]I:(ZBB)!ZjGFmSc54$&6`Pf2`d-^0laENKuWKK$k>a()0U9,D2<*m)`WMMLF.L[,d:+o]m2c.
%<Y$Vr8'L?Md/8X'=fTXG!%Mr'!\.-@)ei9r-02@iB0b]n@KU.lfbi,I//JR0nRYl%N5l3GN'@Q2&:g"=_2H1=L/OG2po3"/OBdfI
%Lr.#-Gm.miV:Yt_i%O.kns?Kg'Yh7b6_*B<mjKZAnTQ+pbRdLd:\0JaAg4:"=R?AT5:IK\0\Zq!%G*X+V!XhL)J;\c^H>eC]0Otd
%SI/-ks$.aQh!a,<eQX>l&J"4qFat>@>[CdKFL>f7g/LZ/`)@eOb/4i*K&TKs<X)-hIK_YQ8G/Vg1WroO4:/\AW2HTXFUI>/_N@(&
%h#Z&'\ZQD`Dml<2EYZMt2p!!5+PCPj@)^PG[#(:'XW3)aaTUEqLnFJ.F":P=IJqqnA)$s1$H%e2-N94;is>nSl8=VWhr*H@L:9?C
%-LHh3.$[@#MVF`+3)*18<VIqsI8A=&X.EIe*G8#BVq,&i(ih*0$jsrj#0T`5`H?Pnp[kuBpWZK?^^!EpZqh*mrCRmr6,aXFlutkQ
%Qk]Qe848rF34i%(hQ"kBK3=^j.NW]N-)"Wrk4[t>q5(9k]rFT['P3)Nh3YZ0^u\!O"SsR**/KPY:@r8.<;(c]H+ZPQafHe'[N-N4
%&a_bI=9WJhJ>C#GTY@S2Z4iY[);Qsq0nZFq:ZZulc!\n'LjJ6NK`;KN8,iKUh;^'__N_.n?)XBfk5D9.ID!c%WAA>'kPpQKB'>-g
%8p*(1$)JnO,mEC&s5DH)qHa1@kOW/O!)%&+/Tg/i)J?q'O[\<?$T#dd>Z$^RO#VT0A>-m#a'C)X)]miJ7IF,Z*=pO82a`GsU?R?l
%l#CnC3jR/U&t#m9Q@=!mQXJoLe"dH#3.V[BKV['.BoC6F@td:Rq(87;@je2`)148G/DkO)%O%b'^Afh;g&9;0AK"(N?_d:%!8d2!
%^_Go8bDsCQ6/n:`S'ucs.M76jmUp(GM/L4="I9t+Np'stPt1M3;_f45f6M*rO46i/a>fe"g*7_f+[ES!fdc0RheT:'TfG+?doe>O
%BaehqFbIEWU>!f[du8P]1u8cV_SRcq_0#IEL5@.G#u;Sp@+F&F*8sI[%#^,S^DhcpJ0)U_:j%;s]=]Ja]^%"X/[_uY_-'h;7%@'f
%Uge4T#J7YdC>5")H]37X\72P4$?e0j4+h?CUl):0n<Ol=U:g`AhkJJ?q=r\.L?>g14CE]An/q]"&r-La6hl&"I!kK).LTa=W6p!i
%+2^.,.)Mh5#O)CCQOSN;iWsQCdegXRkVj4dgrTV_o%ta-mm57=;(O4]"0+G7j,E3tS<QnS^h0`!U<2LH4KLoXISkjmp_-f7YXT3F
%L0ZL>>Wk&&o:<%>c4\[/4I#k""2lLH9-D,o%i1s?+:jKael92#/qpC8,XO$+bcHj^<YX<\9G%S\Z(NHm2]`rq`URo-*g%l$Q5OX!
%$3bKY1!p)a[u="f;[(EL^(""WBhJ"Wiu-s+Z_/0.4O:C%*UCA=M"I-*.cj?*n28gHY5Q-'RaZ3##1(H7rMs$:Q;NZ467-N"dI4Zo
%P,gamQbQg'hk#Qk5#t%N"[/(lR[c8)b8\m4JTcB*:`)%nUUKQa,,frb`$7N*q6q8[*J6V8>:bbk#^nCA4+'F9LCI!Ho-@I_&(dsA
%S_6J<;f6VJ$,s-jQ?fQ+"a0(`>+O3CiU2egO\Fe0BIg`Vq;**KX/%YCU,kRl`C+Df)j,doDH'Vb7ml'$i8]tVp,&;<;XR\N^g:J)
%knu[iHn$kW*YGTWP7)T_=iM`9.S.,BQ)/cM@q>fcnbE_DX]e\]k6-g\pmU\Los1c-rpmIBNVdd=c7lT;HZBSY(ZM@b`YU$0RbDT#
%Ch?mq*9t&eS0?QtMqr0PGeP.HC)nk?\mbs)i70P3lb!I;B?3;e)psc1)Z*aN72iSsLQFR:233,rnG6Gb#n&kJ)OfDZ=6_.p63Skl
%9J)[*qK/:;DcZ`^1pqZp(>!82G6hq2/ZiL3DQD_cbV_m?6?7N2d'P$15m=VmJ'H&l%rMc5)%`R_cQo'__5&W*])YR]BVEp'$\h1:
%?>EiC`qNn/p@T1\f=jXo<6hT`\Td+IaMqs-cS=u`F!KGH'52=J)Rah?A3oSuW=>8rhYom=g`td3OA/.Z#^OhT1-UIlhp:CUAP2U4
%[Ik%9AXo8CG+l-?ADkJ`RafRLT/FQBGotG4hlc5)s'?2@7e8(01P"("(qTW!HhS<3'n'cf[s%;C[(/HLrGAo_3B_jK)4X=KK-#u/
%UDfU^9#`cjHV.<AF#;&Z4#TT5L7R7eDkKa8.F=CJB3)/GJg#pa?ZruR07Bda8,Ht%`-2kO\dFIaY,;BOc:<mn!`3TmYrMR+BQ`'^
%k4*FiCm!iNVr';Roo*p8I5Ia$FRK$k$.V9\0s?DY-9la+a@]n"pZ6=[;7-[Vc1Dkn>Ha6FEEiYp:U=bS6c6,V4qe@eSlSOATNjD^
%T+XgH<fj$?3@m;LC5^W>\t1l!J)s#)gX#j"n_?$3O`LN3Z?X93QbnWMf.\5P>lM*+^Ab$0?Oc9Pp@=3C1m$u);guZuiO)$Up(Y9%
%a2I[V,;5cqTU3WDS6JCN&AGdu$+tU_K+Ehg?7s5qG`Dr[j&e2ee[c=CS7b9:/qcF2mMCH_;<+Y-],A[#e[J`G7mn\!T&+4JJc^!;
%%WcB>Ld98[XUpU4hgb0ae*Cn)Wa`[!O,anF[hlu3gj>hKcY%pkYZCA.q?gkuH.#.:V,5q'HUc%7(./s&q'.gX5<9c6j8+ARql./6
%=O^H&+c*+>4WMqB]6>qFMXt.WQjCI9<*,A$>K%gS;6imM;?`\SFTRin!tqOV]:F)dNbHCAFSDcgbrg#3KElX,9+J`pB=l1r8aSKT
%FpO%m#c'XW+b6O7C6;i2/o*8;bL@[7c"G*ELeNL"#+pI`A7R/BM8\F%c$TPOm5a2l0;^:AG0*`RFdu`AS-C8AfNC4p@$)Wp%^8VB
%AP%HS6fSOu8KR%F8Xg25"mU,A<mF9u"l,_'Jtu8`L69>[,n^`pK51/qj.PfZ%Y$<H=lid1nJ1_'7#lj0HtpfiD'&)3&rEfb64]8Q
%2ibf%KkUaD)5\r#_g\QEVL$jkXm/\ZgG<%#U)X/09->#%+e3e_!d*eG''p#1CsA%E#G9(7k6@q\-1f^*@bJQ5c,9Tl"s9IPQ8$j_
%.#>O634d*PXHXCPf3$#&Up#3+kK8<eN;=T6\#l^H\ZtX#A'K2AT:ZMQFYq#u3(X0.Fm5G@,!Y+`K*3tQHNaK>;h`OQNZ1C#pl2's
%r&1=!LB6$>Fh$;::/NLH>N,9,4ruk6Tu8%83ZqJ_<)(YqGk?)MA8Ta7Y0`c.(/8N$&(]k+Ea]i#-([?Z8B&WO!PS^i/G@U.AGK8\
%4_%la&AlBT1"QW!AEAsfr2)alY.n9mY:7a*"Vh]O1J12HV_GRf%%2^t^!/QD!,H[Ij9>h??j]L`.C]98#W)2be!i)^80pPrZOR"h
%&c>qucClKerISRWFGZl'/bbW%\LfXj.e[:h^e"Z8__,#/Id+F-a49FFe"mH*q0CqOS?Jbpi<:0Fe^u7fgqs#pQ=3j>7u5=QThL+0
%pGn<L[Hf''6\8*XU[kiaE%q?t5WTAH*N'o6@cbpJbZYR0K1r0Od<m=](Y<"Y.T.rV2hmKm+!0[-gq>O5F&A#0O$:$q+:;rCk67b3
%,t+>-dCjH:=n,L=R<DPpWVer-C+"rb&_7s'IdaRH,=>rJ8?m&$nTUf6"-FLK&Pac(*2Q)ZNnu>[bu69).r_brD"hb`]6*>t\P5$U
%'>"M8'(b;sShn]L+cJ27]5?JIXiS`0;SNHMM$.]1)pS5LOg4]6=-l?#i/<oJmcP:Q1o$9nO8C&1%1?p+Jk;Ps^;%lA<XiIR!_hRe
%B$12'\8R2"1#KbA)L(Y&U#4GW#cmjE8)t'/'9f*H`nILhLf/Fs/hOKWH$*hTlSb8fdIWW,rpbQ$NEB=K_bQBup&imJpsc8n2]DeQ
%\p')eYI`8EE[8"@`>(H?=0i!L>p"9s8qY\a=ZBDrG:J'cO4p]nHD]&M%I!,UL<3q^^bYETK6nqC%7/:,+`6fZp\IB,@4'8e'24YR
%9Al2m0'N+bk5d:fD`#@cb$p7smBF9-S`TZQ"qW<Wrd6o0.!_*ROdag`=R%9O&YLUnM&MW<j)I&43uZ6r7**_F5u!m7q6\ji"2^+J
%TKT8^/(%,'.+)\#&gFsKj,Qi]r,6dqb/t7epHeD)rZA/i_*,lC-kp7X^^JuaIM\e!N(E.rn'$FP=OB,2*s@hZIC^!ArqsKsM8Fju
%.@H.9o"]__S[&k1"gm$Ej9nYtB52usj<TPi'se'IS@47\;tL?j.Y.YK&(I8%+dPmMlG6>qXW<6K3,(UPi9BoCe"="#J#P6U.c,0g
%i-S5BJLZ!;]J6(B%Y5T&j'N^r8q,o?9mql@&u%2=G>JV[__L7unkBZ%a)%ji0gWg,L1QR/l"]3EY3U=kfiud)Ja(Z^]DIiLM1'S3
%V[jc(-`*.=6$V_3h<`LQas<(&%@aJ(Kkm#QH9j\eRR)"J#U*dV!0(RoMa#S"Z;Vl22+aG[!N8[NgoRjgBD]mrUepZn2N,l`r\V^#
%>Y7S>@?)c!4%@r2Y[4KeCBZc!H26cfY!nD3?G/:A&Du1.j$pcTH+)=Z]3Tb&Jk+!;<_odM@\obC8[^d@/3ou$0IFG/JD,lO(#/Uh
%l70s=?d3@(CT,TA,N0&]I20e4/(J)G9^*_6!qiUQdn/Ft6R^D?C]oL4X,k9j%G"lG-P?igHhfOPCG?D8BRLinj8#Q*%<DW:&r1s\
%caX`i]B34If[LG]Eq(X.1O"EX.C=8i=j%D5I3Kf>'2W&B5\O:TTdgj6T^6&,^.6S@"R;#hUA>LC,U#?)TN&q?EKDUcGIPIneJ3.^
%6%sH!e8KsmYOab`PY)^%?UHikA$Pp?+eO%3b4j]4d';s)Sj@m!TAQLagpoI`T.-2+q#&a^c,cX'le;PTg0N&!8c[27(>!?(rjJc?
%)a=fU,D$4>8,L&4?J;SV'a.[R81`G[4>e8uiLLlB>RTfF]h/$[5'&'\p%d2F9nQJ'3)D.%q!.+(,bM6meXJ;]#JGs@Dm-5d<J*;2
%k+"18%_9.gZk;de+OVme+)F*/Ua%c"$7hd,/TUENI<:O@?0V2(+k'MI3XNh3lh*$NJk*2ZC)FZeKR`]g2H80?aMB*:aKbQ1?s?lu
%5cFtD"noEYY=_j#hM,OK?3"_7nfb'XNoM.n\UF\bm`5),,1>#m2mB9I:u%8CAui)$Y+LGX4d8ChGrd-ZMnS>@J1Z\bJE[7UWC$0m
%p]e1AecuD*Rrk<*<.T%KK-W!gjq\++,%:oQGC\W<P4uSQ-EkaQA3?s+F7ml,<iHON%7s##b.NJ2aP?_7gbRP_e5DoB%oJb"''Bs2
%)R*,k4%<'*'hA5qD('sR[Sd7?(d8$&U["%BjJa4D?5bs=R!M99H8+RU+Qa&+-4WWf%Bt=g?c0tJG;K#`F1mB(Fb()e:L`D`,PX%Z
%5/7@k2B_"!K7*a+OV6r-IL`+<GMhr]F3]Tq$M,UbFCgO4D.B8-R"2N,)u2IK4\SX<r>^)g587>jZbk%LeI6V.b&ptLK(aeLP%*q-
%e<3_k29'UL8@`"n0nTHKq4/A+(Nb)b$b\apNI%T)b*"Q>m`FB7Uc(F6(,$;"jL64>7;O?^I%j9^EA?]d'%9#9Y"=/f9YV@>bd<b*
%5M)@Y%_:!LU?%s1:p%RDmm6']Ng0nt99DQeH-4Q8mbm]e$R.-KIXB1Q_V@(dZ_!col=<KUbpl+&c/T`W9]R.@-cl8@(OCLg$b\aZ
%Kn=);aur0Lp%do:h/DL_1GAB(1bU\OREVsO&J3u#oQ,K'6D/0>^"jOkJ'0s$V2I/Z;!UMMn<l=kN7ZukHE7oN,=5'Z(0.*npka6E
%A%ooD\X-!_;Wd.0B'F%k[asqI)+i1jR^/Fpb0S9[%P&]_QcO%cdlAuh3kVu0Z`jrXh/JfpA6CG8c-P]KOnqop^E/)0Ag*#lc_um%
%%t,7bMM0K-B?:&MM'=:&__)cNU0QX/bG.9Ya&j(7kpkL9,`WDQ8MYqUK-uluel2O"P)9&l57ZBCohPM^9rtc^*Tf)POWWsV`Jgk\
%/;(Ubr[hW<<IiMAYXj!)'8-?YqNf(-RVQF8Cf#>-!46E08rc8P!E]YE,E.DH#;uiB]Uu$M1$CEI9]abUeqc'<]u#e",q`?'XQ>[k
%V`_MAA,/cT&c`X)*#@kHk_#p"BQCnDKsXl'dR(WfW+OY3\l5OS7as+Mi>70(/,KM3eY!+%-r/f=NF>UHE\2<OiZQdK"q!Se*$^+k
%0'$<80(;RT&ifnA#\aM@7$V(/OU:<gW(sIub_D;`(=/l)2KJCCRg,63b,W93Gs:"s:6&m`bu0-3C;;;.'*0*&=W$A/jm4%ol(H:k
%mSole*+rd<NNdligtC0UM-A(\d**2\0s=sW<3Dih#F%[!hR<LGTR+7#-`Fli=-mIK%Gp^A\pJJ0IrFOFq>#SVIJgWbr;KA\5j"(`
%!Q@W9=AgJk6?bK-UbBMr32RooGZWm((GpDJ#Dl7gFF)$gc[I5d/-OYS[p0&LZ.gHYLOZRNZAft>r=N?,8af@Z5QJKRg_%e#80LHG
%J\M&k/-P/G3M6u/5Sf/$$/GqSc29-sJ]/J[SUj&^PB8/p5\iVV?Iq9eB:82[",*0@\@W.-jupI*+)GP@NTg:Qlliufp)rQB@SQg8
%I!s#t(#dJWhAaR%``bRT:%kL6@=I85D\gt]6&27KGV"0ORJomD>2P/8WZl]Zr#%.MdApmh5[JgGhLCXbpDHUJq%#<O,CFmspbN_9
%I\ZZOg_"AR@L3:]M&DN7c[>cddecVb^e_E7ZMXC']'gg:;fOL%Lk=C]'E$,SRaU=)^-?0Da%Q.SfAZkNp8;(^r^QU:El!kl+kM45
%6hE\;8'"f;ggKt3A9+Ja7/r+Zk/f;B/hL[UDr57-Vup1D#RnL1Lj]O9'o1j78[HN?04MX?ei7Q)5H5[0E>\]$JARk3g!!qTf6-dX
%-k:_+AA$IO;=aT]qlo]0.Alk"_O'"aEER$o6YcXS]f*V[qe*5rg)7W'(k5)t*9*0=nN1?7<`QfWlA*sJoMisFNCiea"hin>BWh-n
%7Ht,&lE?;uO3^ej:$J:CR'^uZ?bEVH@*V3Iea(3;8&:%p^<ucPbp*qH4NZI`[i@bCKRlh@b"KniZ&LQX^U^.E<$8^2%l0AYHSP>Y
%/R%:2jI]!,b;YK3dP(1>ph<C\rj0?jIboS!I?XF<d]2sZLS'9%k"XfA-s:(=!."BBit%h/q"rQ:gGaO&$74+@%/)m(_YOL_J$Y*e
%c/#9q=FR7H>gKJ9LPWLE$_\0232;?-Pj@NlDgs\^>InPGr9;Y5T#^8lMBEU?ITFZ'A;qTG^>MJr(]#/8-G[(phj!6uqI/`o(9:Yt
%#7JC46G@<nI!p[%>L`0#0Z<8@3Z@I#h'f:/5?jBjaWBs&@"V';r!Z2sPZ)Is53,^Yba6QXrNJYAVnZ@FlDEfEjL/AGI>j`-:(u=8
%@"n:ENMDPQbrGMndGNF`\Jb6KcpR'M+4g14l1p.iX^FBs4!3m4-'7.$$69cG6>6Qo(eZbTGI:%JA7Fmdk3JLYN&'as&sJ`rs'YZ$
%qMj8NE_V$)U,0d7b"M-I\%,uOdtLDO2i%R*l05'Q""Em^Xo#E8?<4P2=20m/.DFNVk7,l[+$]T?J(M"MS6A.GTc<UJk?_-W$:%i)
%'PK,dAojaDY$u4pY7mpR&YY$K#M@=')HtV`%OWlsgfV9_A9%g:HSUcUNQD("^ba5R4Dns_A*+0[)P?mSP"Ibk5U>b(/$Zf.DZ%0Y
%bo63;k@XAZ^DYh68@<q'5UH+I9[Y!EAn"J-U`P8f3R;[r!?+oHCN]^t%XKfiMCPMq@Wd/EF+%NuU/#V6+3@R%$<Yt9!5P0/1/"kL
%f4HI((iSer^0H_DVt/4H.2pAsJ.!aI=Cu449iZ`FhZjOd.TP75=$3)C`_^RMrj)kO[JeKl72_io/[-c!rU"GF7qcd%3i1o9Mu1nE
%8ms0@IGF$j4(YL4S7(U;(0+U#1qFX>:&4Xg^K`WUQno+V`^\M(-qD;P=CX1.HDL3grPY@ZldPolnnMu#S:F]emfOu[IEj%EU+3H"
%Ef-Sa"dC5sFXLhj53$@Wir#dnZsA]VFg/=WXd.cKZDCR,V%?46Wg4Z!@ENr;V.K"d.Q!K3Vo!)OEn=glqH6jpq.B,Wro7A2e"Wa-
%'o7t_(F!=r]9_YabJKf!Wn(g?(tpUGAZ6#VmLni>9<2,o'7S=X$a`be1;mcr*-Blm9;<C-Mc.;N2`)5G@5E:I9/^:'euHhMPHPs.
%g&IhIZD3*^D[*h,;nTIK*8N[+Y`*Brq+,8iX)RHp-H7m`7AtHKb?#4'WT<Ga_9#h(e%oU,1>9aaJG"4a2&307iouUo`*%j#/EZmD
%/Es,".[TIL*1f/2r-:XO,WCC%>jL!o09tgKot_N%;2WC7Z`\('ZY6P`'J\ePXYG%DNciJGce__sUZSIY;(%Hhm2m+ulR]jRa//ZX
%4eUC+\'Z89+mBC_,g@X*PG!`S,/FWS#5"a1(TBBl@E?b%@_$X6Ui@jS%tEhATAX[mfBurok9#Q]40pHXGtW*;bL3%$=qG97-C/S)
%KM0sc$)62S;5n9qQ/V+lW6T0)S!N9`08*r+jst;F_?%$d1\pkUhngTN*/>!NIb(fJ^.B&8s-JT_a&*"&&!ek\16mn'SJ/844R,1=
%RUJgKGoL3IhqM(_P4C.NSpJmQ^uE1AJL:S![O,;`:`mNnCaprr_M(:g)NNfrHYB+2d(&:@B-m.kN0"@=\fubbV:[IOf]N//)D%(7
%MK=._mCFHj8T-L?$@4V>T<t,f]TKS;^#f_=.G4^U3M'!>9,<Y>C\dYK't*0aY7[cAp%`YSZT<0-hjR8..3s,;ja#-BB&WsaV;"';
%%]ZUL5>GA,Wl!fO):LSaPnl$f:K89;^s^WZl0q-R(AoO1g>qk!X$T^#-[Kj2^m/OsBn(]F'G\9]6^BupKnGP0XF7e<L)PKT[!.mb
%%IZ/R#_*4f0*Ah4lPV0]$@af$;$cjaF$'hmHb$qi&F!i3VAn,>2+/W"a<3#d(8^SB9s,EF@mDE'U&#"EWYsATRWQ"bA`ucVfTZX>
%D9.lD`OA41SHdlPJ_6^-X?*"8Ih?gXT%b/X:3&Pm7*'Y$rpji7hN,aNE;aI+DU%M-ND#)5%&MGB;T`B;%s#Xc[.:a'\^Fp>k2usm
%Ra7=QZj*0]L3`S$oJ&U"Zn1A/2m88u,$Bc]U_QOIShYhrOmlSUrKNCHT\:f7qg`?mT1Mprm+#Z_,'l#pI?Il!j8NJ*qteDhIu_a&
%3P9m[f(5'W!)]>op'Z7a57H"KDL`Do4?Ei,IK=1JPGhD*XN7_OKj*$q5aB3A):ELpqKr9;EqF&H<X>][VQ),upi=`%,MdlHiR;mM
%,<aD?Y#X/qc\@Ud-%p@f^+_-75tWO-.\6<pL*X$1[qcU+q=n+Rn]TQHm0)79J/u4"oA$uR\=o=#JF\[K=>DQ6.Q$p"T)%dQmpG>F
%c=M@2Jguad*-'P12Hu@f^1<[PU]G"?FAUk^9A!K3;_lh>kmKbS^$chAb^t#6D'A4scj[2CZrFdRkUKH@#7:DuG%e"%pgsQo*m3sd
%$hpKEL7W_m_hHHpP!9,&Ub\\qR,b_g?OHpmlAOS.fG5E<APOEbdMn=sX.bhl>ZkZ<Y,I-`&DBuIJeJSic)3<dXlnCU<B1]Cp'TV\
%jT;S311]cW.]/lgPT^%6VA`iD]:,P&bq`)r.G#4O92eb_BK>9A\q8=UcuXL0$&o%P\7=Dn-[$7P3_jA.(rEk:iEOa03np3<$<0Rs
%5hgBJa'0+b`j#Q+/$;hd#kbU]Q'SXf9f5lRi!$fMkHd;6GVDXG+I\aH@\WOg>%WH]KB@e=WU:uD1bruQ99"\Y]*YJ/`BrhCpqd;)
%Wf@_2'*]D]gaOD4Ns)i&]Ks8(gAF3[h9IP-Kej9V8#7bK&0%3L3hTl`%a<(MrR.t_2$"h9M"Q-<3oY;b^)%p<\f4K2,q^2qq9f`k
%"e[=9((a)i&t7*bAt]rHWdU6L\f6,$C5TuUaq[6HJ4aa/M5kkJ!,L>O1(?Q)T[p!p'b8!@Pn,Cd8\bEJS,%gqTsLn,AbfqP,D0_b
%CY@$r\cToJ^U]R];5A(3.^!(]m9DX!*iNg6"'a5'`.KB.VU=1Aktl!`66SDl9&h)A^&(!ll3.gNO+R&8%F)jULN#TR[Bmh9!sQ*p
%Vjit-":;$co^E0.MbmZH<f&=sC48,H,61Fa&-E!g%1jBiJjp.T7/j66JEg?hL2rNFASSTQ?@_e"B/;*rRe8GkE?2@.J7]lbm]U`@
%$F*JF/`M]I>o>TjLX#>Zep3<uf'($L#+AP_J>fgHJB%*33%kT,kAhR<!L4YrcA*X>j$J17meS7a`,X;!k4-D76;-Lpc9:4"/$'-7
%JV'"Ma@5'lHkf"Pr.1paQb!AB:(E2aVFgh@SkYj^&DE0r,eb"pr<Mu(dB18j<Q20BjXB_+5n>*dW`O9LBmo6omG_;C[)^'`Sg`\X
%6b'3A[d.Daf^Zn^!Lg@[9[J4BfT6he"]\is:I2<E<(md8NLFWc:PZa'$s<[7X+:%aNmc5lh2[-Vn><fo&t2X$(5Q@oMU53lfJ.FZ
%apt8$!YQE5S\2)6\TP6l>L3A]$6rP=`G8Q^CNA?B\jUt5KLcb"GpQR&0Y/*U8<7"7bYCEHL<q:,5XAd?oE1H+5X6E\Y7'/g0aX-3
%Cq>9J+<a<:^cJMPa0i$&UD&S_5eTW!NJ:]R)p0Xfj(i!9=sL]7MHWrX<'qs9l(dY2W=(j$eVAZ:E;44-;pYe&%1KObC;V<h]dADo
%_Ii,'K:j4M&Kd/@&+%X4D<i`'#',RcC)(&r+uVlPjcsqs]W3\;bNZU%R\8?ORiD%=:8+kBn8@p)dYb0+<P9s0j9RtIG\mau,>>3?
%@["2Cd-'L&l!lI>3[,#`m)$3r*m\-&GV]+i#AT8X?Wc7/`k'<kKHM1PJ8?m#X5OL$4=OEZ+=$Jo!?Xl&P/8IFXP>>M_%kPT5bS\4
%'mRp#C;G9_>C'5["!TSFa@n*:V,rd-h:t!hm1smb#Xe.3R8mW,P2lO$K4/HNYp3V=8&mdj`8h1+H9S<XiH_4:]@U6:5LNrb!`B(&
%+aC]WIF!Ffbj!s\1]tF6`g(MB"3NeheA'^aPY>l5C[`#KaEeV@N+4\qR[KKqm3OqJ.%I1Y=?j.rcJ%,fQc2d%p@fI#fEY8TWN(gt
%+k?>l<8#;kmZ1D^YHV];jY[T#Yg([0Cc!Ehd]uKa[p)!946jK!Jq'?4m&(j/'TD2l!,L'rL>Pbr)k1V,CdD-UCl0XiN(h4.4m.*L
%`gYq$7(*9ddQ0NW1HdZ!(1m7-8q&AQ4lT^GYl<)k?9T.Ta]*cZi8`8:qm">VQPjQ7WhBKFSB"/dVPua':=R<jEG[>YbJ6BW4qA,R
%<X(a-B.g1P[U$V)BM!3FUj\)`M2r93&aO>j"`c[cmi5bNO-5crOtWBHHL%UGcqJEJg10s4Q9u)eiGnl%V[\ddec>*KFOj9(M)%1U
%goVHP.]n=.C<[9p,UJ,_^UV[/2B8n&,eV,Nc)G"k"^Vj$'e!094io\:T/sH!2oOYXa@ma!eSk]<]>aLdA&X0%DeItUWloE62]([B
%m"pH0Q1_;R]sn9a!de;bm#a<0H]S]jP**[;rqGi:aK2QDeiNODch<CLrH3<IZSEaMWt,60^%7qrgsS?k2gQIlIBc2/E2dhqXq:_?
%#fZtP1a:S-XFroWQ0]\Q$n(XQ<_daL6fIr\/DTL$=KJA*BT+&]ddc\uG-;!@?N/l:XiJan`nPO+6p5+ir8*mL@Y,?JH!RC44=b"-
%fCDNDjnl#XUInbp+V%>S-r("k/6jE@L4p9dGbMa:g)@p`g^&i`,-;'V/8i`#$:5(9SMJaglWAm&nQR`SVS/?BoT1L-'XeB[Ai-m4
%^j.'W&3<XP4E@?aHtJ:OUjA.>&"NQ=*6BK`;@S)0+%"4Fb@ARE5+$Cfg'6ho@0A/njWuTOj*aaS3^Q+i\V"UPaFc7cFLPX7G](!e
%^-,4s`>L([Q1P=tK2XaF\DO2R5kb&sZ(4lPDS7)Pjje+>.=@[7oi17HF1cPKC)2ZbZOL3\$8$o84JJ>K[uA,n==WH!$dNe4=*#En
%V_H>g&_`Fo5e<fWmNKq<8):+>N%mIfh9;nF'e(+^'Q2"BfAf2p&NM@&F$=V[G=JE170MgL8Esu0c6GkcSbc0alGlqdnuRN"Q"V]C
%_L<XDiXfcRD98^/<Ut0-1NZEP'CGVEL$nn%+U)q?[^IiJL\/<1XueK6@hnCpoQB6tKq[7*e6-;kX7'q5qn\u#X`XK!qY"Lk1kk_D
%IR;YA]n#/9ZLR0KJ$fjp9<&_nFPYGIZQ#9e\p[TN"F.e(gYEZt]K=9hYlgt&TbnOI!9^RHqCt`73:?NCiYcD%QU(l+@YEPRVV,De
%@m_.G")&YEW7)mTI)_u/$/TQR,Q*J_I")g)Z<81H<MU&!%++)B[2BN*ck%\UVsqJ_)P.3LFhf1g\(uiQNDA:H4C$CI:?YEM&DLb+
%Lq`2>0I<$C"U`4BkX':jBi]X$[.J"Pq@S":U#/l),LCX;idF7qK\qdaH,s<Vg$/[>$7EGG*@T4>F@"bJ7kI3$-K;QG^$3VtYNVX/
%>nr.e^)O_>l&5V"mf:MRr$n`7H[A133r8:-5]:O1h&Br,A\",L#Y!1(c2C0eT<lQQB6NH<<k9Ht^nUYhiYqfJWHcklFcge?G5t5b
%#)=mO?RA<8LhOT`?<9,<r9J)j3`WM:4eYVh3dbtS3&I,RIH[Z2hPtWSq>ORch>jTUS\=?HT3EOP(O00%))Fb>l!R848AHd&HRVDA
%:g:!=BmYj#ClE8=p_W(Kru<j3M0Oj[E4arrK+kuB<+768+``.LkU_EUe#oH:X!RrBeF79]]<s0G_95d=AX1gH\Brmcn$$1BEW5UH
%ZEJoYBb7B[9Fi1TQ3FCb`3C+bTcUDXnUjA#%^scd*jD#IIsm/8PL@_.9\D'UCXJa0iu`'HMJeogcS%i?#,,a/c4e6kSNA%+;Q+Q2
%kj@N1D4j%Hfg>3O6:r<:85Yn@EXR?bgd/g]I[_iHGGKrp;H7+b:mi<]NQ&9NE)69IALY$PFd++oebn%ICpN?'C:aMP[R4Y%j6#.?
%]!/`$TQiU^/*.E'G.Ht;H7C2k._5^j@eq&(LmrN0Ha,UrG3$ETW6.smK@L4"Kn<_#Ouf!=E`CP-.G[!=$X8@Y]ZG7j4),s0.I4So
%+VJ1T1O(K2B]/<]QT*K%T&9#m0(`&'4"K#8_D!d!h'$Z@4*;*+J!nGD3M6f?8Y=Ej]MW>KMOAL;ckh<T>HpLNAW'-l%7jESif3HN
%TO>5)%8soOM[Veck#JlmDl.uqT&V,jO^lUO@mD@Q/4p^m2lr)_aQDAaO?:Wm"</^llUF#Yp4C]o./S4d:^Y:)r;tSP<`d+$?P?$.
%j5n1HnB(pppdXIBjB4Zt.[,H0C&B#meZ11@1#`3>lCDZ0X;qXZ<+MN.c!H!%?VrGQ7F"/Pq,eg?>K$:sL'Rq.73RPN<3SuLi0MAe
%5r<i0&JQ6OEGJlp*Fnm#d4k^ABW9AT/UJLlF/C.^g_j!RGOR@e*t6\nN#5?EKU:u8Jd@/TABiK5C+fK^CN=SX(;sUp%o+ln6WiDe
%'StA&0tpRDaLh?]<K<JO6nJ]32J,dq3k9m9/CnLs(.,\_A641KZ-Ln3cqqQHG_N/8n1e0Eh?`QoV0n.:'W4#&V<\CmR%P-4ljc`d
%ga`<S\>Q%;V("8;%9$o(Ya[UteI6/RW'AuI.7/q.7XA'K<:#8']RnY_XRVgC&W^A.-=o88^6Qph][*TAE-WrN>$Qah#E5g,2,qZ'
%^d3-1fL*9hkRSAfqOoWcTH/3#I7;Q$C^4j5I.RQJ%*q5t60\Xa]nm`m4(t;UU;L:XP<Ygf$Tp!\6V.K`&raWHG&dV]lDJ/.+4FVJ
%;4uW;fbjt^9(?"-EBd8j=KM%M(+AV3j*0BLi+lZ+31c2D5c]s4FK(ABQ]nS]g3e?ZJ^8IV&VZ4]#qdeU8&7-RMeAr$oFpLf$G^]m
%o^9g7oj3,6I<YaT(Olr>6<)u-"rgl'/&*;R@2tR_1C-r/)$^R<ESrsD:.S6u4PgF#&%>uk$D[kB,T\Vj$=g*lAWD%Z-,i$[k\bqn
%9/L\sO2.o-(&'InU*?,9gqWlVdA2FCrM%VcoZ7Z*1"HRpX>58Y,OE'o<BaNRh2a(E,n9uf#aK+hpBlW\-.;<u,eh5qLG)dGF[etl
%9T@3U]C6,\nBijgbN(Mlda6aal`5&!=Gn?+<1)lQqHgEGcgt^\pr(TUkCO'K@h0tM>,O3d$,hWS"mkrC1?*hLC:gSlV]1.*PO;^K
%GA#G0iEjO1$*n70F3?(tOb^V/_Q%0@,6nesqT&hXoG*'&f5*H:GnnKp'Sfi\0U4ObFVE1COG(^k]e'8tnZ;Gk"F*O]\XEb:?45J(
%$QNVleCaQ<_sMEGYAL8?38[L$=_ZDgSDM;FSUZ87]"C9R]_:A5*Ru=pIPPZ-n5t.ST>?>4q-ppEH[^D`at*#='.YINEnEb2.1LDK
%:.t2/BT]k.j?VOII=InFF!mBO4Ul<I8f&;pQRjd*&cJB!T;)\4%&pi+Z,YK?3M[FK1LkAJ(m3C]PX$_UlY>TBB5NhRagb9Q68eZ'
%Uo@mW3*KF3VC^irBVL]sE'oB]J"k\J5JVlt5J2GAO\lTsXP65]3V(Uda815nl4`!=MgbcAGP)WgYnZ4+oKBm!8DG3^eY/FQltqME
%cEYunk\V+u:p=Q`WMW&CS2&:e676mDGUIgi/r.8mTZ?lk5`_\gM,'2LDR@9i,6`_`[f\[g_hm7!iBT86E"K*Z.r&a_DdT#I5G!0`
%ppSSFFCGCe![h<1Q-2q@I2FuPL/X^RCoA21;jc+6Zpk>0@tdBl)NP8-37RZJTfe981>m4be$Th-cP)6"iY15]D!pY_UTZF>)28(P
%b55_^]`'9?q(e398L\5t&RaMojOb",D4`0rAT\GHALcM9.+4jjjdoh.1!T:.0;_n+J\H'0*p?td$KgL>BT[!lc-DBDNgG`lY=?X:
%m)mP[Z*6LNoc2A6)!dgjq!D\7j!\OU^42X?o-e!@V0S_aR)pI"(Ka@]`n9Q/96ie$h@m^D-4/Rb9go6;".IH1=/.&E9q36S:hL]A
%a^!%/'YS;Lr^lKZ=.'Y\7.XAm4Et7U5S=YrG"1Jk'sEl+2oCkL4Lc&!@rZVjLhkuH8X$dL);beK.u__RXmU,@%OR!]=p0I518<X\
%>uW")7J!@=dr48_9uOE9S^%-W#?7,WES\tH8eegVmSIrKAT1age8K217&WcDLqbj:$^*%TU]QcbO.'1am!ESlc\$'Wndm;"Fdr\M
%97S95UU3Ne5c"*m%7t8u,QLeJW:KT!GK)&#Sg;"L-XrjMnueC>ech9_l+3PO$QFPrHpAcW.U)'6gt.60FrA\;nPd?=@#^:W7gG&*
%J8u%"FXm+c8h9@tleF*Gj_?U(1P`/D;+d&SdGO'CZPCGl%K=HVQ.4g=c45RQO?1UV_J+hr!+/kLiE0o],F]IP4/aMP!0<C(+PmL3
%O1!#^+T<\e\H,;R-<^!AHO!p.mtE.$L%?0mdn6V=aM1,Z"I%E%_=Yma"Pp%=CkHYF(pt%]gH'O&WnZfSfbp6;5g.eff6'u#h#.T$
%*V;l%UWS.p?geAl`pPRMYdf[]?\TSSO39M<-UdFhH448=hM]3sNcrt`;dG!B(@]2S9HH7WqKeQ@Kn;VhS;o#^[F.)`D1O(E]M*4m
%@*H<SWrW*8[CiTf02),]Q\l_8l5L67NlH'ZrN%.dNH<#KKsMF=lts9_-A$cmE,MsM$,"A&N)X.BoV%)u+D9WB&-`/Y<rO(sJ.:(f
%li(/\=>_jC3j/X2>10%I0,"^>g2aAI:2GVubD,$s81"Rph0Xmsi'riL$3DD.XQWP@`0Em?\c1/nV&T2j_fO13d3-P0+793HhLh-s
%Z!-c$&0&oh1eRFWaQXe+_6*T$'_aq9nU_mq5b_7V6IGJGFLjO!"I!m=`>la);4*DW4bE_N(mcUl[)%ai`bN`i5p%i/CFW+uP1#5r
%:Y8.n^)S3_B=8gmT\ah-6r:lKp)N3*!j.<)DZf$6$#407;ht@%6?R.VgLSu?TKSDjM9m-p#T#8A6Rj>$':q9pi*f0mRKmRiP_#.:
%Duu^I#r'lu5oZrj+fnFZYJ?I%;Cs>FK\#8!U#Z"A/so.2;st*_"Xp"\6tj4UUc+%)>o:=C0:1Z"!X%JsH/D]S-00lO;\8P?!RXI?
%A@bNtLu:7S)?Zl)3jGj^7EMZ0S0;<8:`n!M)b%&CHp&7o@nHi!d?l18HS,<[mJ'slm_T.G=pmTpf"tYqedB<6SX&gSP(QI<2/V6n
%\j:/Y]GMB=3MjboIPD5Q,mLS6LB+:\\dlH?X@Fh!V].KZ7GT><.fcK?0M$Ru7&#S5IBW9O+mNZ'i6&]X07sLCNk&V>MK/UHaCNR6
%+M-A/bn^U;?"kJ6gqoj-ilk6IM\)pZkiZ??!%Ms_m,nT,R'6aM`J+DQ0m'V[btVnXGFAT6NuGO1<1b"SJ\Ie_\F+rDhX^dDTP1E*
%qRfXC66_KR_R-t<[L"l,agB0i&)dW?X`1O\>^*20@_#oi7j#_%"@XPf:e?ZnLbo[_-8`iO-=LZ[f+?fQGo%?9/+*^8[2[):,LTU*
%#H(I_bn_UI9@3YgM=<tlb$`HB'5&"qZhi>/*-+4Dq:4Y^bdGOg\Oh>dQ5XH9gp,jFLjj#52:rA#mq@.nFk.E0pO/1m]EuNIWH)YT
%RP<_OG&PjT/n:_FIP6%=Pp)"8]"?2n[#>OP]hL+&c@:m`dF\`lE?UJG@\d\%_$S_#"sY.0JSN]_Y"t+`h42^bS-2)MTUIH_ZM(>d
%;nQkZ:-P6M<]OeATA03&Qgo6&HI#.nPfX9f/E";D1nb]-"_0l['@:4B*nQLuaK;&%^g4oMX9QpXq4>V.V-iSU+.m*Mi0ER92],JE
%9@X?>ol<(kMPuts1mO3q,qmlG6QVe^SZteO@]hsHW-Eh.Aaofo:1Fnli9#Z$iE']t6Z*1-/.>$\R.4.K%0XZjHKDco5`9bX3T_hT
%-.=/Mn;@AVek\?s%#_T/GR6^C`\N61_TF?jEUWmiMP</lptuJdO+qL.$6TW@hQ>tR!X5K8""bS8b_+f-"CK<7TWBjSPjDW#>m=J7
%58a8s"n.>o5g<3F8h_7K<ClJK!LY7qMumSP?D:,]ntVnJ$u>FE8>jn^<E1s>nM<b<N+gOZn6nZYr`_XeYH5F25muYN+DW6umgngL
%-1g2T?^(/>%P1oQDDG-f'ZpN['p<!1]jU?FBa6$.Cc%nJHic:9<+b@+ESRi1(N^TPjahSG&+B`SXQYA/m(:QGb1e[&D4P;u\9@KU
%YjXW,,#/i7CMUbn8C["Ea&lpr)3-L1/+R;,-kqB'@#nng;8+;;0%rN7?<ldK9+^Z,k4k]51E:/bG':VVS1?!W#7:QL'6=[/33'#[
%k88-qGiT^*5,"T)s7G+.jY_L$JE!>R3'*P(*V=`.2k;FO$L9!(9RPCnqTupnNORrbA[7]FhU>qB)CC+_4N`[uDWLICd/eeSX?k3d
%"!+]G+;7Ne+bf]W%o@*<J6Ek/_6VSFRngi+&TD,o-6L;#-(a*mP6741gA'=OLW*Y;9\X"m2BVIj]gc\.[L+0)q!D.CHfnKaT3$"4
%l2>9%7n9.o2AqgM4<?Y9H-fK:klFIWbHD_nI3/=n"T6'Ij8IOgm]bKADXH;QaP^e#G-^DRigcQPJq?JFQbJDFD><%j2hmCp2LRj1
%,:='Ve6?(54?M91F=pGDD-=_IJbJA5<\il%!qIA45fj'm:9gZ,f??QT@E:^u8umYeGHc*%bs6M'0b>i!qQTar\Fq)@@6@VG'Jgm%
%4)'.iiPT.IK)p["<tG9UB!Ul@SJ%d?!e5<rO?N8rgadBPq+pDc-W*mP._\[tBT>mI#)\VOjl\"T>bS8]RKe<enmh.N,:%'ZgY"OM
%gpD3V9@S=4\iR2WUApa8"4Z=6oeRB4'HO='OI)]@cV]n2gZi1%iRN3Z>2bdo)#V$=h)5a+KsSe-N[jN_?I@W,=uZ-5buSe>po_mK
%[u[9m/EAe`E;p$9]I2DpE0,@L5q]*a*Vb8`SNg/SNkZ(F8(9Ad;r[Hk&ANjp%J0b4\mXk=74A_)*1J%RK+q_emklA2ED^3cPhcj?
%`NMIkqf;9T6U;!M&Mq[q>gMjjil8ZGGc)_nHs\j0D5a!iLFUTF54%H]BH0YWrI2S7['!Pl0DR6(X:jLd(Otl3mn3UHOu`,,OKJU.
%r=A`$-@O^ilHiP64fe!rPY_^InRg`CC_BDh"+8H)$P2qBq<I[d4jhFK%8W'3'3Ehk:AZQ2QHJA8`e1e,Wg[R4O<?dGJ4Ok6/);V0
%L'Z);5>eG3RtqX(MhRT=U3DFG2`ZcunrHHW,7='K?@kWVhf#40"mkU[Km"Q61<#hnFGfp.A5U$`NpI6F2U[OB6;$GPNUoVo)o!HW
%C8]]bj]"Oh&pj`t?E#_(pelJTA,'j<UT1Xj\?R$;f(;@m00B"\MPNQ#HH,CXDj:>b4hkqi)?UiUU0=D0;5Ira4t=aO6r@TBM]b.f
%Wu'lZR#[$>8PM>:;&dh#H>mm3,gs":MZibb"?r3'Q]8Z`a9.:eH':N3khVM;M]i+_'1F7UW]E@@kj,Bm0N=pk1M8[:g^3f'`7&W]
%L@P-S"\jeBr59!u2%IJ<?]5C81+<!t$7Q6X_iIJAeYG<JTpVMZY\'J53TuR$5m:!XD21'G/buS9W%FeJTOWt'!c*9`=ItJn0%JB\
%!AP6&+3=Fh9GhN00mllB%dXidOa0_6A35N[r+@lfIKNS)(2l.QF;?>rl)Ukk,iK@P7fb[Nd"e;V$RA%kAuKO8kX>X_L!QE./$cVp
%kT3&<9$>;.-7A)h7#X!(5uY@KTPH@DR+/?;j)(6ja]VK%W[7.W:nf.h]Fs(h)bal&cP<pH8WlpodE!Y>6)t!t)>7I3f-NN.7qCO$
%Q&+\Y)'+D&@`h,:B*+@NESs9TG&ghGoVO5uAclq8EuOB2m&qgOQ05QB_:3S@*t>YU8om/Q&SS%jnbs@j.Q+e%R8iNB'nEo187+st
%0Lc]WRT^f.Ta=<`pZN3^MnumYFbC)8CnlWT&4aU,hs9L>0:Z\k,7[OIatD1-41Y7=P;p*<//REm.&FrROToR(<)V/X#Wl-:'I3Rh
%&A4*eW-D$NITnG_jGME%aL)CS&t5RLE2`>kZAO6K$F=@I_M^.(Lq0MZL!(uSqlbRYO2MP\ApCED#qR4"-u><V-;UW.)I991`Bjc[
%K#)!5^u/X=#?N>M\&+BRBnVGL>DUC+o_@-irMW*C1[hH'IaKP_k1]XaD04,S_'aa]Zd'ZNR&p8/%WWPmo.mC0fSE9JH]@D3*9b-]
%6/HArEi7E;&7K.i>XV>FGJ-U5At]o?+J`%)6u,ZN2Ah!u9&/+UMh^W0lNp2F0Zk4Ud4-`7U`j9Wn#\HD6OcaV<rAq!3e<Mur.V7f
%AZ_[lAU,"/D-j<_4@Jh<nTV/X)u:+)ED`*<UQd(&p_S>mF1N8Q1F;#8YSs$[Lt=1rJIV_og"_haJLb5-J-SqhO(3cui^%NsK)5l>
%)Q<mnrIo<"EsH,B!qNO`5C"mUA4_I[SG&aJJ4CO2F+AB';05NCd$;7c(L;lV4sH.VI3frsi19bJ$enkQI&MmJk]keM&Q+]!:hP>h
%6>cC?aR\OVX"Q=oUpY0r2b]J=3l^@smBo/37-H$^IZA/]TtsONWR%PuX@$M%BYEF_A$ROM.BE+(Hj"G<oa$RsifZslFlq]UDS4S9
%0!PoI)Xj1QfXP<K28;kW_RZa)jW1ubHZ,ej5Er_n/$%+Qr#rF*H#+I#]n#IQh`t4TEIca@1tVJ(,h`b#?0KE3>3Ph+k66?&1F4?K
%48t@*_]0EUel_Hp+:j$(S\om'_q0s7<f=.fZ#cU14Vg>4#bW`@L*OE#;2aqRXK(-[No<p;h.YJ/@)^ZXJEF500U0_7.!\jP%Z1<?
%8mW:JCb^oG[pB`Sa+=hM:M,1"Fc!=,*?<\nW82,S]G5eipiI\F+VMreRKMP1-H,N%QnI_+aUSJ>XCYGch)pD.jFo_.U>RSjeREYO
%9C^*^^3Uc=4YdA=<frdFkW2Y[1[MrB_ubYp)dGs"'R[oTMap`XY\-8Ni_I"cA>[7%N/\&k\BE2e"Z3]W>e&D3PePm<Bn3oqT]FQg
%D+19.Ot0"nS%D&#Pm"[<TWAe`X+1+J%>LSY8D_:b-qnaW@eND:Z_i'@(STX8ZX\P5<[p*^6nVO^pFlV7+m<u(ED=sR*2=!?Z/1MG
%M$7A\p)Lu(A[fP2_R+G;./@ETGZcK0LaJ9n5L$sCJ114\;g@I".\\p&=RR:r2eJ'/F@/nKK]D;Qn3^2NU)uA[BlDORV<,2(qmGSH
%+kT0G"V8\0nY/8/\<(jSh79$"%?9N,<KO%XNJ+ttLCrC?R;@L^'LnLb^c\<\h,eusE+g$5*k]n'N=M/UV[/;dO+]i,[N'VBUoM=-
%eC+Y>Xo,]"WMnkIO;mc"n^bG%Y/7e5X1C7]2o,<+DKJ+!lH/(2*K16fQ_%PO%KDako4tibbg[`D=4_iP%lp?\CJNCViVaKCF/bnX
%dP?PpXXp9sJs6OLXc`N%RHutETQk$%"h.tuI5)$lNkcQkQ'?U-lAm<M&5^oGjoK[@Z"\cJrc[MMQfYkTe?`&TBTLrXK3gM'nVeDJ
%8&:2AmIir+2&4=PF#PBZ0aP0B@_U^6fU?JGbW\m8%5IiRZpaW?3F<ftXWqO1^+[-'CI+_h5G/=TP<\e?@uF4*+qV*+B.odR[h*?S
%eE@aXj#Ks)DE%moh$lW9GSt]a@#(3<d1&$VG/K=9-bV`As7X;m[@HW-Nkr=VR0h"[B#fTG_<nRA\C"kN[8-JnTOl]fb43chYqR56
%H\#YbqkC4Ms4pk,PcRCffO<J>Up/po(NfT]o\;pF%<WF,%hcdmp6PlT3$uE&#,0$!M2MTEDSn>ImpBu]ja:qDpF?AummHXg@ik`G
%j116#"%6$L70rYV+,I\OokQK'0DteLrO_LTf9bAJU&Qns"!4s8g8i:&aJ%4_`4]NIqV^-QF_U'pMdXlZ/@cka+MJXEf6LbX*&BfJ
%U[6#'Ln;,mUF-PU8bmQ03]LS&MXDf-n9,9Pa7*f)9]3j.N!afN*^>&qG:22(d0U<p?Zc<oI.T-]*Pme*H0_fM)O8:3"$EW^(Og,e
%pWk`51jJ+&k:*b.aO]nLbBG-!4s9)o"(:="r#2[V0]eN2!gPFd]I4#?9#m$M.NThH<r;T-^gu#EfEapkAIF<uLu[dnFl<:WT":eh
%MW?1P"8H84:LiLkq^MjOFoS:p<sDgE.K)LG;'ihTLT7im3GGml56]p<=t`[i6<*5q);2OcI.t0'qth$MW5!LC>c2KcI?/P0(8PHB
%bt!smEg:]&r+/jcAFE5b`J*lBb1<U6?22F^YuTk&Lk]8(!]=dg+X'I>?U"S-:p!9]ZW1-D>`_keoBXq,XQ#C*Cn&8IUYd3H5A_jo
%Kc6j7ZHTC"lP'*qcIALX`9b=`KgLTUOE1r.a^AUiD<ffEESNg^K:i9Gp#('4Xsut]X8p4_+<A>S@C0t`j@a%HSL$hpri1ar)B)'D
%CbUBpq(bq-18HO?pXtnE$5ua_PT(duleouaqO_-J=U0q#<<pU>8>qq\j:bqHIF;,7FRf`dW!FY^W,h@$'LS0*$dL*m)q+67mD'\S
%+V7d!VP9Q]n;s/iIn_an=YZ*'CZ,BcUGY/\$Nu=s[p&LUUr$(79j!]rZkm=4.e1oJL]$-h[Lnem6*aT`,jJBX`El24SO`+_(g3r<
%0mM_`A+MjdZOt(2[CW\\:75;4k]<@)2SA?cnQoLcLTL'mS`2cl3=7jka+^u?K,#lj.@4O01E@n=i=2;j]kU7KraU7Z+,^pKN@q*T
%kJd#]Ic5<-3@JDn=M>*TOuCDq=ggS_ZVCX3fM6m93KObo<N?"CfqN)YOD?n"<ca79^n6,:g?k,5J;@FD'3qk*7:S[KUQ>@nW#;2K
%KS@9D9l=9X0FY.@B@NuZlP=5jnR<O8C`'fP4:J;q=&\juRA4.(Me@tj?e#Hh)<m1uZIWtagM0ek@^`Z5m.pd74_3iu:^[@oSfrR>
%gcC"L+)VSoY*E+f3tpr^;`HE-qB4*NiMBO5mmsR-@fbqYZEjPAhH%t3-?0:p:K:V'lOKJZDd93>)"gD\.H)c'YD`/H^rFYl9s*93
%WV*qM],Q-<_W_"MQ$r_i9tG%K's]CSeCNHT\Zl'-<l57tEYYX:UuchIQ7dV63-sJWYOUK27n"MG=<(D\H")HDTA6M20.SR@_]^$B
%7</&b-$3K-SPrMp$8-C`&^:@)&8p:aIEU>kiD.g)KcLJ^COB\OhpO9(R&WL#IZ;!(:o,8"j"f)-(KEca>RmP[?OR525(O.69f+'s
%Dn;:!8;Wmn8fjS_d'?VD=`9tE?cZUj_98IOVaj]'i':B^S7r^@ZM)lM@eM=sJ-J4sipJCPq\8#;_$4lATt/9+=Dc:a]O#8JNS7MX
%L1'FXe2W&jdWGaU/n7)pE!.<f,'$?c$'E>g$JPn1QPs7+hDr?t6*9[tn(F_%B5Rh?GVeDFORKic66i@RIO'Lm/`+\c4&Zuu7?_/b
%,^%h$Au.t4fN-Dr!9LLQ-\2In4e+bMFG[5>eMo?4ERlOa>C?=h?,\WD:RJWSDXOpBbVfrm/,Sr<<gL_g0<maD)Y?tP&_9@Om?gD9
%GG$UZWlF7t5E6X[f/@2rJV^L*BC471L7!\];ll<ec^=7PIR5-d'h[NPH/XY5R=9"$]=LF7;=RaHRUr[&6o8?3)J"d@P/Z^@Jg/5+
%C@_(c6h9nN8pG_1]^+SsON[FZiJX\#RBJ^f@g`R'IA1'.Pc-?QK^+3/@Qf3;[CT[oOSUsVHk2<#I@u)crU4.n;dIDZqJFJJO,`UY
%4$#k5ao:-rSM\EB_-tgNo^_Yic$-;\T6p=::lN5TjL1UF@I8is21q,ge.Om;!G-Es]P4W,kFjJuT\PetYIT\V:Ck"Q!Ik/A'8CN(
%k2X_8%%t8]0])Yu4?!SC"g<^]K^3s&.Zn%]FTmN]/7F*RW4)c,1.F9*<E]soEdEl`1o0UH.'HeDfB&+21SE/S,1RliSrI`(1Qk2u
%i#lS'VnA_"!SgqF=UfL*(P$g(q.re;@lskI+`qD;aX!$`r5+#J'lJF6N+J3eiJq`pS^s$+%,7iJ:,cC=r,E/Z9VdrR-No_"c\2"1
%F%Uk5?7;I$LSpT(qEUu]Qu=SE/D?E*Fi&tEOJOZ,gZ7,#,T!/>AWs0[K"$^K)\'I0';XVpM]SNbR@Oe8BSFOAb+0?G3(=[&%G>*(
%s'4l*Y:e)9!Lb+AHDTs5f5$XVKNP-<V[/CHh_Z[+%[;?BY$eP&@7S-bpl5^o-I.`@$Fd!3#d]4T('+S(k4o:%ql$4sQ:]8BgC8dV
%@#5c,/uoe)c#_9TLpo_6pMh'>%HF[EKG)K`.]2a0f=^i>O_S&Ym<N*M:-0B?6JR3T'Z'^$I0mcRea%)SX>`+TN]7O@;Rn9BFXLNE
%kD&2:G8C]o3;P]5(/W?MAIq+ag:q0*fY(VU4f4BDUNqk_6ok1U0h>FVHT[$<fN2pTkE&Ij26bAoJZrP4.M21VJX%+e\!Ufi([9c$
%q$?q3cZt@=/"uh5R+nTb0pI"k^lQUDE\Ge3<q:U<a''Ur(0N3&b_,4_A'cdf*cZeU(k<=B'kB=tmaH_A@e]Rr'+YUedJ4G&'tEnG
%?)L:%0eBJ#V'aMWcDg6F]84jd64Dd<=IJ-"#"8WqU`0@C06p=^JR[D\ES(qY0m>LJ;;.k&--.Qaf@^bX1A-1qj-DF&+6^<`V^l&d
%TW36e=!DSNZB_(ej!9/nJSinnEbFK?;eQmts(J3RL=+CT0k@!OncGQ(9Nq<P=.iP+/:+g,Jt5=aOQg68MtGWI##BkU`o@/b7I?9D
%RR$0+U.BHPWYXBCUqre*%>_$?H9+4+7)lg0ZCh3%cQoIRMr1OPLkEB`NAXG(d-oV>,[iLQr>84aDU5W6!I("L0f"0^=dj+\MVfH!
%EHm*tbG\_h!S@QkT9HBHi1H4rH5B!0A@6tQ##YO2\l[4Ta%TjSTlBq\X<`UU)SY1M*gg?2BN=dh(C7m^L8Brrm$6@n\tYO!XG2MN
%CJMf>W*T[Z*"6i6.^DGk?<DRjFd3\1H"2'KKD]go\11nR6^I#Z=QQFdm;U6KpB7s9IT=>k!I7jK$q:gOUb7cbZCKcT<'CI;;)Ah>
%AIY=%P;GYbH+Q+`'pViI\bt1R\KA!B<XhN9L0hjl@60[(E1Z!oJbbfW6hs)-2)UPUUI&%iiDZAVRh#Y72=3s?#T):S-ojQ^rapKX
%=X5TZ#FT*l\hYH>f@q+l`XLpf9eU+k6gs[0->%rq5gVBR*l0NL&*d6.HL=GG!#rXX1C[cC^\PlV)oh`/i9f,18+?M0^a,?0"iQ-I
%P-b1]^oVipqmdE%>j&`(K3peWkNc<po=GP]URK+'7((3<&$WU*l>GG\)6/Af`mA1FGCLX+pZrRc!C.+&=Sb$KJ3;EW&)K7#1,2n$
%ZQTONE!QZEX_W\XrN3^ppEP%L30\\b!C.X]@.Q5T2U-ijBQ@ZdLf:..>256c5J1K.OH5YI,85_-%!\XLN;&p5$5g-[#,C<oekY52
%SBP?PQNDF]qQt4I<!d#48nr]Z^oN*G,-MU%cXg@To(96X>bsK^.*#5/[3,f3g@2-IaEf7<\:VS(VHC\L"]QNL<o"NsB!oR3Jl9sT
%osT:p\^i)q54e!aD2e;0=qH]KEJ+!*^-Usm@ukEH"lio*aV=Jo4VBU>OaUbL`6:E<HNcAp,aF>[8o1c$ZLJtpEX_XD]Kbc<Zk)f5
%?k2h5G#!.)H(^-8ZM`4T7ERFlP#RS^0=8R"`nh5f,6^`PQ0-7Sq+<a]Ho=N,Xo9)A"1lTW!so-A\md+VFK'DW+>YPqb-V7NM*D;/
%(tQb*J8ie5Pj(FV`3N@Xl9H^IS`(CZ6fe3d0CH:ULqa4LW)=/uh,/Hp@.PX(7A3Db,cZ#mH[P^I,,*?3HQ@eEp_`gSbl`jl+erSC
%na5d@e/RXs82TEE4`NHG+AUe<qXM3?&!Y'!_'^u&Psm;1r!;J0g0GO9RZet\9m0refSgkT?l!S3k_QnO\G#9U'1G*DjTEcOISen,
%^ZGP;m<>3nqjhD_kjn6TLm]K:H+Zj:Di['le9g$k.F=h=iuodlO5qs?iX<$setD"i#0.%Fo,">QPp5H4>6,P@&L#S<;k8SR$F`Kh
%29;`Z;+$25+QA^GGfi5'WH=F^G4ju&`U4Y.5aQ^!QsGN5A?)5CpEd0,E2IeTZ3.tW`Olu`E?Y,$`IDbl$3uY_8^O("$NaRRJDAaf
%Y[#3.f<>^Ff;DYN!^<cfA5OH+:me!+?9XZaTmaDmANs_$_l*EG\r%+NH+gR>["_).r-sB!o!RhQ:4oY3H`a5snq^s5q\EOsbiZGU
%*=rS$W%qlq2d`LWR3BW9R7>Pk;UKf`<ML8"%;6^`ar[i/&f\j:%>f1d^<:p,X^a@#bRe%]Ph[Y'chN6]CEBth)r=3"nk>`=<7jL%
%K%]S[B_i'VL7I'V9I*-%6(&XgOqi3s(%^W3VRj$=-3tIq!p78_p7Y;FN?UO=jB"]F)astXcq6LcW3%C`OjDst)UOb=5XL"kQjYZF
%4ab%!hffKh!'A/AY5&;slS3c5@EB*f8&p`mCmHUPP2su+4:*iMfD`/-L^YRV3!3=)#Z1+`5*A*f-o<@=NPbp3q+/UBPWI;4^?`WZ
%:S$daitkQ15mnXT.hbclqef:?">!7#qDuC>G[Z^h8K,b%>tccV:m"@V!Y=Kk.KM=%TKCAn<*/fZmV9bTW,?:O??OpIF91kI[sHRS
%f:p+u'X\6W&q]mN8I^*@4a>r_WSsl+-q>/N]Y_k4\R8+WCb]Xg?p^V`OYk@dXS6LmS"qM.Go](l<T`9j/3KTF,[FWKfk2@I$&J6<
%f/3ht0sas?d==Enqcjd)\8Wmm5?(%?fu(sMi^qTUTkLjr5c]^&=S7l3XQ;ij'VP4n<o_7>3';AdD][\KR292M+`GI+-SpN%,D#8:
%m80"^KqXCSdJ/]_Zi:7Dh7]lRXEXKAN'd_t:9J`*F=]hK`,W!cA0%;Q="/'l_gS/a#GnT2"p=_e-#OT`^C&&+"3Q:f(K10$^K(s:
%_pi"o?qVi6b<'9k,ifM&*LNm0jKn0]R<\%JWmj"J<!W6Z9tN]r&C%5JP2YS9NEjGR`'djq>hmk6fln(*0\tP^P7*UME&H#C2rYkB
%GAaX:<Q)Rc7Q73D*N1r?$mV_%]eZa8\X#Yj#!-"b'kl1cCIN!A7O^11SK*"cB1Uj;fj?@RV?nBT.gX[sO'1Q<G$-OjlbnBHB_Y]\
%-AO`?\LhB!'H"%*ldgoE,F;VPSK"SD43s,9R[i6j9;ufml!\<.%"`4;0f=)[,V%e5"f7-g=%-$.Bo=&$dOAerW#n3RQ4VM:P/I?&
%BB8NWVOIr$GLLe%fRm"DUm_!9gm2c%r^)5PMk-])#U6M.&>h`b_$s.4eXC/$.;]@_(\i=XV&Gb"2E>-QQ/r8n$SdtH\-uO/4mk_D
%"<kla&oqdN2Y[90hun!iGUb?%BV`?/hqWKgrnuQ+4C7M\+e&"6i^+Kbb+ddc9.7N,j`THkoQ',O#3<WXo?:htk8GV4ZTIaO_4]Pe
%563Me'/ii@_.'o4o8B1c?QthRNaB($9_oN^>V=0^)'mPg5dab-,3H<R'30AFIEP'5I4AfupT:(:mITahLTWD=,$0"Z;7H5='>7s"
%:)"3#VDEKB)&lEqC<'n?-'jIT9M*jpm$:1Fbc2"uh9*CCn?Pc!FCe:Y(s%s%9guQIR#,'6n1kCI0CM6*CUd&PBP3-)VW:#V'S!uS
%#d.0nU]"B8?p;7'5GL8`;HuIJ4pMFYCTW(*CqgFb"LH(J<r#$BAW9$+$&]4b-9nEE<5)Q#='`o67J9,<8<=D3QI/<Hlk,DP%GQl%
%8WTRWYA7#e&)_TQ$5DT(!N!CY@)QXO,9hli]Xi2sJ`')6m>)GVZJ=6/$L_#M:cen.OAR=g%$]l:KVFJNTO,Mt4((2OC>Mi"Q)uA#
%2>7`9foGUPL)4_ud"TK-\j<9:GfNt\1F5jeB;?(AK,.:UE?V\p#dq(DEn_Km,\/t<c,e2U<(tRYOK%1-!+IJf#\>[9n,uD=kj[p/
%$E+2-2NmN5D/Q`VKsmUnR5$qj6<!CjeCFVX-9'HPNb0/eYLf<C$#!lb1NV%Ip!"*JfqDi)1'F!%XNT$T\5Zn5!QqRU;C'c<`^6KC
%r8*!^Q\8?(#1-c4K)ua,c/B<45a)qtGC^'^Oo2RCrh)#R#GJ"%)2J^.kq,WZ!aYdOTZG-L3/IQ&@.s*p?9[^Ge8`S3-E;%fkaljU
%&fTmW_/&ZM"aQ)hIkMZ4*(<EtQM;?M9YR(&3ga4bqas5J^dk-X#3I6@8n\?s#JO,BIOijbo8_06h+G@Y"\djp-^5o;Kb.VJpQjdI
%1/\1l</Ms+":KYfl[qYLM[T?N!JdNKEb.d(-WF#0oE#+ee^r\pn]K2]WI>uoqZ.G/U/DY\%L4BlRmtCs9ae^;"A8s>&H=!Yd^5[H
%a/1F^7P-Q&O&/j,Ht1uHp^pp1(En\HTd;Q(DH/!l)0`*X&C:ch"%(PIZoW;AZfK^p'X.$g94rX)dPij<.^ZgSHhK7[)ZX0!QR.I%
%'u)\ADe0&:cU_Tr!udia&5p^VXJ4b`.?q!3Ve#GJ_-KK$ln#(Y<Xi`lk#X-ZCA_CX-AfV%,@hk*,OM*odWUh^!;`f\/J%]04J#^"
%]8'G@K\_TU7HE]KV\0I3'ADK`EBrFUKf?";KF/k_b!JXP3[YJsQ!/>ZGmJ_T[Qh:aja)-P@RV]af%ErLKgIri7([IihOgaIc2Ra<
%E54:PEB,lm$CbO=j;72?n7K&<Vq3&^JR2n9MJ68?1T1MVNJHTJRk,L'YPJ[#1%ZZ,`!9INB^#HC'k7"5UWG<jj5h;DN%YXEr@tT(
%kP<4Y'Q*HMNR%@J@fI3i)mfLt(\[5l1k'S#:N8pV^%+N#^U`EEV?2r'&Wsg[.2M8I3fBmj>iUo\95nj=nlAf?ZGGK(jko#F[g+OL
%V)]d>q!!dpJ%)OLKL&_J^c^c'._jUPX5`IP+V\e_e[4PGAjkFB6CtL+lS([VMs<Q4rHPbnhgb@r=$0qr8=LK1")OtQ)3>'1M_A9&
%c'oGJ%$-gYJ-T?O9dBs?q5YT4/^.\$H=RZ4CG=1kIMBOVb&houQJL"o]RK#Wc#?HH\Ub\'MeT<l].Hin1A_GY3c/.OP])u)l1EWn
%nMtMK(f$s-C_T+T`Aa,b'SV]s5>Z58.Qh<,eP6C*+_=^s-oTT>7u%18S,t%.eOTj4LEh7A\#<Q3kAZ*4Dd#BG/SL"b.)`A"5'<K@
%bQ0rT7NO8g6.p_//ho2UOLWcX^B]k892WNrF/2)pYXR?E_'#I`@O8sJ?j1CX2ZXk0UM;D=omr:!NZSC<PS/q[@\;K;cqB]H90:;J
%c-Hb]Op&-@I>o:\jp+Lf$_S6hd__SOKV#Nj-p&K!N2Ou8m/<oJR/>F:CIFVN;,\4fD!Lei+pf.*(Qi-/gBP8<C5nK\rao2n31t[&
%>B!kprcR2p;\"qg"qM4SS#N;fLYOh<JU'-)hCTkf!kO-!Y@&?W3",W*a:[4MH<?l4ldrs'1Aqg:-4YhnfF#]j00$5?O:pCdcIDaO
%kE,8+?QTZZFfUSh+=36&q%9S':jRJ;/5j0M=Yra*6:?u=r6]Nu_bX%<UPTj5O6#raW%NX_P8'n@@lT]K-?6E)BCW5tIC@4;]3\*Y
%PZC/@V-tam+>LAN)EPp%aT?dj,jsVp8Eg?.S^boa7=rqpd5;lkNl".qWZdP71*9^Eq62aQGS#uT%b4GTNV=j=hm)0Q.TML"2TEH8
%UsC0\8*#6bMP*K70:6[VBPL%DmaA^@O'5iOi2#*1%lT-NRZ:d#_^>ER@"q']/'g4=(St2)#CV0oa[e&Hf#Xpq=<&kQe3/>MO:qjd
%p-@SjcGi02<*f9IOAt^TUI\fu9IRFCJJ;sDLkm8RNRo>pk#&jQ'0^'%QlN&GK),^o'u>g"j2"8.k/:?K(?EhMN.9Fd@@eW1Ks4,r
%clCS'H7>VM6)n]$Z!lGrZtf?*R>Rae/fYWqSJ\8[lcHK2+TUci*`S3e+\\o/4A38e(a"jA!E:@!MLj9rFlk?g\.g3"QQFm4]WhR7
%HU,"i!U\hRDjI;4`&M\YQ$DcNJ-oLDP^UcV<q>!M%Zd2;^#.&-)9#2BBc0)ZNh$K<mRLmb_&n]G>q_*]&4V_i]"\!H7Lda:66GL,
%e9ZULL^F;CP'ZA7m;uRN<EWJ$)A",7;FKaP9$:Dn#eK_U$13]Y6htK2n%*J@lrfY]P;Ycj5fojeT]fBcd=qTKpCFMThWcQ07HMSk
%%57:7Ul+08\<I4L.I#&h'Gjh9oEu.>jD:\fNQ</=mBj\i3ao0j:)->81O]ReOaG*.LD'I1/5*Fkj2,RSBTaX&75L/T;A@K_/t$q/
%GKH=^qVkk4>.7&Na,UC<W\=o@J?4>rgbiiBB;a`*>'+XJ+;dXH.A:G6&&5Le41bP5NYd73Ich(ml`.2lh<:SE3#UK\fst@qHaUE)
%Xg>'YHFXc@8bN]2EXQ#:_jgkjH8U&.@f:.e%bhNM4&Y;r(OAQWk(XGn1A<fi\#p@;S;M\V/Ggm%4'2#Rs/&hVUb%"EL6apjmZCDk
%n+En,%REJ,GAV^$<>L!`EYNqi?@%L(5Z&I'T4YG=WXr3<5$6H7gI"M^9m6>7DXB,X+uV^NT#Xu-]KC^#Kur.JIh[uWE5?iChZ/a=
%(ZkrZXb-m,<FoBEF``7KVX-G*9]mr"]Wri,i,eS49[Ai*d?-!iW/M^TjM;/_G1K,HA>5&!fen4!X46oS#E3ttGAHLY@:R(.(3/dT
%VD1=-qR)>1D&i;2RX@TfUYQ!"]OG5Gm5_<O_cr9Hqh$t5R\?qGX@gEYY)1\Q'B2@08'GU56Zcn3]loG:[G>sZ+99sKr;bA.'73_j
%'b)`ZJHO.LH%?WTfdjUm)'cS7YULg9DB,T5N;PqCIEZ/pPS&7c?836RUH5is=J7S=54<J5?SEb/6eaI56O!bBDsW/Hfnt8?paV_-
%#Wm?T?RR@3:`E[,k4W#Q47@\r'sm2dH_X:$a(YdVHtDuf7"CV)4oKo6H^QIcN9[n_/(p)Rk.c()a(%mZ`N,*Q%)(6Gg^_34a>"=7
%g((:+gQrB@IUnaC=sUN9Bg3XePRom=nfTJV:GjP?"aSPZ7ll;-6<:[>YQL^pGa]X;G<h5/^!Qm&*A0`7m3k\0Yn>n#o<(%g%R*n)
%n8gudj]Bga+hZI&Eb;@%W(l07QV)>kCl%D4:rMs`[e]]B9:`ita5?pb&-(TQ\,ZF\J,S!nTE!4jJ,eON0AmB@p#eR>o&'HGoDea3
%07X$#n,E6GT7?h$gWtBJleh^;o07a#?e:parV>osr8XE!qti&(rp`5Pp:l1:VL??(rpVT@jZi_CGQ/KWmRB_~>
%AI9_PrivateDataEnd
